
STM32F4_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009618  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080097dc  080097dc  000197dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800983c  0800983c  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800983c  0800983c  0001983c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009844  08009844  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009844  08009844  00019844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009848  08009848  00019848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0800984c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aec  200001a0  080099ec  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c8c  080099ec  00020c8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce17  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003cd8  00000000  00000000  0003cfe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015a0  00000000  00000000  00040cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013e8  00000000  00000000  00042260  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025577  00000000  00000000  00043648  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015553  00000000  00000000  00068bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca553  00000000  00000000  0007e112  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00148665  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bb8  00000000  00000000  001486e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001a0 	.word	0x200001a0
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080097c4 	.word	0x080097c4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001a4 	.word	0x200001a4
 8000200:	080097c4 	.word	0x080097c4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_Init+0x40>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_Init+0x40>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x40>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f94d 	bl	80007cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f008 f802 	bl	8008540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023c00 	.word	0x40023c00

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f965 	bl	8000836 <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 f92d 	bl	80007e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	200000bc 	.word	0x200000bc
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	200001d0 	.word	0x200001d0

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200001d0 	.word	0x200001d0

080005e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f0:	f7ff ffee 	bl	80005d0 <HAL_GetTick>
 80005f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000600:	d005      	beq.n	800060e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_Delay+0x40>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800060e:	bf00      	nop
 8000610:	f7ff ffde 	bl	80005d0 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	429a      	cmp	r2, r3
 800061e:	d8f7      	bhi.n	8000610 <HAL_Delay+0x28>
  {
  }
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000004 	.word	0x20000004

0800062c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065e:	4a04      	ldr	r2, [pc, #16]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	60d3      	str	r3, [r2, #12]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <__NVIC_GetPriorityGrouping+0x18>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	f003 0307 	and.w	r3, r3, #7
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	db0b      	blt.n	80006ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 021f 	and.w	r2, r3, #31
 80006a8:	4907      	ldr	r1, [pc, #28]	; (80006c8 <__NVIC_EnableIRQ+0x38>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	095b      	lsrs	r3, r3, #5
 80006b0:	2001      	movs	r0, #1
 80006b2:	fa00 f202 	lsl.w	r2, r0, r2
 80006b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000e100 	.word	0xe000e100

080006cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	6039      	str	r1, [r7, #0]
 80006d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	db0a      	blt.n	80006f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	490c      	ldr	r1, [pc, #48]	; (8000718 <__NVIC_SetPriority+0x4c>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	0112      	lsls	r2, r2, #4
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	440b      	add	r3, r1
 80006f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f4:	e00a      	b.n	800070c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4908      	ldr	r1, [pc, #32]	; (800071c <__NVIC_SetPriority+0x50>)
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	f003 030f 	and.w	r3, r3, #15
 8000702:	3b04      	subs	r3, #4
 8000704:	0112      	lsls	r2, r2, #4
 8000706:	b2d2      	uxtb	r2, r2
 8000708:	440b      	add	r3, r1
 800070a:	761a      	strb	r2, [r3, #24]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000e100 	.word	0xe000e100
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000720:	b480      	push	{r7}
 8000722:	b089      	sub	sp, #36	; 0x24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	f1c3 0307 	rsb	r3, r3, #7
 800073a:	2b04      	cmp	r3, #4
 800073c:	bf28      	it	cs
 800073e:	2304      	movcs	r3, #4
 8000740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3304      	adds	r3, #4
 8000746:	2b06      	cmp	r3, #6
 8000748:	d902      	bls.n	8000750 <NVIC_EncodePriority+0x30>
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	3b03      	subs	r3, #3
 800074e:	e000      	b.n	8000752 <NVIC_EncodePriority+0x32>
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	f04f 32ff 	mov.w	r2, #4294967295
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	43da      	mvns	r2, r3
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	401a      	ands	r2, r3
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000768:	f04f 31ff 	mov.w	r1, #4294967295
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	fa01 f303 	lsl.w	r3, r1, r3
 8000772:	43d9      	mvns	r1, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	4313      	orrs	r3, r2
         );
}
 800077a:	4618      	mov	r0, r3
 800077c:	3724      	adds	r7, #36	; 0x24
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
	...

08000788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3b01      	subs	r3, #1
 8000794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000798:	d301      	bcc.n	800079e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800079a:	2301      	movs	r3, #1
 800079c:	e00f      	b.n	80007be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <SysTick_Config+0x40>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007a6:	210f      	movs	r1, #15
 80007a8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ac:	f7ff ff8e 	bl	80006cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <SysTick_Config+0x40>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b6:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <SysTick_Config+0x40>)
 80007b8:	2207      	movs	r2, #7
 80007ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	e000e010 	.word	0xe000e010

080007cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff ff29 	bl	800062c <__NVIC_SetPriorityGrouping>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b086      	sub	sp, #24
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	60b9      	str	r1, [r7, #8]
 80007ec:	607a      	str	r2, [r7, #4]
 80007ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007f4:	f7ff ff3e 	bl	8000674 <__NVIC_GetPriorityGrouping>
 80007f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	68b9      	ldr	r1, [r7, #8]
 80007fe:	6978      	ldr	r0, [r7, #20]
 8000800:	f7ff ff8e 	bl	8000720 <NVIC_EncodePriority>
 8000804:	4602      	mov	r2, r0
 8000806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080a:	4611      	mov	r1, r2
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff5d 	bl	80006cc <__NVIC_SetPriority>
}
 8000812:	bf00      	nop
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	4603      	mov	r3, r0
 8000822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff31 	bl	8000690 <__NVIC_EnableIRQ>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff ffa2 	bl	8000788 <SysTick_Config>
 8000844:	4603      	mov	r3, r0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000850:	b480      	push	{r7}
 8000852:	b089      	sub	sp, #36	; 0x24
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
 800086a:	e165      	b.n	8000b38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800086c:	2201      	movs	r2, #1
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	fa02 f303 	lsl.w	r3, r2, r3
 8000874:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	697a      	ldr	r2, [r7, #20]
 800087c:	4013      	ands	r3, r2
 800087e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000880:	693a      	ldr	r2, [r7, #16]
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	429a      	cmp	r2, r3
 8000886:	f040 8154 	bne.w	8000b32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d00b      	beq.n	80008aa <HAL_GPIO_Init+0x5a>
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	2b02      	cmp	r3, #2
 8000898:	d007      	beq.n	80008aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800089e:	2b11      	cmp	r3, #17
 80008a0:	d003      	beq.n	80008aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	2b12      	cmp	r3, #18
 80008a8:	d130      	bne.n	800090c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	2203      	movs	r2, #3
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	43db      	mvns	r3, r3
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	4013      	ands	r3, r2
 80008c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	68da      	ldr	r2, [r3, #12]
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008e0:	2201      	movs	r2, #1
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	43db      	mvns	r3, r3
 80008ea:	69ba      	ldr	r2, [r7, #24]
 80008ec:	4013      	ands	r3, r2
 80008ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	091b      	lsrs	r3, r3, #4
 80008f6:	f003 0201 	and.w	r2, r3, #1
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	4313      	orrs	r3, r2
 8000904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	2203      	movs	r2, #3
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	43db      	mvns	r3, r3
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	4013      	ands	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	689a      	ldr	r2, [r3, #8]
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	4313      	orrs	r3, r2
 8000934:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	69ba      	ldr	r2, [r7, #24]
 800093a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	2b02      	cmp	r3, #2
 8000942:	d003      	beq.n	800094c <HAL_GPIO_Init+0xfc>
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	2b12      	cmp	r3, #18
 800094a:	d123      	bne.n	8000994 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	08da      	lsrs	r2, r3, #3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3208      	adds	r2, #8
 8000954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000958:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	f003 0307 	and.w	r3, r3, #7
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	220f      	movs	r2, #15
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	43db      	mvns	r3, r3
 800096a:	69ba      	ldr	r2, [r7, #24]
 800096c:	4013      	ands	r3, r2
 800096e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	691a      	ldr	r2, [r3, #16]
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	4313      	orrs	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	08da      	lsrs	r2, r3, #3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	3208      	adds	r2, #8
 800098e:	69b9      	ldr	r1, [r7, #24]
 8000990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	2203      	movs	r2, #3
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	43db      	mvns	r3, r3
 80009a6:	69ba      	ldr	r2, [r7, #24]
 80009a8:	4013      	ands	r3, r2
 80009aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f003 0203 	and.w	r2, r3, #3
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	69ba      	ldr	r2, [r7, #24]
 80009be:	4313      	orrs	r3, r2
 80009c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	f000 80ae 	beq.w	8000b32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b5c      	ldr	r3, [pc, #368]	; (8000b4c <HAL_GPIO_Init+0x2fc>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	4a5b      	ldr	r2, [pc, #364]	; (8000b4c <HAL_GPIO_Init+0x2fc>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e4:	6453      	str	r3, [r2, #68]	; 0x44
 80009e6:	4b59      	ldr	r3, [pc, #356]	; (8000b4c <HAL_GPIO_Init+0x2fc>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009f2:	4a57      	ldr	r2, [pc, #348]	; (8000b50 <HAL_GPIO_Init+0x300>)
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	089b      	lsrs	r3, r3, #2
 80009f8:	3302      	adds	r3, #2
 80009fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	f003 0303 	and.w	r3, r3, #3
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	220f      	movs	r2, #15
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	43db      	mvns	r3, r3
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	4013      	ands	r3, r2
 8000a14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a4e      	ldr	r2, [pc, #312]	; (8000b54 <HAL_GPIO_Init+0x304>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d025      	beq.n	8000a6a <HAL_GPIO_Init+0x21a>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a4d      	ldr	r2, [pc, #308]	; (8000b58 <HAL_GPIO_Init+0x308>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d01f      	beq.n	8000a66 <HAL_GPIO_Init+0x216>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a4c      	ldr	r2, [pc, #304]	; (8000b5c <HAL_GPIO_Init+0x30c>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d019      	beq.n	8000a62 <HAL_GPIO_Init+0x212>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a4b      	ldr	r2, [pc, #300]	; (8000b60 <HAL_GPIO_Init+0x310>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d013      	beq.n	8000a5e <HAL_GPIO_Init+0x20e>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a4a      	ldr	r2, [pc, #296]	; (8000b64 <HAL_GPIO_Init+0x314>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d00d      	beq.n	8000a5a <HAL_GPIO_Init+0x20a>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a49      	ldr	r2, [pc, #292]	; (8000b68 <HAL_GPIO_Init+0x318>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d007      	beq.n	8000a56 <HAL_GPIO_Init+0x206>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a48      	ldr	r2, [pc, #288]	; (8000b6c <HAL_GPIO_Init+0x31c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d101      	bne.n	8000a52 <HAL_GPIO_Init+0x202>
 8000a4e:	2306      	movs	r3, #6
 8000a50:	e00c      	b.n	8000a6c <HAL_GPIO_Init+0x21c>
 8000a52:	2307      	movs	r3, #7
 8000a54:	e00a      	b.n	8000a6c <HAL_GPIO_Init+0x21c>
 8000a56:	2305      	movs	r3, #5
 8000a58:	e008      	b.n	8000a6c <HAL_GPIO_Init+0x21c>
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	e006      	b.n	8000a6c <HAL_GPIO_Init+0x21c>
 8000a5e:	2303      	movs	r3, #3
 8000a60:	e004      	b.n	8000a6c <HAL_GPIO_Init+0x21c>
 8000a62:	2302      	movs	r3, #2
 8000a64:	e002      	b.n	8000a6c <HAL_GPIO_Init+0x21c>
 8000a66:	2301      	movs	r3, #1
 8000a68:	e000      	b.n	8000a6c <HAL_GPIO_Init+0x21c>
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	69fa      	ldr	r2, [r7, #28]
 8000a6e:	f002 0203 	and.w	r2, r2, #3
 8000a72:	0092      	lsls	r2, r2, #2
 8000a74:	4093      	lsls	r3, r2
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a7c:	4934      	ldr	r1, [pc, #208]	; (8000b50 <HAL_GPIO_Init+0x300>)
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	089b      	lsrs	r3, r3, #2
 8000a82:	3302      	adds	r3, #2
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a8a:	4b39      	ldr	r3, [pc, #228]	; (8000b70 <HAL_GPIO_Init+0x320>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	43db      	mvns	r3, r3
 8000a94:	69ba      	ldr	r2, [r7, #24]
 8000a96:	4013      	ands	r3, r2
 8000a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000aa6:	69ba      	ldr	r2, [r7, #24]
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000aae:	4a30      	ldr	r2, [pc, #192]	; (8000b70 <HAL_GPIO_Init+0x320>)
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ab4:	4b2e      	ldr	r3, [pc, #184]	; (8000b70 <HAL_GPIO_Init+0x320>)
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	43db      	mvns	r3, r3
 8000abe:	69ba      	ldr	r2, [r7, #24]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d003      	beq.n	8000ad8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ad0:	69ba      	ldr	r2, [r7, #24]
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ad8:	4a25      	ldr	r2, [pc, #148]	; (8000b70 <HAL_GPIO_Init+0x320>)
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ade:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <HAL_GPIO_Init+0x320>)
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	69ba      	ldr	r2, [r7, #24]
 8000aea:	4013      	ands	r3, r2
 8000aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d003      	beq.n	8000b02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000afa:	69ba      	ldr	r2, [r7, #24]
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b02:	4a1b      	ldr	r2, [pc, #108]	; (8000b70 <HAL_GPIO_Init+0x320>)
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b08:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <HAL_GPIO_Init+0x320>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	43db      	mvns	r3, r3
 8000b12:	69ba      	ldr	r2, [r7, #24]
 8000b14:	4013      	ands	r3, r2
 8000b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d003      	beq.n	8000b2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000b24:	69ba      	ldr	r2, [r7, #24]
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b2c:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <HAL_GPIO_Init+0x320>)
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3301      	adds	r3, #1
 8000b36:	61fb      	str	r3, [r7, #28]
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	2b0f      	cmp	r3, #15
 8000b3c:	f67f ae96 	bls.w	800086c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b40:	bf00      	nop
 8000b42:	3724      	adds	r7, #36	; 0x24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40013800 	.word	0x40013800
 8000b54:	40020000 	.word	0x40020000
 8000b58:	40020400 	.word	0x40020400
 8000b5c:	40020800 	.word	0x40020800
 8000b60:	40020c00 	.word	0x40020c00
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40021400 	.word	0x40021400
 8000b6c:	40021800 	.word	0x40021800
 8000b70:	40013c00 	.word	0x40013c00

08000b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	807b      	strh	r3, [r7, #2]
 8000b80:	4613      	mov	r3, r2
 8000b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b84:	787b      	ldrb	r3, [r7, #1]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d003      	beq.n	8000b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b8a:	887a      	ldrh	r2, [r7, #2]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b90:	e003      	b.n	8000b9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b92:	887b      	ldrh	r3, [r7, #2]
 8000b94:	041a      	lsls	r2, r3, #16
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	619a      	str	r2, [r3, #24]
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d101      	bne.n	8000bba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e11f      	b.n	8000dfa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d106      	bne.n	8000bd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f007 fcde 	bl	8008590 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2224      	movs	r2, #36	; 0x24
 8000bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f022 0201 	bic.w	r2, r2, #1
 8000bea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000bfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c0c:	f002 fa7a 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 8000c10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	4a7b      	ldr	r2, [pc, #492]	; (8000e04 <HAL_I2C_Init+0x25c>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d807      	bhi.n	8000c2c <HAL_I2C_Init+0x84>
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4a7a      	ldr	r2, [pc, #488]	; (8000e08 <HAL_I2C_Init+0x260>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	bf94      	ite	ls
 8000c24:	2301      	movls	r3, #1
 8000c26:	2300      	movhi	r3, #0
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	e006      	b.n	8000c3a <HAL_I2C_Init+0x92>
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4a77      	ldr	r2, [pc, #476]	; (8000e0c <HAL_I2C_Init+0x264>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	bf94      	ite	ls
 8000c34:	2301      	movls	r3, #1
 8000c36:	2300      	movhi	r3, #0
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e0db      	b.n	8000dfa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	4a72      	ldr	r2, [pc, #456]	; (8000e10 <HAL_I2C_Init+0x268>)
 8000c46:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4a:	0c9b      	lsrs	r3, r3, #18
 8000c4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	68ba      	ldr	r2, [r7, #8]
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	6a1b      	ldr	r3, [r3, #32]
 8000c68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	4a64      	ldr	r2, [pc, #400]	; (8000e04 <HAL_I2C_Init+0x25c>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d802      	bhi.n	8000c7c <HAL_I2C_Init+0xd4>
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	e009      	b.n	8000c90 <HAL_I2C_Init+0xe8>
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c82:	fb02 f303 	mul.w	r3, r2, r3
 8000c86:	4a63      	ldr	r2, [pc, #396]	; (8000e14 <HAL_I2C_Init+0x26c>)
 8000c88:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8c:	099b      	lsrs	r3, r3, #6
 8000c8e:	3301      	adds	r3, #1
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	6812      	ldr	r2, [r2, #0]
 8000c94:	430b      	orrs	r3, r1
 8000c96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000ca2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	4956      	ldr	r1, [pc, #344]	; (8000e04 <HAL_I2C_Init+0x25c>)
 8000cac:	428b      	cmp	r3, r1
 8000cae:	d80d      	bhi.n	8000ccc <HAL_I2C_Init+0x124>
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	1e59      	subs	r1, r3, #1
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cc4:	2b04      	cmp	r3, #4
 8000cc6:	bf38      	it	cc
 8000cc8:	2304      	movcc	r3, #4
 8000cca:	e04f      	b.n	8000d6c <HAL_I2C_Init+0x1c4>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d111      	bne.n	8000cf8 <HAL_I2C_Init+0x150>
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	1e58      	subs	r0, r3, #1
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6859      	ldr	r1, [r3, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	440b      	add	r3, r1
 8000ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	bf0c      	ite	eq
 8000cf0:	2301      	moveq	r3, #1
 8000cf2:	2300      	movne	r3, #0
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	e012      	b.n	8000d1e <HAL_I2C_Init+0x176>
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	1e58      	subs	r0, r3, #1
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6859      	ldr	r1, [r3, #4]
 8000d00:	460b      	mov	r3, r1
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	440b      	add	r3, r1
 8000d06:	0099      	lsls	r1, r3, #2
 8000d08:	440b      	add	r3, r1
 8000d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d0e:	3301      	adds	r3, #1
 8000d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	bf0c      	ite	eq
 8000d18:	2301      	moveq	r3, #1
 8000d1a:	2300      	movne	r3, #0
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_I2C_Init+0x17e>
 8000d22:	2301      	movs	r3, #1
 8000d24:	e022      	b.n	8000d6c <HAL_I2C_Init+0x1c4>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d10e      	bne.n	8000d4c <HAL_I2C_Init+0x1a4>
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	1e58      	subs	r0, r3, #1
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6859      	ldr	r1, [r3, #4]
 8000d36:	460b      	mov	r3, r1
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	440b      	add	r3, r1
 8000d3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d40:	3301      	adds	r3, #1
 8000d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d4a:	e00f      	b.n	8000d6c <HAL_I2C_Init+0x1c4>
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	1e58      	subs	r0, r3, #1
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6859      	ldr	r1, [r3, #4]
 8000d54:	460b      	mov	r3, r1
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	440b      	add	r3, r1
 8000d5a:	0099      	lsls	r1, r3, #2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d62:	3301      	adds	r3, #1
 8000d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	6809      	ldr	r1, [r1, #0]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69da      	ldr	r2, [r3, #28]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a1b      	ldr	r3, [r3, #32]
 8000d86:	431a      	orrs	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000d9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	6911      	ldr	r1, [r2, #16]
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	68d2      	ldr	r2, [r2, #12]
 8000da6:	4311      	orrs	r1, r2
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	6812      	ldr	r2, [r2, #0]
 8000dac:	430b      	orrs	r3, r1
 8000dae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	695a      	ldr	r2, [r3, #20]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	431a      	orrs	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f042 0201 	orr.w	r2, r2, #1
 8000dda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2220      	movs	r2, #32
 8000de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	000186a0 	.word	0x000186a0
 8000e08:	001e847f 	.word	0x001e847f
 8000e0c:	003d08ff 	.word	0x003d08ff
 8000e10:	431bde83 	.word	0x431bde83
 8000e14:	10624dd3 	.word	0x10624dd3

08000e18 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d101      	bne.n	8000e2a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e154      	b.n	80010d4 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d109      	bne.n	8000e4a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a98      	ldr	r2, [pc, #608]	; (80010a4 <HAL_I2S_Init+0x28c>)
 8000e42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f007 fc31 	bl	80086ac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	69db      	ldr	r3, [r3, #28]
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	6812      	ldr	r2, [r2, #0]
 8000e5c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8000e60:	f023 030f 	bic.w	r3, r3, #15
 8000e64:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d06f      	beq.n	8000f56 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d102      	bne.n	8000e84 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8000e7e:	2310      	movs	r3, #16
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	e001      	b.n	8000e88 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8000e84:	2320      	movs	r3, #32
 8000e86:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	2b20      	cmp	r3, #32
 8000e8e:	d802      	bhi.n	8000e96 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a83      	ldr	r2, [pc, #524]	; (80010a8 <HAL_I2S_Init+0x290>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d004      	beq.n	8000eaa <HAL_I2S_Init+0x92>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a81      	ldr	r2, [pc, #516]	; (80010ac <HAL_I2S_Init+0x294>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d104      	bne.n	8000eb4 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f002 fb0c 	bl	80034c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8000eb0:	60f8      	str	r0, [r7, #12]
 8000eb2:	e003      	b.n	8000ebc <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	f002 fb07 	bl	80034c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8000eba:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ec4:	d125      	bne.n	8000f12 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d010      	beq.n	8000ef0 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ed8:	4613      	mov	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	4413      	add	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eea:	3305      	adds	r3, #5
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	e01f      	b.n	8000f30 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	fbb2 f2f3 	udiv	r2, r2, r3
 8000efa:	4613      	mov	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	461a      	mov	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0c:	3305      	adds	r3, #5
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	e00e      	b.n	8000f30 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	461a      	mov	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2c:	3305      	adds	r3, #5
 8000f2e:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4a5f      	ldr	r2, [pc, #380]	; (80010b0 <HAL_I2S_Init+0x298>)
 8000f34:	fba2 2303 	umull	r2, r3, r2, r3
 8000f38:	08db      	lsrs	r3, r3, #3
 8000f3a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	085b      	lsrs	r3, r3, #1
 8000f4c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	61bb      	str	r3, [r7, #24]
 8000f54:	e003      	b.n	8000f5e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8000f56:	2302      	movs	r3, #2
 8000f58:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d902      	bls.n	8000f6a <HAL_I2S_Init+0x152>
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	2bff      	cmp	r3, #255	; 0xff
 8000f68:	d907      	bls.n	8000f7a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	f043 0210 	orr.w	r2, r3, #16
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e0ac      	b.n	80010d4 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	691a      	ldr	r2, [r3, #16]
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	ea42 0103 	orr.w	r1, r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	69fa      	ldr	r2, [r7, #28]
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	69db      	ldr	r3, [r3, #28]
 8000f94:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8000f98:	f023 030f 	bic.w	r3, r3, #15
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	6851      	ldr	r1, [r2, #4]
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	6892      	ldr	r2, [r2, #8]
 8000fa4:	4311      	orrs	r1, r2
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	68d2      	ldr	r2, [r2, #12]
 8000faa:	4311      	orrs	r1, r2
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	6992      	ldr	r2, [r2, #24]
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fbc:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	2b30      	cmp	r3, #48	; 0x30
 8000fc4:	d003      	beq.n	8000fce <HAL_I2S_Init+0x1b6>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	2bb0      	cmp	r3, #176	; 0xb0
 8000fcc:	d107      	bne.n	8000fde <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	69da      	ldr	r2, [r3, #28]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000fdc:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a1b      	ldr	r3, [r3, #32]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d16e      	bne.n	80010c4 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a32      	ldr	r2, [pc, #200]	; (80010b4 <HAL_I2S_Init+0x29c>)
 8000fea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a2d      	ldr	r2, [pc, #180]	; (80010a8 <HAL_I2S_Init+0x290>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d101      	bne.n	8000ffa <HAL_I2S_Init+0x1e2>
 8000ff6:	4b30      	ldr	r3, [pc, #192]	; (80010b8 <HAL_I2S_Init+0x2a0>)
 8000ff8:	e001      	b.n	8000ffe <HAL_I2S_Init+0x1e6>
 8000ffa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8000ffe:	69db      	ldr	r3, [r3, #28]
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	6812      	ldr	r2, [r2, #0]
 8001004:	4928      	ldr	r1, [pc, #160]	; (80010a8 <HAL_I2S_Init+0x290>)
 8001006:	428a      	cmp	r2, r1
 8001008:	d101      	bne.n	800100e <HAL_I2S_Init+0x1f6>
 800100a:	4a2b      	ldr	r2, [pc, #172]	; (80010b8 <HAL_I2S_Init+0x2a0>)
 800100c:	e001      	b.n	8001012 <HAL_I2S_Init+0x1fa>
 800100e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001012:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001016:	f023 030f 	bic.w	r3, r3, #15
 800101a:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a21      	ldr	r2, [pc, #132]	; (80010a8 <HAL_I2S_Init+0x290>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d101      	bne.n	800102a <HAL_I2S_Init+0x212>
 8001026:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <HAL_I2S_Init+0x2a0>)
 8001028:	e001      	b.n	800102e <HAL_I2S_Init+0x216>
 800102a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800102e:	2202      	movs	r2, #2
 8001030:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a1c      	ldr	r2, [pc, #112]	; (80010a8 <HAL_I2S_Init+0x290>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d101      	bne.n	8001040 <HAL_I2S_Init+0x228>
 800103c:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <HAL_I2S_Init+0x2a0>)
 800103e:	e001      	b.n	8001044 <HAL_I2S_Init+0x22c>
 8001040:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001050:	d003      	beq.n	800105a <HAL_I2S_Init+0x242>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d103      	bne.n	8001062 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800105a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	e001      	b.n	8001066 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	b299      	uxth	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800107c:	4303      	orrs	r3, r0
 800107e:	b29b      	uxth	r3, r3
 8001080:	430b      	orrs	r3, r1
 8001082:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001084:	4313      	orrs	r3, r2
 8001086:	b29a      	uxth	r2, r3
 8001088:	897b      	ldrh	r3, [r7, #10]
 800108a:	4313      	orrs	r3, r2
 800108c:	b29b      	uxth	r3, r3
 800108e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001092:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a03      	ldr	r2, [pc, #12]	; (80010a8 <HAL_I2S_Init+0x290>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d10e      	bne.n	80010bc <HAL_I2S_Init+0x2a4>
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_I2S_Init+0x2a0>)
 80010a0:	e00e      	b.n	80010c0 <HAL_I2S_Init+0x2a8>
 80010a2:	bf00      	nop
 80010a4:	080011d3 	.word	0x080011d3
 80010a8:	40003800 	.word	0x40003800
 80010ac:	40003c00 	.word	0x40003c00
 80010b0:	cccccccd 	.word	0xcccccccd
 80010b4:	080012e9 	.word	0x080012e9
 80010b8:	40003400 	.word	0x40003400
 80010bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80010c0:	897a      	ldrh	r2, [r7, #10]
 80010c2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3720      	adds	r7, #32
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001124:	881a      	ldrh	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001130:	1c9a      	adds	r2, r3, #2
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800113a:	b29b      	uxth	r3, r3
 800113c:	3b01      	subs	r3, #1
 800113e:	b29a      	uxth	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001148:	b29b      	uxth	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10e      	bne.n	800116c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800115c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2201      	movs	r2, #1
 8001162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ffb8 	bl	80010dc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	68da      	ldr	r2, [r3, #12]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001186:	b292      	uxth	r2, r2
 8001188:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118e:	1c9a      	adds	r2, r3, #2
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001198:	b29b      	uxth	r3, r3
 800119a:	3b01      	subs	r3, #1
 800119c:	b29a      	uxth	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d10e      	bne.n	80011ca <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80011ba:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ff93 	bl	80010f0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	d13a      	bne.n	8001264 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d109      	bne.n	800120c <I2S_IRQHandler+0x3a>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001202:	2b40      	cmp	r3, #64	; 0x40
 8001204:	d102      	bne.n	800120c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ffb4 	bl	8001174 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001212:	2b40      	cmp	r3, #64	; 0x40
 8001214:	d126      	bne.n	8001264 <I2S_IRQHandler+0x92>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0320 	and.w	r3, r3, #32
 8001220:	2b20      	cmp	r3, #32
 8001222:	d11f      	bne.n	8001264 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001232:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2201      	movs	r2, #1
 800124e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f043 0202 	orr.w	r2, r3, #2
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ff50 	bl	8001104 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b03      	cmp	r3, #3
 800126e:	d136      	bne.n	80012de <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b02      	cmp	r3, #2
 8001278:	d109      	bne.n	800128e <I2S_IRQHandler+0xbc>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001284:	2b80      	cmp	r3, #128	; 0x80
 8001286:	d102      	bne.n	800128e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff45 	bl	8001118 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f003 0308 	and.w	r3, r3, #8
 8001294:	2b08      	cmp	r3, #8
 8001296:	d122      	bne.n	80012de <I2S_IRQHandler+0x10c>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0320 	and.w	r3, r3, #32
 80012a2:	2b20      	cmp	r3, #32
 80012a4:	d11b      	bne.n	80012de <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80012b4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d0:	f043 0204 	orr.w	r2, r3, #4
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff ff13 	bl	8001104 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80012de:	bf00      	nop
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4aa2      	ldr	r2, [pc, #648]	; (8001588 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d101      	bne.n	8001306 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001302:	4ba2      	ldr	r3, [pc, #648]	; (800158c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001304:	e001      	b.n	800130a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001306:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a9b      	ldr	r2, [pc, #620]	; (8001588 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d101      	bne.n	8001324 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001320:	4b9a      	ldr	r3, [pc, #616]	; (800158c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001322:	e001      	b.n	8001328 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001324:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001334:	d004      	beq.n	8001340 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	f040 8099 	bne.w	8001472 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b02      	cmp	r3, #2
 8001348:	d107      	bne.n	800135a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 f925 	bl	80015a4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b01      	cmp	r3, #1
 8001362:	d107      	bne.n	8001374 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800136a:	2b00      	cmp	r3, #0
 800136c:	d002      	beq.n	8001374 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 f9c8 	bl	8001704 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800137a:	2b40      	cmp	r3, #64	; 0x40
 800137c:	d13a      	bne.n	80013f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	f003 0320 	and.w	r3, r3, #32
 8001384:	2b00      	cmp	r3, #0
 8001386:	d035      	beq.n	80013f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a7e      	ldr	r2, [pc, #504]	; (8001588 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d101      	bne.n	8001396 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001392:	4b7e      	ldr	r3, [pc, #504]	; (800158c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001394:	e001      	b.n	800139a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001396:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4979      	ldr	r1, [pc, #484]	; (8001588 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80013a2:	428b      	cmp	r3, r1
 80013a4:	d101      	bne.n	80013aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80013a6:	4b79      	ldr	r3, [pc, #484]	; (800158c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80013a8:	e001      	b.n	80013ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80013aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80013ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80013b2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80013c2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2201      	movs	r2, #1
 80013de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f043 0202 	orr.w	r2, r3, #2
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff fe88 	bl	8001104 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	f040 80be 	bne.w	800157c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f003 0320 	and.w	r3, r3, #32
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 80b8 	beq.w	800157c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800141a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a59      	ldr	r2, [pc, #356]	; (8001588 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d101      	bne.n	800142a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001426:	4b59      	ldr	r3, [pc, #356]	; (800158c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001428:	e001      	b.n	800142e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800142a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4954      	ldr	r1, [pc, #336]	; (8001588 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001436:	428b      	cmp	r3, r1
 8001438:	d101      	bne.n	800143e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800143a:	4b54      	ldr	r3, [pc, #336]	; (800158c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800143c:	e001      	b.n	8001442 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800143e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001442:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001446:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	f043 0204 	orr.w	r2, r3, #4
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff fe4a 	bl	8001104 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001470:	e084      	b.n	800157c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b02      	cmp	r3, #2
 800147a:	d107      	bne.n	800148c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	2b00      	cmp	r3, #0
 8001484:	d002      	beq.n	800148c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 f8be 	bl	8001608 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b01      	cmp	r3, #1
 8001494:	d107      	bne.n	80014a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800149c:	2b00      	cmp	r3, #0
 800149e:	d002      	beq.n	80014a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 f8fd 	bl	80016a0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ac:	2b40      	cmp	r3, #64	; 0x40
 80014ae:	d12f      	bne.n	8001510 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f003 0320 	and.w	r3, r3, #32
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d02a      	beq.n	8001510 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80014c8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a2e      	ldr	r2, [pc, #184]	; (8001588 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d101      	bne.n	80014d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80014d4:	4b2d      	ldr	r3, [pc, #180]	; (800158c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80014d6:	e001      	b.n	80014dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80014d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4929      	ldr	r1, [pc, #164]	; (8001588 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80014e4:	428b      	cmp	r3, r1
 80014e6:	d101      	bne.n	80014ec <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80014e8:	4b28      	ldr	r3, [pc, #160]	; (800158c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80014ea:	e001      	b.n	80014f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80014ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80014f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80014f4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f043 0202 	orr.w	r2, r3, #2
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff fdfa 	bl	8001104 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	2b08      	cmp	r3, #8
 8001518:	d131      	bne.n	800157e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	f003 0320 	and.w	r3, r3, #32
 8001520:	2b00      	cmp	r3, #0
 8001522:	d02c      	beq.n	800157e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a17      	ldr	r2, [pc, #92]	; (8001588 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d101      	bne.n	8001532 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800152e:	4b17      	ldr	r3, [pc, #92]	; (800158c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001530:	e001      	b.n	8001536 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001532:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4912      	ldr	r1, [pc, #72]	; (8001588 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800153e:	428b      	cmp	r3, r1
 8001540:	d101      	bne.n	8001546 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001544:	e001      	b.n	800154a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8001546:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800154a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800154e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800155e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156c:	f043 0204 	orr.w	r2, r3, #4
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff fdc5 	bl	8001104 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800157a:	e000      	b.n	800157e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800157c:	bf00      	nop
}
 800157e:	bf00      	nop
 8001580:	3720      	adds	r7, #32
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40003800 	.word	0x40003800
 800158c:	40003400 	.word	0x40003400

08001590 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	1c99      	adds	r1, r3, #2
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6251      	str	r1, [r2, #36]	; 0x24
 80015b6:	881a      	ldrh	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	3b01      	subs	r3, #1
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d113      	bne.n	80015fe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80015e4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d106      	bne.n	80015fe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ffc9 	bl	8001590 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	1c99      	adds	r1, r3, #2
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6251      	str	r1, [r2, #36]	; 0x24
 800161a:	8819      	ldrh	r1, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a1d      	ldr	r2, [pc, #116]	; (8001698 <I2SEx_TxISR_I2SExt+0x90>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d101      	bne.n	800162a <I2SEx_TxISR_I2SExt+0x22>
 8001626:	4b1d      	ldr	r3, [pc, #116]	; (800169c <I2SEx_TxISR_I2SExt+0x94>)
 8001628:	e001      	b.n	800162e <I2SEx_TxISR_I2SExt+0x26>
 800162a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800162e:	460a      	mov	r2, r1
 8001630:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001636:	b29b      	uxth	r3, r3
 8001638:	3b01      	subs	r3, #1
 800163a:	b29a      	uxth	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001644:	b29b      	uxth	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d121      	bne.n	800168e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a12      	ldr	r2, [pc, #72]	; (8001698 <I2SEx_TxISR_I2SExt+0x90>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d101      	bne.n	8001658 <I2SEx_TxISR_I2SExt+0x50>
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <I2SEx_TxISR_I2SExt+0x94>)
 8001656:	e001      	b.n	800165c <I2SEx_TxISR_I2SExt+0x54>
 8001658:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	490d      	ldr	r1, [pc, #52]	; (8001698 <I2SEx_TxISR_I2SExt+0x90>)
 8001664:	428b      	cmp	r3, r1
 8001666:	d101      	bne.n	800166c <I2SEx_TxISR_I2SExt+0x64>
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <I2SEx_TxISR_I2SExt+0x94>)
 800166a:	e001      	b.n	8001670 <I2SEx_TxISR_I2SExt+0x68>
 800166c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001670:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001674:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800167a:	b29b      	uxth	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d106      	bne.n	800168e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ff81 	bl	8001590 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40003800 	.word	0x40003800
 800169c:	40003400 	.word	0x40003400

080016a0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68d8      	ldr	r0, [r3, #12]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b2:	1c99      	adds	r1, r3, #2
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80016b8:	b282      	uxth	r2, r0
 80016ba:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	3b01      	subs	r3, #1
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d113      	bne.n	80016fc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80016e2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d106      	bne.n	80016fc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ff4a 	bl	8001590 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a20      	ldr	r2, [pc, #128]	; (8001794 <I2SEx_RxISR_I2SExt+0x90>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d101      	bne.n	800171a <I2SEx_RxISR_I2SExt+0x16>
 8001716:	4b20      	ldr	r3, [pc, #128]	; (8001798 <I2SEx_RxISR_I2SExt+0x94>)
 8001718:	e001      	b.n	800171e <I2SEx_RxISR_I2SExt+0x1a>
 800171a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800171e:	68d8      	ldr	r0, [r3, #12]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001724:	1c99      	adds	r1, r3, #2
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	62d1      	str	r1, [r2, #44]	; 0x2c
 800172a:	b282      	uxth	r2, r0
 800172c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001732:	b29b      	uxth	r3, r3
 8001734:	3b01      	subs	r3, #1
 8001736:	b29a      	uxth	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001740:	b29b      	uxth	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d121      	bne.n	800178a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a12      	ldr	r2, [pc, #72]	; (8001794 <I2SEx_RxISR_I2SExt+0x90>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d101      	bne.n	8001754 <I2SEx_RxISR_I2SExt+0x50>
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <I2SEx_RxISR_I2SExt+0x94>)
 8001752:	e001      	b.n	8001758 <I2SEx_RxISR_I2SExt+0x54>
 8001754:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	490d      	ldr	r1, [pc, #52]	; (8001794 <I2SEx_RxISR_I2SExt+0x90>)
 8001760:	428b      	cmp	r3, r1
 8001762:	d101      	bne.n	8001768 <I2SEx_RxISR_I2SExt+0x64>
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <I2SEx_RxISR_I2SExt+0x94>)
 8001766:	e001      	b.n	800176c <I2SEx_RxISR_I2SExt+0x68>
 8001768:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800176c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001770:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001776:	b29b      	uxth	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d106      	bne.n	800178a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff03 	bl	8001590 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40003800 	.word	0x40003800
 8001798:	40003400 	.word	0x40003400

0800179c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800179c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179e:	b08f      	sub	sp, #60	; 0x3c
 80017a0:	af0a      	add	r7, sp, #40	; 0x28
 80017a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e116      	b.n	80019dc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d106      	bne.n	80017ce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f007 fa71 	bl	8008cb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2203      	movs	r2, #3
 80017d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d102      	bne.n	80017e8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f003 fe4e 	bl	800548e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	687e      	ldr	r6, [r7, #4]
 80017fa:	466d      	mov	r5, sp
 80017fc:	f106 0410 	add.w	r4, r6, #16
 8001800:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001802:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001804:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001806:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001808:	e894 0003 	ldmia.w	r4, {r0, r1}
 800180c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001810:	1d33      	adds	r3, r6, #4
 8001812:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001814:	6838      	ldr	r0, [r7, #0]
 8001816:	f003 fd25 	bl	8005264 <USB_CoreInit>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2202      	movs	r2, #2
 8001824:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e0d7      	b.n	80019dc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f003 fe3c 	bl	80054b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001838:	2300      	movs	r3, #0
 800183a:	73fb      	strb	r3, [r7, #15]
 800183c:	e04a      	b.n	80018d4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800183e:	7bfa      	ldrb	r2, [r7, #15]
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	1a9b      	subs	r3, r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	440b      	add	r3, r1
 800184c:	333d      	adds	r3, #61	; 0x3d
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001852:	7bfa      	ldrb	r2, [r7, #15]
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	1a9b      	subs	r3, r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	440b      	add	r3, r1
 8001860:	333c      	adds	r3, #60	; 0x3c
 8001862:	7bfa      	ldrb	r2, [r7, #15]
 8001864:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001866:	7bfa      	ldrb	r2, [r7, #15]
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	b298      	uxth	r0, r3
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	1a9b      	subs	r3, r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	440b      	add	r3, r1
 8001878:	3342      	adds	r3, #66	; 0x42
 800187a:	4602      	mov	r2, r0
 800187c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800187e:	7bfa      	ldrb	r2, [r7, #15]
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	1a9b      	subs	r3, r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	440b      	add	r3, r1
 800188c:	333f      	adds	r3, #63	; 0x3f
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001892:	7bfa      	ldrb	r2, [r7, #15]
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	1a9b      	subs	r3, r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	440b      	add	r3, r1
 80018a0:	3344      	adds	r3, #68	; 0x44
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018a6:	7bfa      	ldrb	r2, [r7, #15]
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	1a9b      	subs	r3, r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	3348      	adds	r3, #72	; 0x48
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018ba:	7bfa      	ldrb	r2, [r7, #15]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	440b      	add	r3, r1
 80018c8:	3350      	adds	r3, #80	; 0x50
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	3301      	adds	r3, #1
 80018d2:	73fb      	strb	r3, [r7, #15]
 80018d4:	7bfa      	ldrb	r2, [r7, #15]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d3af      	bcc.n	800183e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018de:	2300      	movs	r3, #0
 80018e0:	73fb      	strb	r3, [r7, #15]
 80018e2:	e044      	b.n	800196e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018e4:	7bfa      	ldrb	r2, [r7, #15]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	1a9b      	subs	r3, r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018fa:	7bfa      	ldrb	r2, [r7, #15]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	1a9b      	subs	r3, r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800190c:	7bfa      	ldrb	r2, [r7, #15]
 800190e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	1a9b      	subs	r3, r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	440b      	add	r3, r1
 800191e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001926:	7bfa      	ldrb	r2, [r7, #15]
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	1a9b      	subs	r3, r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	440b      	add	r3, r1
 8001934:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	1a9b      	subs	r3, r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001952:	7bfa      	ldrb	r2, [r7, #15]
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	1a9b      	subs	r3, r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	3301      	adds	r3, #1
 800196c:	73fb      	strb	r3, [r7, #15]
 800196e:	7bfa      	ldrb	r2, [r7, #15]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	429a      	cmp	r2, r3
 8001976:	d3b5      	bcc.n	80018e4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	603b      	str	r3, [r7, #0]
 800197e:	687e      	ldr	r6, [r7, #4]
 8001980:	466d      	mov	r5, sp
 8001982:	f106 0410 	add.w	r4, r6, #16
 8001986:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001988:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800198a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800198c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800198e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001992:	e885 0003 	stmia.w	r5, {r0, r1}
 8001996:	1d33      	adds	r3, r6, #4
 8001998:	cb0e      	ldmia	r3, {r1, r2, r3}
 800199a:	6838      	ldr	r0, [r7, #0]
 800199c:	f003 fdb2 	bl	8005504 <USB_DevInit>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d005      	beq.n	80019b2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2202      	movs	r2, #2
 80019aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e014      	b.n	80019dc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d102      	bne.n	80019d0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f001 f880 	bl	8002ad0 <HAL_PCDEx_ActivateLPM>
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f004 fd9a 	bl	800650e <USB_DevDisconnect>

  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d101      	bne.n	8001a00 <HAL_PCD_Start+0x1c>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e020      	b.n	8001a42 <HAL_PCD_Start+0x5e>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d109      	bne.n	8001a24 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d005      	beq.n	8001a24 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f004 fd58 	bl	80064de <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f003 fd1a 	bl	800546c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a4a:	b590      	push	{r4, r7, lr}
 8001a4c:	b08d      	sub	sp, #52	; 0x34
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f004 fdff 	bl	8006664 <USB_GetMode>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f040 83bb 	bne.w	80021e4 <HAL_PCD_IRQHandler+0x79a>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f004 fd63 	bl	800653e <USB_ReadInterrupts>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 83b1 	beq.w	80021e2 <HAL_PCD_IRQHandler+0x798>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f004 fd5a 	bl	800653e <USB_ReadInterrupts>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d107      	bne.n	8001aa4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	695a      	ldr	r2, [r3, #20]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f002 0202 	and.w	r2, r2, #2
 8001aa2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f004 fd48 	bl	800653e <USB_ReadInterrupts>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ab4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001ab8:	d17b      	bne.n	8001bb2 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f004 fd4e 	bl	8006564 <USB_ReadDevAllOutEpInterrupt>
 8001ac8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001aca:	e06f      	b.n	8001bac <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d064      	beq.n	8001ba0 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f004 fd73 	bl	80065cc <USB_ReadDevOutEPInterrupt>
 8001ae6:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00c      	beq.n	8001b0c <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	015a      	lsls	r2, r3, #5
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	4413      	add	r3, r2
 8001afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001afe:	461a      	mov	r2, r3
 8001b00:	2301      	movs	r3, #1
 8001b02:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 fe22 	bl	8002750 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00c      	beq.n	8001b30 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 ff21 	bl	8002960 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	015a      	lsls	r2, r3, #5
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	4413      	add	r3, r2
 8001b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	2308      	movs	r3, #8
 8001b2e:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d008      	beq.n	8001b4c <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	015a      	lsls	r2, r3, #5
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	4413      	add	r3, r2
 8001b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b46:	461a      	mov	r2, r3
 8001b48:	2310      	movs	r3, #16
 8001b4a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	f003 0320 	and.w	r3, r3, #32
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d015      	beq.n	8001b82 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d108      	bne.n	8001b70 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b68:	461a      	mov	r2, r3
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	f004 fdbe 	bl	80066ec <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	015a      	lsls	r2, r3, #5
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	4413      	add	r3, r2
 8001b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	2320      	movs	r3, #32
 8001b80:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d009      	beq.n	8001ba0 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	015a      	lsls	r2, r3, #5
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	4413      	add	r3, r2
 8001b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b9e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba8:	085b      	lsrs	r3, r3, #1
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d18c      	bne.n	8001acc <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f004 fcc1 	bl	800653e <USB_ReadInterrupts>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001bc6:	f040 80c4 	bne.w	8001d52 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f004 fce2 	bl	8006598 <USB_ReadDevAllInEpInterrupt>
 8001bd4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001bda:	e0b6      	b.n	8001d4a <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 80ab 	beq.w	8001d3e <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f004 fd08 	bl	8006608 <USB_ReadDevInEPInterrupt>
 8001bf8:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d05b      	beq.n	8001cbc <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69f9      	ldr	r1, [r7, #28]
 8001c20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001c24:	4013      	ands	r3, r2
 8001c26:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	015a      	lsls	r2, r3, #5
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	4413      	add	r3, r2
 8001c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c34:	461a      	mov	r2, r3
 8001c36:	2301      	movs	r3, #1
 8001c38:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d11b      	bne.n	8001c7a <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c46:	4613      	mov	r3, r2
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	1a9b      	subs	r3, r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	440b      	add	r3, r1
 8001c50:	3348      	adds	r3, #72	; 0x48
 8001c52:	6819      	ldr	r1, [r3, #0]
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c58:	4613      	mov	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	1a9b      	subs	r3, r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4403      	add	r3, r0
 8001c62:	3344      	adds	r3, #68	; 0x44
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4419      	add	r1, r3
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	1a9b      	subs	r3, r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4403      	add	r3, r0
 8001c76:	3348      	adds	r3, #72	; 0x48
 8001c78:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	4619      	mov	r1, r3
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f007 f8a4 	bl	8008dce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d116      	bne.n	8001cbc <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d113      	bne.n	8001cbc <HAL_PCD_IRQHandler+0x272>
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c98:	4613      	mov	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	1a9b      	subs	r3, r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	3350      	adds	r3, #80	; 0x50
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d108      	bne.n	8001cbc <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6818      	ldr	r0, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	f004 fd18 	bl	80066ec <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d008      	beq.n	8001cd8 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	015a      	lsls	r2, r3, #5
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	2308      	movs	r3, #8
 8001cd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d008      	beq.n	8001cf4 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	015a      	lsls	r2, r3, #5
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2310      	movs	r3, #16
 8001cf2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d008      	beq.n	8001d10 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	015a      	lsls	r2, r3, #5
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	4413      	add	r3, r2
 8001d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	2340      	movs	r3, #64	; 0x40
 8001d0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d008      	beq.n	8001d2c <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	015a      	lsls	r2, r3, #5
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	4413      	add	r3, r2
 8001d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d26:	461a      	mov	r2, r3
 8001d28:	2302      	movs	r3, #2
 8001d2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001d36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 fc7c 	bl	8002636 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	3301      	adds	r3, #1
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d46:	085b      	lsrs	r3, r3, #1
 8001d48:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f47f af45 	bne.w	8001bdc <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f004 fbf1 	bl	800653e <USB_ReadInterrupts>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001d62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d66:	d122      	bne.n	8001dae <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	69fa      	ldr	r2, [r7, #28]
 8001d72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d76:	f023 0301 	bic.w	r3, r3, #1
 8001d7a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d108      	bne.n	8001d98 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001d8e:	2100      	movs	r1, #0
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f007 fa57 	bl	8009244 <HAL_PCDEx_LPM_Callback>
 8001d96:	e002      	b.n	8001d9e <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f007 f885 	bl	8008ea8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001dac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f004 fbc3 	bl	800653e <USB_ReadInterrupts>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dc2:	d112      	bne.n	8001dea <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d102      	bne.n	8001dda <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f007 f841 	bl	8008e5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695a      	ldr	r2, [r3, #20]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001de8:	615a      	str	r2, [r3, #20]
    }
    #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f004 fba5 	bl	800653e <USB_ReadInterrupts>
 8001df4:	4603      	mov	r3, r0
 8001df6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001dfe:	d121      	bne.n	8001e44 <HAL_PCD_IRQHandler+0x3fa>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695a      	ldr	r2, [r3, #20]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001e0e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d111      	bne.n	8001e3e <HAL_PCD_IRQHandler+0x3f4>
      {
        hpcd->LPM_State = LPM_L1;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e28:	089b      	lsrs	r3, r3, #2
 8001e2a:	f003 020f 	and.w	r2, r3, #15
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001e34:	2101      	movs	r1, #1
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f007 fa04 	bl	8009244 <HAL_PCDEx_LPM_Callback>
 8001e3c:	e002      	b.n	8001e44 <HAL_PCD_IRQHandler+0x3fa>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f007 f80c 	bl	8008e5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f004 fb78 	bl	800653e <USB_ReadInterrupts>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e58:	f040 80a7 	bne.w	8001faa <HAL_PCD_IRQHandler+0x560>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	69fa      	ldr	r2, [r7, #28]
 8001e66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e6a:	f023 0301 	bic.w	r3, r3, #1
 8001e6e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2110      	movs	r1, #16
 8001e76:	4618      	mov	r0, r3
 8001e78:	f003 fcb0 	bl	80057dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e80:	e036      	b.n	8001ef0 <HAL_PCD_IRQHandler+0x4a6>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e84:	015a      	lsls	r2, r3, #5
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	4413      	add	r3, r2
 8001e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e8e:	461a      	mov	r2, r3
 8001e90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e94:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e98:	015a      	lsls	r2, r3, #5
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ea6:	0151      	lsls	r1, r2, #5
 8001ea8:	69fa      	ldr	r2, [r7, #28]
 8001eaa:	440a      	add	r2, r1
 8001eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001eb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001eb4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ec8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eda:	0151      	lsls	r1, r2, #5
 8001edc:	69fa      	ldr	r2, [r7, #28]
 8001ede:	440a      	add	r2, r1
 8001ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ee4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ee8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eec:	3301      	adds	r3, #1
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d3c3      	bcc.n	8001e82 <HAL_PCD_IRQHandler+0x438>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	69fa      	ldr	r2, [r7, #28]
 8001f04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f08:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001f0c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d016      	beq.n	8001f44 <HAL_PCD_IRQHandler+0x4fa>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f26:	f043 030b 	orr.w	r3, r3, #11
 8001f2a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	69fa      	ldr	r2, [r7, #28]
 8001f38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f3c:	f043 030b 	orr.w	r3, r3, #11
 8001f40:	6453      	str	r3, [r2, #68]	; 0x44
 8001f42:	e015      	b.n	8001f70 <HAL_PCD_IRQHandler+0x526>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	69fa      	ldr	r2, [r7, #28]
 8001f4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f56:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001f5a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	69fa      	ldr	r2, [r7, #28]
 8001f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f6a:	f043 030b 	orr.w	r3, r3, #11
 8001f6e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f7e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001f82:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f94:	461a      	mov	r2, r3
 8001f96:	f004 fba9 	bl	80066ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695a      	ldr	r2, [r3, #20]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001fa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f004 fac5 	bl	800653e <USB_ReadInterrupts>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fbe:	d124      	bne.n	800200a <HAL_PCD_IRQHandler+0x5c0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f004 fb5b 	bl	8006680 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f003 fc65 	bl	800589e <USB_GetDevSpeed>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681c      	ldr	r4, [r3, #0]
 8001fe0:	f001 f884 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 8001fe4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f003 f99a 	bl	8005328 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f006 ff12 	bl	8008e1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002008:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f004 fa95 	bl	800653e <USB_ReadInterrupts>
 8002014:	4603      	mov	r3, r0
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	2b10      	cmp	r3, #16
 800201c:	d161      	bne.n	80020e2 <HAL_PCD_IRQHandler+0x698>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	699a      	ldr	r2, [r3, #24]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0210 	bic.w	r2, r2, #16
 800202c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800202e:	6a3b      	ldr	r3, [r7, #32]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	f003 020f 	and.w	r2, r3, #15
 800203a:	4613      	mov	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	1a9b      	subs	r3, r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	3304      	adds	r3, #4
 800204c:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	0c5b      	lsrs	r3, r3, #17
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	2b02      	cmp	r3, #2
 8002058:	d124      	bne.n	80020a4 <HAL_PCD_IRQHandler+0x65a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002060:	4013      	ands	r3, r2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d035      	beq.n	80020d2 <HAL_PCD_IRQHandler+0x688>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	091b      	lsrs	r3, r3, #4
 800206e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002070:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002074:	b29b      	uxth	r3, r3
 8002076:	461a      	mov	r2, r3
 8002078:	6a38      	ldr	r0, [r7, #32]
 800207a:	f004 f90d 	bl	8006298 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800208a:	441a      	add	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	699a      	ldr	r2, [r3, #24]
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	091b      	lsrs	r3, r3, #4
 8002098:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800209c:	441a      	add	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	619a      	str	r2, [r3, #24]
 80020a2:	e016      	b.n	80020d2 <HAL_PCD_IRQHandler+0x688>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	0c5b      	lsrs	r3, r3, #17
 80020a8:	f003 030f 	and.w	r3, r3, #15
 80020ac:	2b06      	cmp	r3, #6
 80020ae:	d110      	bne.n	80020d2 <HAL_PCD_IRQHandler+0x688>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020b6:	2208      	movs	r2, #8
 80020b8:	4619      	mov	r1, r3
 80020ba:	6a38      	ldr	r0, [r7, #32]
 80020bc:	f004 f8ec 	bl	8006298 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	699a      	ldr	r2, [r3, #24]
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	091b      	lsrs	r3, r3, #4
 80020c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020cc:	441a      	add	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	699a      	ldr	r2, [r3, #24]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0210 	orr.w	r2, r2, #16
 80020e0:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f004 fa29 	bl	800653e <USB_ReadInterrupts>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d10a      	bne.n	800210c <HAL_PCD_IRQHandler+0x6c2>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f006 fe83 	bl	8008e02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695a      	ldr	r2, [r3, #20]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f002 0208 	and.w	r2, r2, #8
 800210a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f004 fa14 	bl	800653e <USB_ReadInterrupts>
 8002116:	4603      	mov	r3, r0
 8002118:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002120:	d10f      	bne.n	8002142 <HAL_PCD_IRQHandler+0x6f8>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002122:	2300      	movs	r3, #0
 8002124:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	b2db      	uxtb	r3, r3
 800212a:	4619      	mov	r1, r3
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f006 fedb 	bl	8008ee8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	695a      	ldr	r2, [r3, #20]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002140:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f004 f9f9 	bl	800653e <USB_ReadInterrupts>
 800214c:	4603      	mov	r3, r0
 800214e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002152:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002156:	d10f      	bne.n	8002178 <HAL_PCD_IRQHandler+0x72e>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	b2db      	uxtb	r3, r3
 8002160:	4619      	mov	r1, r3
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f006 feae 	bl	8008ec4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695a      	ldr	r2, [r3, #20]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002176:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f004 f9de 	bl	800653e <USB_ReadInterrupts>
 8002182:	4603      	mov	r3, r0
 8002184:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800218c:	d10a      	bne.n	80021a4 <HAL_PCD_IRQHandler+0x75a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f006 febc 	bl	8008f0c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	695a      	ldr	r2, [r3, #20]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80021a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f004 f9c8 	bl	800653e <USB_ReadInterrupts>
 80021ae:	4603      	mov	r3, r0
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d115      	bne.n	80021e4 <HAL_PCD_IRQHandler+0x79a>
    {
      temp = hpcd->Instance->GOTGINT;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <HAL_PCD_IRQHandler+0x786>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f006 feac 	bl	8008f28 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6859      	ldr	r1, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	430a      	orrs	r2, r1
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	e000      	b.n	80021e4 <HAL_PCD_IRQHandler+0x79a>
      return;
 80021e2:	bf00      	nop
    }
  }
}
 80021e4:	3734      	adds	r7, #52	; 0x34
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd90      	pop	{r4, r7, pc}

080021ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_PCD_SetAddress+0x1a>
 8002200:	2302      	movs	r3, #2
 8002202:	e013      	b.n	800222c <HAL_PCD_SetAddress+0x42>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	78fa      	ldrb	r2, [r7, #3]
 8002210:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	78fa      	ldrb	r2, [r7, #3]
 800221a:	4611      	mov	r1, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f004 f938 	bl	8006492 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	4608      	mov	r0, r1
 800223e:	4611      	mov	r1, r2
 8002240:	461a      	mov	r2, r3
 8002242:	4603      	mov	r3, r0
 8002244:	70fb      	strb	r3, [r7, #3]
 8002246:	460b      	mov	r3, r1
 8002248:	803b      	strh	r3, [r7, #0]
 800224a:	4613      	mov	r3, r2
 800224c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002252:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002256:	2b00      	cmp	r3, #0
 8002258:	da0f      	bge.n	800227a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	f003 020f 	and.w	r2, r3, #15
 8002260:	4613      	mov	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	1a9b      	subs	r3, r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	3338      	adds	r3, #56	; 0x38
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	3304      	adds	r3, #4
 8002270:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2201      	movs	r2, #1
 8002276:	705a      	strb	r2, [r3, #1]
 8002278:	e00f      	b.n	800229a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	f003 020f 	and.w	r2, r3, #15
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	4413      	add	r3, r2
 8002290:	3304      	adds	r3, #4
 8002292:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	f003 030f 	and.w	r3, r3, #15
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80022a6:	883a      	ldrh	r2, [r7, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	78ba      	ldrb	r2, [r7, #2]
 80022b0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	785b      	ldrb	r3, [r3, #1]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d004      	beq.n	80022c4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022c4:	78bb      	ldrb	r3, [r7, #2]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d102      	bne.n	80022d0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_PCD_EP_Open+0xaa>
 80022da:	2302      	movs	r3, #2
 80022dc:	e00e      	b.n	80022fc <HAL_PCD_EP_Open+0xc8>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68f9      	ldr	r1, [r7, #12]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f003 fafb 	bl	80058e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80022fa:	7afb      	ldrb	r3, [r7, #11]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002310:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002314:	2b00      	cmp	r3, #0
 8002316:	da0f      	bge.n	8002338 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	f003 020f 	and.w	r2, r3, #15
 800231e:	4613      	mov	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	1a9b      	subs	r3, r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	3338      	adds	r3, #56	; 0x38
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	4413      	add	r3, r2
 800232c:	3304      	adds	r3, #4
 800232e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2201      	movs	r2, #1
 8002334:	705a      	strb	r2, [r3, #1]
 8002336:	e00f      	b.n	8002358 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	f003 020f 	and.w	r2, r3, #15
 800233e:	4613      	mov	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	1a9b      	subs	r3, r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	3304      	adds	r3, #4
 8002350:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002358:	78fb      	ldrb	r3, [r7, #3]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	b2da      	uxtb	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_PCD_EP_Close+0x6e>
 800236e:	2302      	movs	r3, #2
 8002370:	e00e      	b.n	8002390 <HAL_PCD_EP_Close+0x8c>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68f9      	ldr	r1, [r7, #12]
 8002380:	4618      	mov	r0, r3
 8002382:	f003 fb39 	bl	80059f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	460b      	mov	r3, r1
 80023a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023a8:	7afb      	ldrb	r3, [r7, #11]
 80023aa:	f003 020f 	and.w	r2, r3, #15
 80023ae:	4613      	mov	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	1a9b      	subs	r3, r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4413      	add	r3, r2
 80023be:	3304      	adds	r3, #4
 80023c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	2200      	movs	r2, #0
 80023d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023da:	7afb      	ldrb	r3, [r7, #11]
 80023dc:	f003 030f 	and.w	r3, r3, #15
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d102      	bne.n	80023f4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023f4:	7afb      	ldrb	r3, [r7, #11]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	6979      	ldr	r1, [r7, #20]
 800240c:	f003 fdbc 	bl	8005f88 <USB_EP0StartXfer>
 8002410:	e008      	b.n	8002424 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	b2db      	uxtb	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	6979      	ldr	r1, [r7, #20]
 8002420:	f003 fb6e 	bl	8005b00 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	607a      	str	r2, [r7, #4]
 8002438:	603b      	str	r3, [r7, #0]
 800243a:	460b      	mov	r3, r1
 800243c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800243e:	7afb      	ldrb	r3, [r7, #11]
 8002440:	f003 020f 	and.w	r2, r3, #15
 8002444:	4613      	mov	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	3338      	adds	r3, #56	; 0x38
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	4413      	add	r3, r2
 8002452:	3304      	adds	r3, #4
 8002454:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2200      	movs	r2, #0
 8002466:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2201      	movs	r2, #1
 800246c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800246e:	7afb      	ldrb	r3, [r7, #11]
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	b2da      	uxtb	r2, r3
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d102      	bne.n	8002488 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002488:	7afb      	ldrb	r3, [r7, #11]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	2b00      	cmp	r3, #0
 8002490:	d109      	bne.n	80024a6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	461a      	mov	r2, r3
 800249e:	6979      	ldr	r1, [r7, #20]
 80024a0:	f003 fd72 	bl	8005f88 <USB_EP0StartXfer>
 80024a4:	e008      	b.n	80024b8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	6979      	ldr	r1, [r7, #20]
 80024b4:	f003 fb24 	bl	8005b00 <USB_EPStartXfer>
  }

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b084      	sub	sp, #16
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	460b      	mov	r3, r1
 80024cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024ce:	78fb      	ldrb	r3, [r7, #3]
 80024d0:	f003 020f 	and.w	r2, r3, #15
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d901      	bls.n	80024e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e050      	b.n	8002582 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	da0f      	bge.n	8002508 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	f003 020f 	and.w	r2, r3, #15
 80024ee:	4613      	mov	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	1a9b      	subs	r3, r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	3338      	adds	r3, #56	; 0x38
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	4413      	add	r3, r2
 80024fc:	3304      	adds	r3, #4
 80024fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2201      	movs	r2, #1
 8002504:	705a      	strb	r2, [r3, #1]
 8002506:	e00d      	b.n	8002524 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	4613      	mov	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	1a9b      	subs	r3, r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	3304      	adds	r3, #4
 800251c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2201      	movs	r2, #1
 8002528:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800252a:	78fb      	ldrb	r3, [r7, #3]
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	b2da      	uxtb	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_PCD_EP_SetStall+0x82>
 8002540:	2302      	movs	r3, #2
 8002542:	e01e      	b.n	8002582 <HAL_PCD_EP_SetStall+0xc0>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68f9      	ldr	r1, [r7, #12]
 8002552:	4618      	mov	r0, r3
 8002554:	f003 fec9 	bl	80062ea <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10a      	bne.n	8002578 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	b2d9      	uxtb	r1, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002572:	461a      	mov	r2, r3
 8002574:	f004 f8ba 	bl	80066ec <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	460b      	mov	r3, r1
 8002594:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002596:	78fb      	ldrb	r3, [r7, #3]
 8002598:	f003 020f 	and.w	r2, r3, #15
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d901      	bls.n	80025a8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e042      	b.n	800262e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	da0f      	bge.n	80025d0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025b0:	78fb      	ldrb	r3, [r7, #3]
 80025b2:	f003 020f 	and.w	r2, r3, #15
 80025b6:	4613      	mov	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	3338      	adds	r3, #56	; 0x38
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	4413      	add	r3, r2
 80025c4:	3304      	adds	r3, #4
 80025c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2201      	movs	r2, #1
 80025cc:	705a      	strb	r2, [r3, #1]
 80025ce:	e00f      	b.n	80025f0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	f003 020f 	and.w	r2, r3, #15
 80025d6:	4613      	mov	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	4413      	add	r3, r2
 80025e6:	3304      	adds	r3, #4
 80025e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025f6:	78fb      	ldrb	r3, [r7, #3]
 80025f8:	f003 030f 	and.w	r3, r3, #15
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002608:	2b01      	cmp	r3, #1
 800260a:	d101      	bne.n	8002610 <HAL_PCD_EP_ClrStall+0x86>
 800260c:	2302      	movs	r3, #2
 800260e:	e00e      	b.n	800262e <HAL_PCD_EP_ClrStall+0xa4>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68f9      	ldr	r1, [r7, #12]
 800261e:	4618      	mov	r0, r3
 8002620:	f003 fed1 	bl	80063c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b08a      	sub	sp, #40	; 0x28
 800263a:	af02      	add	r7, sp, #8
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	4613      	mov	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	1a9b      	subs	r3, r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	3338      	adds	r3, #56	; 0x38
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	3304      	adds	r3, #4
 800265c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	699a      	ldr	r2, [r3, #24]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	429a      	cmp	r2, r3
 8002668:	d901      	bls.n	800266e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e06c      	b.n	8002748 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	69fa      	ldr	r2, [r7, #28]
 8002680:	429a      	cmp	r2, r3
 8002682:	d902      	bls.n	800268a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3303      	adds	r3, #3
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002692:	e02b      	b.n	80026ec <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	695a      	ldr	r2, [r3, #20]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	69fa      	ldr	r2, [r7, #28]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d902      	bls.n	80026b0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	3303      	adds	r3, #3
 80026b4:	089b      	lsrs	r3, r3, #2
 80026b6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	68d9      	ldr	r1, [r3, #12]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	4603      	mov	r3, r0
 80026ce:	6978      	ldr	r0, [r7, #20]
 80026d0:	f003 fdad 	bl	800622e <USB_WritePacket>

    ep->xfer_buff  += len;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	441a      	add	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	699a      	ldr	r2, [r3, #24]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	441a      	add	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d809      	bhi.n	8002716 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800270a:	429a      	cmp	r2, r3
 800270c:	d203      	bcs.n	8002716 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1be      	bne.n	8002694 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	429a      	cmp	r2, r3
 8002720:	d811      	bhi.n	8002746 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	f003 030f 	and.w	r3, r3, #15
 8002728:	2201      	movs	r2, #1
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	43db      	mvns	r3, r3
 800273c:	6939      	ldr	r1, [r7, #16]
 800273e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002742:	4013      	ands	r3, r2
 8002744:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3720      	adds	r7, #32
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	333c      	adds	r3, #60	; 0x3c
 8002768:	3304      	adds	r3, #4
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	015a      	lsls	r2, r3, #5
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4413      	add	r3, r2
 8002776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b01      	cmp	r3, #1
 8002784:	f040 80b3 	bne.w	80028ee <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d028      	beq.n	80027e4 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4a70      	ldr	r2, [pc, #448]	; (8002958 <PCD_EP_OutXfrComplete_int+0x208>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d90e      	bls.n	80027b8 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d009      	beq.n	80027b8 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	015a      	lsls	r2, r3, #5
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b0:	461a      	mov	r2, r3
 80027b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027b6:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f006 fadb 	bl	8008d74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80027c8:	461a      	mov	r2, r3
 80027ca:	2101      	movs	r1, #1
 80027cc:	f003 ff8e 	bl	80066ec <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027dc:	461a      	mov	r2, r3
 80027de:	2308      	movs	r3, #8
 80027e0:	6093      	str	r3, [r2, #8]
 80027e2:	e0b3      	b.n	800294c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f003 0320 	and.w	r3, r3, #32
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d009      	beq.n	8002802 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027fa:	461a      	mov	r2, r3
 80027fc:	2320      	movs	r3, #32
 80027fe:	6093      	str	r3, [r2, #8]
 8002800:	e0a4      	b.n	800294c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002808:	2b00      	cmp	r3, #0
 800280a:	f040 809f 	bne.w	800294c <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4a51      	ldr	r2, [pc, #324]	; (8002958 <PCD_EP_OutXfrComplete_int+0x208>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d90f      	bls.n	8002836 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00a      	beq.n	8002836 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4413      	add	r3, r2
 8002828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800282c:	461a      	mov	r2, r3
 800282e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002832:	6093      	str	r3, [r2, #8]
 8002834:	e08a      	b.n	800294c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	4613      	mov	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	1a9b      	subs	r3, r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002848:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	0159      	lsls	r1, r3, #5
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	440b      	add	r3, r1
 8002852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800285c:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	4613      	mov	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	1a9b      	subs	r3, r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4403      	add	r3, r0
 800286c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002870:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	4613      	mov	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002884:	6819      	ldr	r1, [r3, #0]
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	4613      	mov	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	1a9b      	subs	r3, r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4403      	add	r3, r0
 8002894:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4419      	add	r1, r3
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4403      	add	r3, r0
 80028aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028ae:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	4619      	mov	r1, r3
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f006 fa6e 	bl	8008d98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d144      	bne.n	800294c <PCD_EP_OutXfrComplete_int+0x1fc>
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	4613      	mov	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	1a9b      	subs	r3, r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	440b      	add	r3, r1
 80028d0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d138      	bne.n	800294c <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6818      	ldr	r0, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028e4:	461a      	mov	r2, r3
 80028e6:	2101      	movs	r1, #1
 80028e8:	f003 ff00 	bl	80066ec <USB_EP0_OutStart>
 80028ec:	e02e      	b.n	800294c <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4a1a      	ldr	r2, [pc, #104]	; (800295c <PCD_EP_OutXfrComplete_int+0x20c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d124      	bne.n	8002940 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4413      	add	r3, r2
 8002908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800290c:	461a      	mov	r2, r3
 800290e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002912:	6093      	str	r3, [r2, #8]
 8002914:	e01a      	b.n	800294c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4413      	add	r3, r2
 8002928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800292c:	461a      	mov	r2, r3
 800292e:	2320      	movs	r3, #32
 8002930:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	4619      	mov	r1, r3
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f006 fa2d 	bl	8008d98 <HAL_PCD_DataOutStageCallback>
 800293e:	e005      	b.n	800294c <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	4619      	mov	r1, r3
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f006 fa26 	bl	8008d98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	4f54300a 	.word	0x4f54300a
 800295c:	4f54310a 	.word	0x4f54310a

08002960 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	333c      	adds	r3, #60	; 0x3c
 8002978:	3304      	adds	r3, #4
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4413      	add	r3, r2
 8002986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d113      	bne.n	80029be <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4a1f      	ldr	r2, [pc, #124]	; (8002a18 <PCD_EP_OutSetupPacket_int+0xb8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d922      	bls.n	80029e4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01d      	beq.n	80029e4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029b4:	461a      	mov	r2, r3
 80029b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ba:	6093      	str	r3, [r2, #8]
 80029bc:	e012      	b.n	80029e4 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4a16      	ldr	r2, [pc, #88]	; (8002a1c <PCD_EP_OutSetupPacket_int+0xbc>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d10e      	bne.n	80029e4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d009      	beq.n	80029e4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029dc:	461a      	mov	r2, r3
 80029de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f006 f9c5 	bl	8008d74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <PCD_EP_OutSetupPacket_int+0xb8>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d90c      	bls.n	8002a0c <PCD_EP_OutSetupPacket_int+0xac>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d108      	bne.n	8002a0c <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6818      	ldr	r0, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a04:	461a      	mov	r2, r3
 8002a06:	2101      	movs	r1, #1
 8002a08:	f003 fe70 	bl	80066ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	4f54300a 	.word	0x4f54300a
 8002a1c:	4f54310a 	.word	0x4f54310a

08002a20 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	70fb      	strb	r3, [r7, #3]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d107      	bne.n	8002a4e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002a3e:	883b      	ldrh	r3, [r7, #0]
 8002a40:	0419      	lsls	r1, r3, #16
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28
 8002a4c:	e028      	b.n	8002aa0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	0c1b      	lsrs	r3, r3, #16
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	4413      	add	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	73fb      	strb	r3, [r7, #15]
 8002a60:	e00d      	b.n	8002a7e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	3340      	adds	r3, #64	; 0x40
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	0c1b      	lsrs	r3, r3, #16
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	4413      	add	r3, r2
 8002a76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	73fb      	strb	r3, [r7, #15]
 8002a7e:	7bfa      	ldrb	r2, [r7, #15]
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d3ec      	bcc.n	8002a62 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002a88:	883b      	ldrh	r3, [r7, #0]
 8002a8a:	0418      	lsls	r0, r3, #16
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6819      	ldr	r1, [r3, #0]
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	4302      	orrs	r2, r0
 8002a98:	3340      	adds	r3, #64	; 0x40
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	887a      	ldrh	r2, [r7, #2]
 8002ac0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b02:	f043 0303 	orr.w	r3, r3, #3
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af02      	add	r7, sp, #8
 8002b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002b24:	f7fd fd54 	bl	80005d0 <HAL_GetTick>
 8002b28:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e069      	b.n	8002c08 <HAL_QSPI_Init+0xf0>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10b      	bne.n	8002b58 <HAL_QSPI_Init+0x40>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f005 fe47 	bl	80087dc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8002b4e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f85e 	bl	8002c14 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1U) << 8U));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	021a      	lsls	r2, r3, #8
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2120      	movs	r1, #32
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f856 	bl	8002c30 <QSPI_WaitFlagStateUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d137      	bne.n	8002bfe <HAL_QSPI_Init+0xe6>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24U)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b98:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6852      	ldr	r2, [r2, #4]
 8002ba0:	0611      	lsls	r1, r2, #24
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68d2      	ldr	r2, [r2, #12]
 8002ba6:	4311      	orrs	r1, r2
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	69d2      	ldr	r2, [r2, #28]
 8002bac:	4311      	orrs	r1, r2
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6a12      	ldr	r2, [r2, #32]
 8002bb2:	4311      	orrs	r1, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	430b      	orrs	r3, r1
 8002bba:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <HAL_QSPI_Init+0xf8>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6912      	ldr	r2, [r2, #16]
 8002bca:	0411      	lsls	r1, r2, #16
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6952      	ldr	r2, [r2, #20]
 8002bd0:	4311      	orrs	r1, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6992      	ldr	r2, [r2, #24]
 8002bd6:	4311      	orrs	r1, r2
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	430b      	orrs	r3, r1
 8002bde:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16U) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0201 	orr.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	ffe0f8fe 	.word	0xffe0f8fe

08002c14 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002c40:	e01a      	b.n	8002c78 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c48:	d016      	beq.n	8002c78 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d007      	beq.n	8002c60 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002c50:	f7fd fcbe 	bl	80005d0 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d20b      	bcs.n	8002c78 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2204      	movs	r2, #4
 8002c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6c:	f043 0201 	orr.w	r2, r3, #1
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e00e      	b.n	8002c96 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	bf14      	ite	ne
 8002c86:	2301      	movne	r3, #1
 8002c88:	2300      	moveq	r3, #0
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d1d6      	bne.n	8002c42 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0cc      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb4:	4b68      	ldr	r3, [pc, #416]	; (8002e58 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d90c      	bls.n	8002cdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc2:	4b65      	ldr	r3, [pc, #404]	; (8002e58 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cca:	4b63      	ldr	r3, [pc, #396]	; (8002e58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e0b8      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d020      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cf4:	4b59      	ldr	r3, [pc, #356]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	4a58      	ldr	r2, [pc, #352]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d0c:	4b53      	ldr	r3, [pc, #332]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	4a52      	ldr	r2, [pc, #328]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d18:	4b50      	ldr	r3, [pc, #320]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	494d      	ldr	r1, [pc, #308]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d044      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d107      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3e:	4b47      	ldr	r3, [pc, #284]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d119      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e07f      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d003      	beq.n	8002d5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d5a:	2b03      	cmp	r3, #3
 8002d5c:	d107      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5e:	4b3f      	ldr	r3, [pc, #252]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d109      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e06f      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6e:	4b3b      	ldr	r3, [pc, #236]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e067      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d7e:	4b37      	ldr	r3, [pc, #220]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f023 0203 	bic.w	r2, r3, #3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	4934      	ldr	r1, [pc, #208]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d90:	f7fd fc1e 	bl	80005d0 <HAL_GetTick>
 8002d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d96:	e00a      	b.n	8002dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d98:	f7fd fc1a 	bl	80005d0 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e04f      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dae:	4b2b      	ldr	r3, [pc, #172]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 020c 	and.w	r2, r3, #12
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d1eb      	bne.n	8002d98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc0:	4b25      	ldr	r3, [pc, #148]	; (8002e58 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d20c      	bcs.n	8002de8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dce:	4b22      	ldr	r3, [pc, #136]	; (8002e58 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd6:	4b20      	ldr	r3, [pc, #128]	; (8002e58 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e032      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d008      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002df4:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	4916      	ldr	r1, [pc, #88]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d009      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e12:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	490e      	ldr	r1, [pc, #56]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e26:	f000 f889 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 8002e2a:	4601      	mov	r1, r0
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <HAL_RCC_ClockConfig+0x1c0>)
 8002e38:	5cd3      	ldrb	r3, [r2, r3]
 8002e3a:	fa21 f303 	lsr.w	r3, r1, r3
 8002e3e:	4a09      	ldr	r2, [pc, #36]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e42:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fd fb7e 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40023c00 	.word	0x40023c00
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	08009824 	.word	0x08009824
 8002e64:	200000bc 	.word	0x200000bc
 8002e68:	20000000 	.word	0x20000000

08002e6c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08c      	sub	sp, #48	; 0x30
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d129      	bne.n	8002ed2 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	4b2b      	ldr	r3, [pc, #172]	; (8002f30 <HAL_RCC_MCOConfig+0xc4>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4a2a      	ldr	r2, [pc, #168]	; (8002f30 <HAL_RCC_MCOConfig+0xc4>)
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8e:	4b28      	ldr	r3, [pc, #160]	; (8002f30 <HAL_RCC_MCOConfig+0xc4>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	61bb      	str	r3, [r7, #24]
 8002e98:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002e9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002eac:	2300      	movs	r3, #0
 8002eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002eb0:	f107 031c 	add.w	r3, r7, #28
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	481f      	ldr	r0, [pc, #124]	; (8002f34 <HAL_RCC_MCOConfig+0xc8>)
 8002eb8:	f7fd fcca 	bl	8000850 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002ebc:	4b1c      	ldr	r3, [pc, #112]	; (8002f30 <HAL_RCC_MCOConfig+0xc4>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	4919      	ldr	r1, [pc, #100]	; (8002f30 <HAL_RCC_MCOConfig+0xc4>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8002ed0:	e029      	b.n	8002f26 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	4b16      	ldr	r3, [pc, #88]	; (8002f30 <HAL_RCC_MCOConfig+0xc4>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	4a15      	ldr	r2, [pc, #84]	; (8002f30 <HAL_RCC_MCOConfig+0xc4>)
 8002edc:	f043 0304 	orr.w	r3, r3, #4
 8002ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee2:	4b13      	ldr	r3, [pc, #76]	; (8002f30 <HAL_RCC_MCOConfig+0xc4>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002eee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002f00:	2300      	movs	r3, #0
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002f04:	f107 031c 	add.w	r3, r7, #28
 8002f08:	4619      	mov	r1, r3
 8002f0a:	480b      	ldr	r0, [pc, #44]	; (8002f38 <HAL_RCC_MCOConfig+0xcc>)
 8002f0c:	f7fd fca0 	bl	8000850 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8002f10:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <HAL_RCC_MCOConfig+0xc4>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	00d9      	lsls	r1, r3, #3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	430b      	orrs	r3, r1
 8002f20:	4903      	ldr	r1, [pc, #12]	; (8002f30 <HAL_RCC_MCOConfig+0xc4>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	608b      	str	r3, [r1, #8]
}
 8002f26:	bf00      	nop
 8002f28:	3730      	adds	r7, #48	; 0x30
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40020000 	.word	0x40020000
 8002f38:	40020800 	.word	0x40020800

08002f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	607b      	str	r3, [r7, #4]
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f52:	4b63      	ldr	r3, [pc, #396]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d007      	beq.n	8002f6e <HAL_RCC_GetSysClockFreq+0x32>
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d008      	beq.n	8002f74 <HAL_RCC_GetSysClockFreq+0x38>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f040 80b4 	bne.w	80030d0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f68:	4b5e      	ldr	r3, [pc, #376]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002f6a:	60bb      	str	r3, [r7, #8]
       break;
 8002f6c:	e0b3      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f6e:	4b5e      	ldr	r3, [pc, #376]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002f70:	60bb      	str	r3, [r7, #8]
      break;
 8002f72:	e0b0      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f74:	4b5a      	ldr	r3, [pc, #360]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f7c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f7e:	4b58      	ldr	r3, [pc, #352]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d04a      	beq.n	8003020 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f8a:	4b55      	ldr	r3, [pc, #340]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	099b      	lsrs	r3, r3, #6
 8002f90:	f04f 0400 	mov.w	r4, #0
 8002f94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	ea03 0501 	and.w	r5, r3, r1
 8002fa0:	ea04 0602 	and.w	r6, r4, r2
 8002fa4:	4629      	mov	r1, r5
 8002fa6:	4632      	mov	r2, r6
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	f04f 0400 	mov.w	r4, #0
 8002fb0:	0154      	lsls	r4, r2, #5
 8002fb2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002fb6:	014b      	lsls	r3, r1, #5
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4622      	mov	r2, r4
 8002fbc:	1b49      	subs	r1, r1, r5
 8002fbe:	eb62 0206 	sbc.w	r2, r2, r6
 8002fc2:	f04f 0300 	mov.w	r3, #0
 8002fc6:	f04f 0400 	mov.w	r4, #0
 8002fca:	0194      	lsls	r4, r2, #6
 8002fcc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002fd0:	018b      	lsls	r3, r1, #6
 8002fd2:	1a5b      	subs	r3, r3, r1
 8002fd4:	eb64 0402 	sbc.w	r4, r4, r2
 8002fd8:	f04f 0100 	mov.w	r1, #0
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	00e2      	lsls	r2, r4, #3
 8002fe2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002fe6:	00d9      	lsls	r1, r3, #3
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4614      	mov	r4, r2
 8002fec:	195b      	adds	r3, r3, r5
 8002fee:	eb44 0406 	adc.w	r4, r4, r6
 8002ff2:	f04f 0100 	mov.w	r1, #0
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	0262      	lsls	r2, r4, #9
 8002ffc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003000:	0259      	lsls	r1, r3, #9
 8003002:	460b      	mov	r3, r1
 8003004:	4614      	mov	r4, r2
 8003006:	4618      	mov	r0, r3
 8003008:	4621      	mov	r1, r4
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f04f 0400 	mov.w	r4, #0
 8003010:	461a      	mov	r2, r3
 8003012:	4623      	mov	r3, r4
 8003014:	f7fd f8f6 	bl	8000204 <__aeabi_uldivmod>
 8003018:	4603      	mov	r3, r0
 800301a:	460c      	mov	r4, r1
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	e049      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003020:	4b2f      	ldr	r3, [pc, #188]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	099b      	lsrs	r3, r3, #6
 8003026:	f04f 0400 	mov.w	r4, #0
 800302a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	ea03 0501 	and.w	r5, r3, r1
 8003036:	ea04 0602 	and.w	r6, r4, r2
 800303a:	4629      	mov	r1, r5
 800303c:	4632      	mov	r2, r6
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	f04f 0400 	mov.w	r4, #0
 8003046:	0154      	lsls	r4, r2, #5
 8003048:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800304c:	014b      	lsls	r3, r1, #5
 800304e:	4619      	mov	r1, r3
 8003050:	4622      	mov	r2, r4
 8003052:	1b49      	subs	r1, r1, r5
 8003054:	eb62 0206 	sbc.w	r2, r2, r6
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	f04f 0400 	mov.w	r4, #0
 8003060:	0194      	lsls	r4, r2, #6
 8003062:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003066:	018b      	lsls	r3, r1, #6
 8003068:	1a5b      	subs	r3, r3, r1
 800306a:	eb64 0402 	sbc.w	r4, r4, r2
 800306e:	f04f 0100 	mov.w	r1, #0
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	00e2      	lsls	r2, r4, #3
 8003078:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800307c:	00d9      	lsls	r1, r3, #3
 800307e:	460b      	mov	r3, r1
 8003080:	4614      	mov	r4, r2
 8003082:	195b      	adds	r3, r3, r5
 8003084:	eb44 0406 	adc.w	r4, r4, r6
 8003088:	f04f 0100 	mov.w	r1, #0
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	02a2      	lsls	r2, r4, #10
 8003092:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003096:	0299      	lsls	r1, r3, #10
 8003098:	460b      	mov	r3, r1
 800309a:	4614      	mov	r4, r2
 800309c:	4618      	mov	r0, r3
 800309e:	4621      	mov	r1, r4
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f04f 0400 	mov.w	r4, #0
 80030a6:	461a      	mov	r2, r3
 80030a8:	4623      	mov	r3, r4
 80030aa:	f7fd f8ab 	bl	8000204 <__aeabi_uldivmod>
 80030ae:	4603      	mov	r3, r0
 80030b0:	460c      	mov	r4, r1
 80030b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030b4:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	0c1b      	lsrs	r3, r3, #16
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	3301      	adds	r3, #1
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030cc:	60bb      	str	r3, [r7, #8]
      break;
 80030ce:	e002      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030d0:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80030d2:	60bb      	str	r3, [r7, #8]
      break;
 80030d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030d6:	68bb      	ldr	r3, [r7, #8]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030e0:	40023800 	.word	0x40023800
 80030e4:	00f42400 	.word	0x00f42400
 80030e8:	007a1200 	.word	0x007a1200

080030ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f0:	4b03      	ldr	r3, [pc, #12]	; (8003100 <HAL_RCC_GetHCLKFreq+0x14>)
 80030f2:	681b      	ldr	r3, [r3, #0]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	200000bc 	.word	0x200000bc

08003104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003108:	f7ff fff0 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 800310c:	4601      	mov	r1, r0
 800310e:	4b05      	ldr	r3, [pc, #20]	; (8003124 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	0a9b      	lsrs	r3, r3, #10
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	4a03      	ldr	r2, [pc, #12]	; (8003128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800311a:	5cd3      	ldrb	r3, [r2, r3]
 800311c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003120:	4618      	mov	r0, r3
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40023800 	.word	0x40023800
 8003128:	08009834 	.word	0x08009834

0800312c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	d010      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800314c:	4b87      	ldr	r3, [pc, #540]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800314e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003152:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	4984      	ldr	r1, [pc, #528]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800315c:	4313      	orrs	r3, r2
 800315e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 800316a:	2301      	movs	r3, #1
 800316c:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d010      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800317a:	4b7c      	ldr	r3, [pc, #496]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800317c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003180:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	4978      	ldr	r1, [pc, #480]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8003198:	2301      	movs	r3, #1
 800319a:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0308 	and.w	r3, r3, #8
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 8083 	beq.w	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	4b6f      	ldr	r3, [pc, #444]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	4a6e      	ldr	r2, [pc, #440]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ba:	4b6c      	ldr	r3, [pc, #432]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c2:	60bb      	str	r3, [r7, #8]
 80031c4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80031c6:	4b6a      	ldr	r3, [pc, #424]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a69      	ldr	r2, [pc, #420]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80031cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031d2:	f7fd f9fd 	bl	80005d0 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80031da:	f7fd f9f9 	bl	80005d0 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e162      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80031ec:	4b60      	ldr	r3, [pc, #384]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031f8:	4b5c      	ldr	r3, [pc, #368]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003200:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d02f      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	429a      	cmp	r2, r3
 8003214:	d028      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003216:	4b55      	ldr	r3, [pc, #340]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800321e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003220:	4b54      	ldr	r3, [pc, #336]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003222:	2201      	movs	r2, #1
 8003224:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003226:	4b53      	ldr	r3, [pc, #332]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800322c:	4a4f      	ldr	r2, [pc, #316]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003232:	4b4e      	ldr	r3, [pc, #312]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b01      	cmp	r3, #1
 800323c:	d114      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800323e:	f7fd f9c7 	bl	80005d0 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003244:	e00a      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003246:	f7fd f9c3 	bl	80005d0 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	f241 3288 	movw	r2, #5000	; 0x1388
 8003254:	4293      	cmp	r3, r2
 8003256:	d901      	bls.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e12a      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325c:	4b43      	ldr	r3, [pc, #268]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0ee      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003270:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003274:	d10d      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003276:	4b3d      	ldr	r3, [pc, #244]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800328a:	4938      	ldr	r1, [pc, #224]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800328c:	4313      	orrs	r3, r2
 800328e:	608b      	str	r3, [r1, #8]
 8003290:	e005      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003292:	4b36      	ldr	r3, [pc, #216]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	4a35      	ldr	r2, [pc, #212]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003298:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800329c:	6093      	str	r3, [r2, #8]
 800329e:	4b33      	ldr	r3, [pc, #204]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032aa:	4930      	ldr	r1, [pc, #192]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d004      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80032c2:	4b2d      	ldr	r3, [pc, #180]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80032c4:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0310 	and.w	r3, r3, #16
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80032d2:	4b26      	ldr	r3, [pc, #152]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	4922      	ldr	r1, [pc, #136]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d011      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80032f4:	4b1d      	ldr	r3, [pc, #116]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032fa:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003302:	491a      	ldr	r1, [pc, #104]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003312:	d101      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8003314:	2301      	movs	r3, #1
 8003316:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003324:	4b11      	ldr	r3, [pc, #68]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800332a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	490e      	ldr	r1, [pc, #56]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d004      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b80      	cmp	r3, #128	; 0x80
 8003346:	f040 8091 	bne.w	800346c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800334a:	4b0c      	ldr	r3, [pc, #48]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003350:	f7fd f93e 	bl	80005d0 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003356:	e013      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003358:	f7fd f93a 	bl	80005d0 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d90c      	bls.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e0a3      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800336a:	bf00      	nop
 800336c:	40023800 	.word	0x40023800
 8003370:	40007000 	.word	0x40007000
 8003374:	42470e40 	.word	0x42470e40
 8003378:	424711e0 	.word	0x424711e0
 800337c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003380:	4b4e      	ldr	r3, [pc, #312]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1e5      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 800338c:	4a4c      	ldr	r2, [pc, #304]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003392:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d023      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d019      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d004      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033d0:	d00e      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d019      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d115      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033ee:	d110      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	019b      	lsls	r3, r3, #6
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	061b      	lsls	r3, r3, #24
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	071b      	lsls	r3, r3, #28
 800340a:	492c      	ldr	r1, [pc, #176]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341a:	2b00      	cmp	r3, #0
 800341c:	d010      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	019b      	lsls	r3, r3, #6
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	061b      	lsls	r3, r3, #24
 8003430:	431a      	orrs	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	071b      	lsls	r3, r3, #28
 8003438:	4920      	ldr	r1, [pc, #128]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003440:	4b20      	ldr	r3, [pc, #128]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8003442:	2201      	movs	r2, #1
 8003444:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003446:	f7fd f8c3 	bl	80005d0 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800344c:	e008      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800344e:	f7fd f8bf 	bl	80005d0 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e028      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003460:	4b16      	ldr	r3, [pc, #88]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0f0      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003478:	4b10      	ldr	r3, [pc, #64]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800347a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800347e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	490d      	ldr	r1, [pc, #52]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800349a:	4b08      	ldr	r3, [pc, #32]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800349c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034a0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	4904      	ldr	r1, [pc, #16]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40023800 	.word	0x40023800
 80034c0:	424710d8 	.word	0x424710d8
 80034c4:	42470068 	.word	0x42470068

080034c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d003      	beq.n	80034ee <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	f000 8098 	beq.w	800361c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80034ec:	e12d      	b.n	800374a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80034ee:	4b9a      	ldr	r3, [pc, #616]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80034f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034f4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80034f8:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003500:	d00c      	beq.n	800351c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8003502:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003506:	d802      	bhi.n	800350e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 800350c:	e082      	b.n	8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800350e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003512:	d047      	beq.n	80035a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003514:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003518:	d06f      	beq.n	80035fa <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 800351a:	e07b      	b.n	8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800351c:	4b8f      	ldr	r3, [pc, #572]	; (800375c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800351e:	617b      	str	r3, [r7, #20]
          break;
 8003520:	e07b      	b.n	800361a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8003522:	4b8d      	ldr	r3, [pc, #564]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8003524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003530:	d109      	bne.n	8003546 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003532:	4b89      	ldr	r3, [pc, #548]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8003534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800353c:	4a87      	ldr	r2, [pc, #540]	; (800375c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800353e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003542:	613b      	str	r3, [r7, #16]
 8003544:	e019      	b.n	800357a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003546:	4b84      	ldr	r3, [pc, #528]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003552:	d109      	bne.n	8003568 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003554:	4b80      	ldr	r3, [pc, #512]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8003556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800355a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800355e:	4a80      	ldr	r2, [pc, #512]	; (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003560:	fbb2 f3f3 	udiv	r3, r2, r3
 8003564:	613b      	str	r3, [r7, #16]
 8003566:	e008      	b.n	800357a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003568:	4b7b      	ldr	r3, [pc, #492]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800356a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800356e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003572:	4a7c      	ldr	r2, [pc, #496]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8003574:	fbb2 f3f3 	udiv	r3, r2, r3
 8003578:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800357a:	4b77      	ldr	r3, [pc, #476]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800357c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003580:	099b      	lsrs	r3, r3, #6
 8003582:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	fb02 f303 	mul.w	r3, r2, r3
 800358c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800358e:	4b72      	ldr	r3, [pc, #456]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8003590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003594:	0f1b      	lsrs	r3, r3, #28
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a0:	617b      	str	r3, [r7, #20]
          break;
 80035a2:	e03a      	b.n	800361a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80035a4:	4b6c      	ldr	r3, [pc, #432]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035b0:	d108      	bne.n	80035c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80035b2:	4b69      	ldr	r3, [pc, #420]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035ba:	4a69      	ldr	r2, [pc, #420]	; (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80035bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	e007      	b.n	80035d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80035c4:	4b64      	ldr	r3, [pc, #400]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035cc:	4a65      	ldr	r2, [pc, #404]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80035ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d2:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80035d4:	4b60      	ldr	r3, [pc, #384]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	099b      	lsrs	r3, r3, #6
 80035da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	fb02 f303 	mul.w	r3, r2, r3
 80035e4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80035e6:	4b5c      	ldr	r3, [pc, #368]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	0f1b      	lsrs	r3, r3, #28
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f6:	617b      	str	r3, [r7, #20]
          break;
 80035f8:	e00f      	b.n	800361a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80035fa:	4b57      	ldr	r3, [pc, #348]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003606:	d102      	bne.n	800360e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 8003608:	4b55      	ldr	r3, [pc, #340]	; (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800360a:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800360c:	e005      	b.n	800361a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 800360e:	4b55      	ldr	r3, [pc, #340]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8003610:	617b      	str	r3, [r7, #20]
          break;
 8003612:	e002      	b.n	800361a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
          break;
 8003618:	bf00      	nop
        }
      }
      break;
 800361a:	e096      	b.n	800374a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 800361c:	4b4e      	ldr	r3, [pc, #312]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800361e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003622:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8003626:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800362e:	d00c      	beq.n	800364a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8003630:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003634:	d802      	bhi.n	800363c <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800363a:	e082      	b.n	8003742 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800363c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003640:	d047      	beq.n	80036d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8003642:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003646:	d06f      	beq.n	8003728 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8003648:	e07b      	b.n	8003742 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800364a:	4b44      	ldr	r3, [pc, #272]	; (800375c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800364c:	617b      	str	r3, [r7, #20]
          break;
 800364e:	e07b      	b.n	8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8003650:	4b41      	ldr	r3, [pc, #260]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8003652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800365a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800365e:	d109      	bne.n	8003674 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003660:	4b3d      	ldr	r3, [pc, #244]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8003662:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003666:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800366a:	4a3c      	ldr	r2, [pc, #240]	; (800375c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800366c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	e019      	b.n	80036a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003674:	4b38      	ldr	r3, [pc, #224]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800367c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003680:	d109      	bne.n	8003696 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003682:	4b35      	ldr	r3, [pc, #212]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8003684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800368c:	4a34      	ldr	r2, [pc, #208]	; (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800368e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	e008      	b.n	80036a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003696:	4b30      	ldr	r3, [pc, #192]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8003698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800369c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036a0:	4a30      	ldr	r2, [pc, #192]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80036a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a6:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80036a8:	4b2b      	ldr	r3, [pc, #172]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80036aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ae:	099b      	lsrs	r3, r3, #6
 80036b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	fb02 f303 	mul.w	r3, r2, r3
 80036ba:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80036bc:	4b26      	ldr	r3, [pc, #152]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80036be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036c2:	0f1b      	lsrs	r3, r3, #28
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ce:	617b      	str	r3, [r7, #20]
          break;
 80036d0:	e03a      	b.n	8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80036d2:	4b21      	ldr	r3, [pc, #132]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036de:	d108      	bne.n	80036f2 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80036e0:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036e8:	4a1d      	ldr	r2, [pc, #116]	; (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80036ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	e007      	b.n	8003702 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80036f2:	4b19      	ldr	r3, [pc, #100]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036fa:	4a1a      	ldr	r2, [pc, #104]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80036fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003700:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003702:	4b15      	ldr	r3, [pc, #84]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	099b      	lsrs	r3, r3, #6
 8003708:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003714:	4b10      	ldr	r3, [pc, #64]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	0f1b      	lsrs	r3, r3, #28
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	fbb2 f3f3 	udiv	r3, r2, r3
 8003724:	617b      	str	r3, [r7, #20]
          break;
 8003726:	e00f      	b.n	8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003730:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003734:	d102      	bne.n	800373c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 8003736:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003738:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800373a:	e005      	b.n	8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 800373c:	4b09      	ldr	r3, [pc, #36]	; (8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800373e:	617b      	str	r3, [r7, #20]
          break;
 8003740:	e002      	b.n	8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]
          break;
 8003746:	bf00      	nop
        }
      }
      break;
 8003748:	bf00      	nop
    }
  }
  return frequency;
 800374a:	697b      	ldr	r3, [r7, #20]
}
 800374c:	4618      	mov	r0, r3
 800374e:	371c      	adds	r7, #28
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	40023800 	.word	0x40023800
 800375c:	00bb8000 	.word	0x00bb8000
 8003760:	007a1200 	.word	0x007a1200
 8003764:	00f42400 	.word	0x00f42400

08003768 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d075      	beq.n	800386c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003780:	4ba2      	ldr	r3, [pc, #648]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 030c 	and.w	r3, r3, #12
 8003788:	2b04      	cmp	r3, #4
 800378a:	d00c      	beq.n	80037a6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800378c:	4b9f      	ldr	r3, [pc, #636]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003794:	2b08      	cmp	r3, #8
 8003796:	d112      	bne.n	80037be <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003798:	4b9c      	ldr	r3, [pc, #624]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037a4:	d10b      	bne.n	80037be <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a6:	4b99      	ldr	r3, [pc, #612]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d05b      	beq.n	800386a <HAL_RCC_OscConfig+0x102>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d157      	bne.n	800386a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e20b      	b.n	8003bd6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c6:	d106      	bne.n	80037d6 <HAL_RCC_OscConfig+0x6e>
 80037c8:	4b90      	ldr	r3, [pc, #576]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a8f      	ldr	r2, [pc, #572]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 80037ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d2:	6013      	str	r3, [r2, #0]
 80037d4:	e01d      	b.n	8003812 <HAL_RCC_OscConfig+0xaa>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037de:	d10c      	bne.n	80037fa <HAL_RCC_OscConfig+0x92>
 80037e0:	4b8a      	ldr	r3, [pc, #552]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a89      	ldr	r2, [pc, #548]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 80037e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	4b87      	ldr	r3, [pc, #540]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a86      	ldr	r2, [pc, #536]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 80037f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	e00b      	b.n	8003812 <HAL_RCC_OscConfig+0xaa>
 80037fa:	4b84      	ldr	r3, [pc, #528]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a83      	ldr	r2, [pc, #524]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 8003800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	4b81      	ldr	r3, [pc, #516]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a80      	ldr	r2, [pc, #512]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 800380c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003810:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d013      	beq.n	8003842 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381a:	f7fc fed9 	bl	80005d0 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003822:	f7fc fed5 	bl	80005d0 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b64      	cmp	r3, #100	; 0x64
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e1d0      	b.n	8003bd6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003834:	4b75      	ldr	r3, [pc, #468]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f0      	beq.n	8003822 <HAL_RCC_OscConfig+0xba>
 8003840:	e014      	b.n	800386c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003842:	f7fc fec5 	bl	80005d0 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800384a:	f7fc fec1 	bl	80005d0 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b64      	cmp	r3, #100	; 0x64
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e1bc      	b.n	8003bd6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800385c:	4b6b      	ldr	r3, [pc, #428]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1f0      	bne.n	800384a <HAL_RCC_OscConfig+0xe2>
 8003868:	e000      	b.n	800386c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800386a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d063      	beq.n	8003940 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003878:	4b64      	ldr	r3, [pc, #400]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 030c 	and.w	r3, r3, #12
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00b      	beq.n	800389c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003884:	4b61      	ldr	r3, [pc, #388]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800388c:	2b08      	cmp	r3, #8
 800388e:	d11c      	bne.n	80038ca <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003890:	4b5e      	ldr	r3, [pc, #376]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d116      	bne.n	80038ca <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389c:	4b5b      	ldr	r3, [pc, #364]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_OscConfig+0x14c>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d001      	beq.n	80038b4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e190      	b.n	8003bd6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b4:	4b55      	ldr	r3, [pc, #340]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4952      	ldr	r1, [pc, #328]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c8:	e03a      	b.n	8003940 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d020      	beq.n	8003914 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d2:	4b4f      	ldr	r3, [pc, #316]	; (8003a10 <HAL_RCC_OscConfig+0x2a8>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fc fe7a 	bl	80005d0 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038e0:	f7fc fe76 	bl	80005d0 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e171      	b.n	8003bd6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f2:	4b46      	ldr	r3, [pc, #280]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fe:	4b43      	ldr	r3, [pc, #268]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	493f      	ldr	r1, [pc, #252]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 800390e:	4313      	orrs	r3, r2
 8003910:	600b      	str	r3, [r1, #0]
 8003912:	e015      	b.n	8003940 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003914:	4b3e      	ldr	r3, [pc, #248]	; (8003a10 <HAL_RCC_OscConfig+0x2a8>)
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391a:	f7fc fe59 	bl	80005d0 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003922:	f7fc fe55 	bl	80005d0 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e150      	b.n	8003bd6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003934:	4b35      	ldr	r3, [pc, #212]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1f0      	bne.n	8003922 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b00      	cmp	r3, #0
 800394a:	d030      	beq.n	80039ae <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d016      	beq.n	8003982 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003954:	4b2f      	ldr	r3, [pc, #188]	; (8003a14 <HAL_RCC_OscConfig+0x2ac>)
 8003956:	2201      	movs	r2, #1
 8003958:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395a:	f7fc fe39 	bl	80005d0 <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003962:	f7fc fe35 	bl	80005d0 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e130      	b.n	8003bd6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003974:	4b25      	ldr	r3, [pc, #148]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 8003976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0f0      	beq.n	8003962 <HAL_RCC_OscConfig+0x1fa>
 8003980:	e015      	b.n	80039ae <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003982:	4b24      	ldr	r3, [pc, #144]	; (8003a14 <HAL_RCC_OscConfig+0x2ac>)
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003988:	f7fc fe22 	bl	80005d0 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003990:	f7fc fe1e 	bl	80005d0 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e119      	b.n	8003bd6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a2:	4b1a      	ldr	r3, [pc, #104]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 80039a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f0      	bne.n	8003990 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0304 	and.w	r3, r3, #4
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 809f 	beq.w	8003afa <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039bc:	2300      	movs	r3, #0
 80039be:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039c0:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10f      	bne.n	80039ec <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	4a0d      	ldr	r2, [pc, #52]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 80039d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039da:	6413      	str	r3, [r2, #64]	; 0x40
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <HAL_RCC_OscConfig+0x2a4>)
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80039e8:	2301      	movs	r3, #1
 80039ea:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ec:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d120      	bne.n	8003a3a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039f8:	4b07      	ldr	r3, [pc, #28]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a06      	ldr	r2, [pc, #24]	; (8003a18 <HAL_RCC_OscConfig+0x2b0>)
 80039fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a04:	f7fc fde4 	bl	80005d0 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0a:	e010      	b.n	8003a2e <HAL_RCC_OscConfig+0x2c6>
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	42470000 	.word	0x42470000
 8003a14:	42470e80 	.word	0x42470e80
 8003a18:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1c:	f7fc fdd8 	bl	80005d0 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e0d3      	b.n	8003bd6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2e:	4b6c      	ldr	r3, [pc, #432]	; (8003be0 <HAL_RCC_OscConfig+0x478>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d106      	bne.n	8003a50 <HAL_RCC_OscConfig+0x2e8>
 8003a42:	4b68      	ldr	r3, [pc, #416]	; (8003be4 <HAL_RCC_OscConfig+0x47c>)
 8003a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a46:	4a67      	ldr	r2, [pc, #412]	; (8003be4 <HAL_RCC_OscConfig+0x47c>)
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a4e:	e01c      	b.n	8003a8a <HAL_RCC_OscConfig+0x322>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2b05      	cmp	r3, #5
 8003a56:	d10c      	bne.n	8003a72 <HAL_RCC_OscConfig+0x30a>
 8003a58:	4b62      	ldr	r3, [pc, #392]	; (8003be4 <HAL_RCC_OscConfig+0x47c>)
 8003a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5c:	4a61      	ldr	r2, [pc, #388]	; (8003be4 <HAL_RCC_OscConfig+0x47c>)
 8003a5e:	f043 0304 	orr.w	r3, r3, #4
 8003a62:	6713      	str	r3, [r2, #112]	; 0x70
 8003a64:	4b5f      	ldr	r3, [pc, #380]	; (8003be4 <HAL_RCC_OscConfig+0x47c>)
 8003a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a68:	4a5e      	ldr	r2, [pc, #376]	; (8003be4 <HAL_RCC_OscConfig+0x47c>)
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a70:	e00b      	b.n	8003a8a <HAL_RCC_OscConfig+0x322>
 8003a72:	4b5c      	ldr	r3, [pc, #368]	; (8003be4 <HAL_RCC_OscConfig+0x47c>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	4a5b      	ldr	r2, [pc, #364]	; (8003be4 <HAL_RCC_OscConfig+0x47c>)
 8003a78:	f023 0301 	bic.w	r3, r3, #1
 8003a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a7e:	4b59      	ldr	r3, [pc, #356]	; (8003be4 <HAL_RCC_OscConfig+0x47c>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	4a58      	ldr	r2, [pc, #352]	; (8003be4 <HAL_RCC_OscConfig+0x47c>)
 8003a84:	f023 0304 	bic.w	r3, r3, #4
 8003a88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d015      	beq.n	8003abe <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a92:	f7fc fd9d 	bl	80005d0 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a98:	e00a      	b.n	8003ab0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a9a:	f7fc fd99 	bl	80005d0 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e092      	b.n	8003bd6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab0:	4b4c      	ldr	r3, [pc, #304]	; (8003be4 <HAL_RCC_OscConfig+0x47c>)
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0ee      	beq.n	8003a9a <HAL_RCC_OscConfig+0x332>
 8003abc:	e014      	b.n	8003ae8 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abe:	f7fc fd87 	bl	80005d0 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac4:	e00a      	b.n	8003adc <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac6:	f7fc fd83 	bl	80005d0 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e07c      	b.n	8003bd6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003adc:	4b41      	ldr	r3, [pc, #260]	; (8003be4 <HAL_RCC_OscConfig+0x47c>)
 8003ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1ee      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ae8:	7dfb      	ldrb	r3, [r7, #23]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d105      	bne.n	8003afa <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aee:	4b3d      	ldr	r3, [pc, #244]	; (8003be4 <HAL_RCC_OscConfig+0x47c>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	4a3c      	ldr	r2, [pc, #240]	; (8003be4 <HAL_RCC_OscConfig+0x47c>)
 8003af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003af8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d068      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b02:	4b38      	ldr	r3, [pc, #224]	; (8003be4 <HAL_RCC_OscConfig+0x47c>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d060      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d145      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b16:	4b34      	ldr	r3, [pc, #208]	; (8003be8 <HAL_RCC_OscConfig+0x480>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1c:	f7fc fd58 	bl	80005d0 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b24:	f7fc fd54 	bl	80005d0 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e04f      	b.n	8003bd6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b36:	4b2b      	ldr	r3, [pc, #172]	; (8003be4 <HAL_RCC_OscConfig+0x47c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69da      	ldr	r2, [r3, #28]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	019b      	lsls	r3, r3, #6
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b58:	085b      	lsrs	r3, r3, #1
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	041b      	lsls	r3, r3, #16
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b64:	061b      	lsls	r3, r3, #24
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6c:	071b      	lsls	r3, r3, #28
 8003b6e:	491d      	ldr	r1, [pc, #116]	; (8003be4 <HAL_RCC_OscConfig+0x47c>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b74:	4b1c      	ldr	r3, [pc, #112]	; (8003be8 <HAL_RCC_OscConfig+0x480>)
 8003b76:	2201      	movs	r2, #1
 8003b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7a:	f7fc fd29 	bl	80005d0 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b82:	f7fc fd25 	bl	80005d0 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e020      	b.n	8003bd6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b94:	4b13      	ldr	r3, [pc, #76]	; (8003be4 <HAL_RCC_OscConfig+0x47c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0x41a>
 8003ba0:	e018      	b.n	8003bd4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba2:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <HAL_RCC_OscConfig+0x480>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba8:	f7fc fd12 	bl	80005d0 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb0:	f7fc fd0e 	bl	80005d0 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e009      	b.n	8003bd6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc2:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <HAL_RCC_OscConfig+0x47c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f0      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x448>
 8003bce:	e001      	b.n	8003bd4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e000      	b.n	8003bd6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40007000 	.word	0x40007000
 8003be4:	40023800 	.word	0x40023800
 8003be8:	42470060 	.word	0x42470060

08003bec <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e022      	b.n	8003c44 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d105      	bne.n	8003c16 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f004 fe7b 	bl	800890c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2203      	movs	r2, #3
 8003c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f814 	bl	8003c4c <HAL_SD_InitCard>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e00a      	b.n	8003c44 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003c4c:	b5b0      	push	{r4, r5, r7, lr}
 8003c4e:	b08e      	sub	sp, #56	; 0x38
 8003c50:	af04      	add	r7, sp, #16
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003c54:	2300      	movs	r3, #0
 8003c56:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003c60:	2300      	movs	r3, #0
 8003c62:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003c64:	2300      	movs	r3, #0
 8003c66:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003c68:	2376      	movs	r3, #118	; 0x76
 8003c6a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681d      	ldr	r5, [r3, #0]
 8003c70:	466c      	mov	r4, sp
 8003c72:	f107 0314 	add.w	r3, r7, #20
 8003c76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c7e:	f107 0308 	add.w	r3, r7, #8
 8003c82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c84:	4628      	mov	r0, r5
 8003c86:	f000 fe65 	bl	8004954 <SDIO_Init>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e031      	b.n	8003d00 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003c9c:	4b1a      	ldr	r3, [pc, #104]	; (8003d08 <HAL_SD_InitCard+0xbc>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 fe8c 	bl	80049c4 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003cac:	4b16      	ldr	r3, [pc, #88]	; (8003d08 <HAL_SD_InitCard+0xbc>)
 8003cae:	2201      	movs	r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fb18 	bl	80042e8 <SD_PowerON>
 8003cb8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00b      	beq.n	8003cd8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e013      	b.n	8003d00 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 fa37 	bl	800414c <SD_InitCard>
 8003cde:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00b      	beq.n	8003cfe <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3728      	adds	r7, #40	; 0x28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bdb0      	pop	{r4, r5, r7, pc}
 8003d08:	422580a0 	.word	0x422580a0

08003d0c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d1a:	0f9b      	lsrs	r3, r3, #30
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d26:	0e9b      	lsrs	r3, r3, #26
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d38:	0e1b      	lsrs	r3, r3, #24
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	f003 0303 	and.w	r3, r3, #3
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d4a:	0c1b      	lsrs	r3, r3, #16
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d56:	0a1b      	lsrs	r3, r3, #8
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d6c:	0d1b      	lsrs	r3, r3, #20
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d78:	0c1b      	lsrs	r3, r3, #16
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d8a:	0bdb      	lsrs	r3, r3, #15
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d9c:	0b9b      	lsrs	r3, r3, #14
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dae:	0b5b      	lsrs	r3, r3, #13
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dc0:	0b1b      	lsrs	r3, r3, #12
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d163      	bne.n	8003ea4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003de0:	009a      	lsls	r2, r3, #2
 8003de2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003de6:	4013      	ands	r3, r2
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003dec:	0f92      	lsrs	r2, r2, #30
 8003dee:	431a      	orrs	r2, r3
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003df8:	0edb      	lsrs	r3, r3, #27
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e0a:	0e1b      	lsrs	r3, r3, #24
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e1c:	0d5b      	lsrs	r3, r3, #21
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e2e:	0c9b      	lsrs	r3, r3, #18
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e40:	0bdb      	lsrs	r3, r3, #15
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	7e1b      	ldrb	r3, [r3, #24]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	3302      	adds	r3, #2
 8003e64:	2201      	movs	r2, #1
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003e6e:	fb02 f203 	mul.w	r2, r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	7a1b      	ldrb	r3, [r3, #8]
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	2201      	movs	r2, #1
 8003e82:	409a      	lsls	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003e90:	0a52      	lsrs	r2, r2, #9
 8003e92:	fb02 f203 	mul.w	r2, r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ea0:	661a      	str	r2, [r3, #96]	; 0x60
 8003ea2:	e031      	b.n	8003f08 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d11d      	bne.n	8003ee8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eb0:	041b      	lsls	r3, r3, #16
 8003eb2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eba:	0c1b      	lsrs	r3, r3, #16
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	029a      	lsls	r2, r3, #10
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003edc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	661a      	str	r2, [r3, #96]	; 0x60
 8003ee6:	e00f      	b.n	8003f08 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a58      	ldr	r2, [pc, #352]	; (8004050 <HAL_SD_GetCardCSD+0x344>)
 8003eee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e09d      	b.n	8004044 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f0c:	0b9b      	lsrs	r3, r3, #14
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f1e:	09db      	lsrs	r3, r3, #7
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f40:	0fdb      	lsrs	r3, r3, #31
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4c:	0f5b      	lsrs	r3, r3, #29
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5e:	0e9b      	lsrs	r3, r3, #26
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f70:	0d9b      	lsrs	r3, r3, #22
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	f003 030f 	and.w	r3, r3, #15
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f82:	0d5b      	lsrs	r3, r3, #21
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9e:	0c1b      	lsrs	r3, r3, #16
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb2:	0bdb      	lsrs	r3, r3, #15
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc6:	0b9b      	lsrs	r3, r3, #14
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fda:	0b5b      	lsrs	r3, r3, #13
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fee:	0b1b      	lsrs	r3, r3, #12
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004002:	0a9b      	lsrs	r3, r3, #10
 8004004:	b2db      	uxtb	r3, r3
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	b2da      	uxtb	r2, r3
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004016:	0a1b      	lsrs	r3, r3, #8
 8004018:	b2db      	uxtb	r3, r3
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	b2da      	uxtb	r2, r3
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402a:	085b      	lsrs	r3, r3, #1
 800402c:	b2db      	uxtb	r3, r3
 800402e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004032:	b2da      	uxtb	r2, r3
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	004005ff 	.word	0x004005ff

08004054 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004054:	b5b0      	push	{r4, r5, r7, lr}
 8004056:	b08e      	sub	sp, #56	; 0x38
 8004058:	af04      	add	r7, sp, #16
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2203      	movs	r2, #3
 8004062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406a:	2b03      	cmp	r3, #3
 800406c:	d02e      	beq.n	80040cc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004074:	d106      	bne.n	8004084 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	639a      	str	r2, [r3, #56]	; 0x38
 8004082:	e029      	b.n	80040d8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800408a:	d10a      	bne.n	80040a2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f9b9 	bl	8004404 <SD_WideBus_Enable>
 8004092:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	639a      	str	r2, [r3, #56]	; 0x38
 80040a0:	e01a      	b.n	80040d8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10a      	bne.n	80040be <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f9f6 	bl	800449a <SD_WideBus_Disable>
 80040ae:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	639a      	str	r2, [r3, #56]	; 0x38
 80040bc:	e00c      	b.n	80040d8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	639a      	str	r2, [r3, #56]	; 0x38
 80040ca:	e005      	b.n	80040d8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d009      	beq.n	80040f4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a18      	ldr	r2, [pc, #96]	; (8004148 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80040e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e024      	b.n	800413e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681d      	ldr	r5, [r3, #0]
 800411a:	466c      	mov	r4, sp
 800411c:	f107 0318 	add.w	r3, r7, #24
 8004120:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004124:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004128:	f107 030c 	add.w	r3, r7, #12
 800412c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800412e:	4628      	mov	r0, r5
 8004130:	f000 fc10 	bl	8004954 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3728      	adds	r7, #40	; 0x28
 8004142:	46bd      	mov	sp, r7
 8004144:	bdb0      	pop	{r4, r5, r7, pc}
 8004146:	bf00      	nop
 8004148:	004005ff 	.word	0x004005ff

0800414c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800414c:	b5b0      	push	{r4, r5, r7, lr}
 800414e:	b094      	sub	sp, #80	; 0x50
 8004150:	af04      	add	r7, sp, #16
 8004152:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004154:	2301      	movs	r3, #1
 8004156:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fc40 	bl	80049e2 <SDIO_GetPowerState>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d102      	bne.n	800416e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004168:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800416c:	e0b7      	b.n	80042de <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	2b03      	cmp	r3, #3
 8004174:	d02f      	beq.n	80041d6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fdbf 	bl	8004cfe <SDMMC_CmdSendCID>
 8004180:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <SD_InitCard+0x40>
    {
      return errorstate;
 8004188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800418a:	e0a8      	b.n	80042de <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2100      	movs	r1, #0
 8004192:	4618      	mov	r0, r3
 8004194:	f000 fc6a 	bl	8004a6c <SDIO_GetResponse>
 8004198:	4602      	mov	r2, r0
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2104      	movs	r1, #4
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 fc61 	bl	8004a6c <SDIO_GetResponse>
 80041aa:	4602      	mov	r2, r0
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2108      	movs	r1, #8
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 fc58 	bl	8004a6c <SDIO_GetResponse>
 80041bc:	4602      	mov	r2, r0
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	210c      	movs	r1, #12
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 fc4f 	bl	8004a6c <SDIO_GetResponse>
 80041ce:	4602      	mov	r2, r0
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d00d      	beq.n	80041fa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f107 020e 	add.w	r2, r7, #14
 80041e6:	4611      	mov	r1, r2
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 fdc5 	bl	8004d78 <SDMMC_CmdSetRelAdd>
 80041ee:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80041f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <SD_InitCard+0xae>
    {
      return errorstate;
 80041f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f8:	e071      	b.n	80042de <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d036      	beq.n	8004270 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004202:	89fb      	ldrh	r3, [r7, #14]
 8004204:	461a      	mov	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004212:	041b      	lsls	r3, r3, #16
 8004214:	4619      	mov	r1, r3
 8004216:	4610      	mov	r0, r2
 8004218:	f000 fd8f 	bl	8004d3a <SDMMC_CmdSendCSD>
 800421c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800421e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004226:	e05a      	b.n	80042de <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2100      	movs	r1, #0
 800422e:	4618      	mov	r0, r3
 8004230:	f000 fc1c 	bl	8004a6c <SDIO_GetResponse>
 8004234:	4602      	mov	r2, r0
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2104      	movs	r1, #4
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fc13 	bl	8004a6c <SDIO_GetResponse>
 8004246:	4602      	mov	r2, r0
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2108      	movs	r1, #8
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fc0a 	bl	8004a6c <SDIO_GetResponse>
 8004258:	4602      	mov	r2, r0
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	210c      	movs	r1, #12
 8004264:	4618      	mov	r0, r3
 8004266:	f000 fc01 	bl	8004a6c <SDIO_GetResponse>
 800426a:	4602      	mov	r2, r0
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2104      	movs	r1, #4
 8004276:	4618      	mov	r0, r3
 8004278:	f000 fbf8 	bl	8004a6c <SDIO_GetResponse>
 800427c:	4603      	mov	r3, r0
 800427e:	0d1a      	lsrs	r2, r3, #20
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004284:	f107 0310 	add.w	r3, r7, #16
 8004288:	4619      	mov	r1, r3
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7ff fd3e 	bl	8003d0c <HAL_SD_GetCardCSD>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004296:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800429a:	e020      	b.n	80042de <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6819      	ldr	r1, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a4:	041b      	lsls	r3, r3, #16
 80042a6:	f04f 0400 	mov.w	r4, #0
 80042aa:	461a      	mov	r2, r3
 80042ac:	4623      	mov	r3, r4
 80042ae:	4608      	mov	r0, r1
 80042b0:	f000 fc3d 	bl	8004b2e <SDMMC_CmdSelDesel>
 80042b4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80042b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <SD_InitCard+0x174>
  {
    return errorstate;
 80042bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042be:	e00e      	b.n	80042de <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681d      	ldr	r5, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	466c      	mov	r4, sp
 80042c8:	f103 0210 	add.w	r2, r3, #16
 80042cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80042ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80042d2:	3304      	adds	r3, #4
 80042d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042d6:	4628      	mov	r0, r5
 80042d8:	f000 fb3c 	bl	8004954 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3740      	adds	r7, #64	; 0x40
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080042e8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	2300      	movs	r3, #0
 80042fa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f000 fc37 	bl	8004b74 <SDMMC_CmdGoIdleState>
 8004306:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <SD_PowerON+0x2a>
  {
    return errorstate;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	e072      	b.n	80043f8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f000 fc4a 	bl	8004bb0 <SDMMC_CmdOperCond>
 800431c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00d      	beq.n	8004340 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fc20 	bl	8004b74 <SDMMC_CmdGoIdleState>
 8004334:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d004      	beq.n	8004346 <SD_PowerON+0x5e>
    {
      return errorstate;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	e05b      	b.n	80043f8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800434a:	2b01      	cmp	r3, #1
 800434c:	d137      	bne.n	80043be <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2100      	movs	r1, #0
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fc4a 	bl	8004bee <SDMMC_CmdAppCommand>
 800435a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d02d      	beq.n	80043be <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004362:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004366:	e047      	b.n	80043f8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2100      	movs	r1, #0
 800436e:	4618      	mov	r0, r3
 8004370:	f000 fc3d 	bl	8004bee <SDMMC_CmdAppCommand>
 8004374:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <SD_PowerON+0x98>
    {
      return errorstate;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	e03b      	b.n	80043f8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	491e      	ldr	r1, [pc, #120]	; (8004400 <SD_PowerON+0x118>)
 8004386:	4618      	mov	r0, r3
 8004388:	f000 fc53 	bl	8004c32 <SDMMC_CmdAppOperCommand>
 800438c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d002      	beq.n	800439a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004394:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004398:	e02e      	b.n	80043f8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2100      	movs	r1, #0
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 fb63 	bl	8004a6c <SDIO_GetResponse>
 80043a6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	0fdb      	lsrs	r3, r3, #31
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d101      	bne.n	80043b4 <SD_PowerON+0xcc>
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <SD_PowerON+0xce>
 80043b4:	2300      	movs	r3, #0
 80043b6:	613b      	str	r3, [r7, #16]

    count++;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	3301      	adds	r3, #1
 80043bc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d802      	bhi.n	80043ce <SD_PowerON+0xe6>
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0cc      	beq.n	8004368 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d902      	bls.n	80043de <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80043d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043dc:	e00c      	b.n	80043f8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	645a      	str	r2, [r3, #68]	; 0x44
 80043ee:	e002      	b.n	80043f6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	c1100000 	.word	0xc1100000

08004404 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800440c:	2300      	movs	r3, #0
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	2300      	movs	r3, #0
 8004412:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2100      	movs	r1, #0
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fb26 	bl	8004a6c <SDIO_GetResponse>
 8004420:	4603      	mov	r3, r0
 8004422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004426:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800442a:	d102      	bne.n	8004432 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800442c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004430:	e02f      	b.n	8004492 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004432:	f107 030c 	add.w	r3, r7, #12
 8004436:	4619      	mov	r1, r3
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f879 	bl	8004530 <SD_FindSCR>
 800443e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	e023      	b.n	8004492 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d01c      	beq.n	800448e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800445c:	041b      	lsls	r3, r3, #16
 800445e:	4619      	mov	r1, r3
 8004460:	4610      	mov	r0, r2
 8004462:	f000 fbc4 	bl	8004bee <SDMMC_CmdAppCommand>
 8004466:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	e00f      	b.n	8004492 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2102      	movs	r1, #2
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fbfd 	bl	8004c78 <SDMMC_CmdBusWidth>
 800447e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	e003      	b.n	8004492 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800448a:	2300      	movs	r3, #0
 800448c:	e001      	b.n	8004492 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800448e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b086      	sub	sp, #24
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	2300      	movs	r3, #0
 80044a8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2100      	movs	r1, #0
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 fadb 	bl	8004a6c <SDIO_GetResponse>
 80044b6:	4603      	mov	r3, r0
 80044b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044c0:	d102      	bne.n	80044c8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80044c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044c6:	e02f      	b.n	8004528 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80044c8:	f107 030c 	add.w	r3, r7, #12
 80044cc:	4619      	mov	r1, r3
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f82e 	bl	8004530 <SD_FindSCR>
 80044d4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	e023      	b.n	8004528 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d01c      	beq.n	8004524 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f2:	041b      	lsls	r3, r3, #16
 80044f4:	4619      	mov	r1, r3
 80044f6:	4610      	mov	r0, r2
 80044f8:	f000 fb79 	bl	8004bee <SDMMC_CmdAppCommand>
 80044fc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	e00f      	b.n	8004528 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2100      	movs	r1, #0
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fbb2 	bl	8004c78 <SDMMC_CmdBusWidth>
 8004514:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	e003      	b.n	8004528 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004520:	2300      	movs	r3, #0
 8004522:	e001      	b.n	8004528 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004524:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004528:	4618      	mov	r0, r3
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004530:	b590      	push	{r4, r7, lr}
 8004532:	b08f      	sub	sp, #60	; 0x3c
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800453a:	f7fc f849 	bl	80005d0 <HAL_GetTick>
 800453e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004544:	2300      	movs	r3, #0
 8004546:	60bb      	str	r3, [r7, #8]
 8004548:	2300      	movs	r3, #0
 800454a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2108      	movs	r1, #8
 8004556:	4618      	mov	r0, r3
 8004558:	f000 fac7 	bl	8004aea <SDMMC_CmdBlockLength>
 800455c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800455e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004566:	e0a9      	b.n	80046bc <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004570:	041b      	lsls	r3, r3, #16
 8004572:	4619      	mov	r1, r3
 8004574:	4610      	mov	r0, r2
 8004576:	f000 fb3a 	bl	8004bee <SDMMC_CmdAppCommand>
 800457a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800457c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004584:	e09a      	b.n	80046bc <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004586:	f04f 33ff 	mov.w	r3, #4294967295
 800458a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800458c:	2308      	movs	r3, #8
 800458e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004590:	2330      	movs	r3, #48	; 0x30
 8004592:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004594:	2302      	movs	r3, #2
 8004596:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004598:	2300      	movs	r3, #0
 800459a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800459c:	2301      	movs	r3, #1
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f107 0210 	add.w	r2, r7, #16
 80045a8:	4611      	mov	r1, r2
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fa71 	bl	8004a92 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 fb81 	bl	8004cbc <SDMMC_CmdSendSCR>
 80045ba:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80045bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d022      	beq.n	8004608 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80045c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c4:	e07a      	b.n	80046bc <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00e      	beq.n	80045f2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6819      	ldr	r1, [r3, #0]
 80045d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	f107 0208 	add.w	r2, r7, #8
 80045e0:	18d4      	adds	r4, r2, r3
 80045e2:	4608      	mov	r0, r1
 80045e4:	f000 f9e1 	bl	80049aa <SDIO_ReadFIFO>
 80045e8:	4603      	mov	r3, r0
 80045ea:	6023      	str	r3, [r4, #0]
      index++;
 80045ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ee:	3301      	adds	r3, #1
 80045f0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80045f2:	f7fb ffed 	bl	80005d0 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004600:	d102      	bne.n	8004608 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004602:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004606:	e059      	b.n	80046bc <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800460e:	f240 432a 	movw	r3, #1066	; 0x42a
 8004612:	4013      	ands	r3, r2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0d6      	beq.n	80045c6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d005      	beq.n	8004632 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2208      	movs	r2, #8
 800462c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800462e:	2308      	movs	r3, #8
 8004630:	e044      	b.n	80046bc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d005      	beq.n	800464c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2202      	movs	r2, #2
 8004646:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004648:	2302      	movs	r3, #2
 800464a:	e037      	b.n	80046bc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004652:	f003 0320 	and.w	r3, r3, #32
 8004656:	2b00      	cmp	r3, #0
 8004658:	d005      	beq.n	8004666 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2220      	movs	r2, #32
 8004660:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004662:	2320      	movs	r3, #32
 8004664:	e02a      	b.n	80046bc <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f240 523a 	movw	r2, #1338	; 0x53a
 800466e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	061a      	lsls	r2, r3, #24
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	021b      	lsls	r3, r3, #8
 8004678:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800467c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	0a1b      	lsrs	r3, r3, #8
 8004682:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004686:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	0e1b      	lsrs	r3, r3, #24
 800468c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800468e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004690:	601a      	str	r2, [r3, #0]
    scr++;
 8004692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004694:	3304      	adds	r3, #4
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	061a      	lsls	r2, r3, #24
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	021b      	lsls	r3, r3, #8
 80046a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80046a4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	0a1b      	lsrs	r3, r3, #8
 80046aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80046ae:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	0e1b      	lsrs	r3, r3, #24
 80046b4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80046b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	373c      	adds	r7, #60	; 0x3c
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd90      	pop	{r4, r7, pc}

080046c4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e034      	b.n	8004744 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d106      	bne.n	80046f4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f004 f9d2 	bl	8008a98 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	3308      	adds	r3, #8
 80046fc:	4619      	mov	r1, r3
 80046fe:	4610      	mov	r0, r2
 8004700:	f000 f824 	bl	800474c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6818      	ldr	r0, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	461a      	mov	r2, r3
 800470e:	68b9      	ldr	r1, [r7, #8]
 8004710:	f000 f88c 	bl	800482c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6858      	ldr	r0, [r3, #4]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	f000 f8d7 	bl	80048d4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	6892      	ldr	r2, [r2, #8]
 800472e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	6892      	ldr	r2, [r2, #8]
 800473a:	f041 0101 	orr.w	r1, r1, #1
 800473e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004764:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4b2f      	ldr	r3, [pc, #188]	; (8004828 <FSMC_NORSRAM_Init+0xdc>)
 800476a:	4013      	ands	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004776:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800477c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8004782:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8004788:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 800478e:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8004794:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800479a:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80047a0:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80047a6:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 80047ac:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 80047b2:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 80047b8:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 80047be:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d103      	bne.n	80047d6 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047d4:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68f9      	ldr	r1, [r7, #12]
 80047de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ea:	d10a      	bne.n	8004802 <FSMC_NORSRAM_Init+0xb6>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d006      	beq.n	8004802 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d006      	beq.n	8004818 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	ffc00480 	.word	0xffc00480

0800482c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800482c:	b480      	push	{r7}
 800482e:	b087      	sub	sp, #28
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8004838:	2300      	movs	r3, #0
 800483a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004846:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800484e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800485a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004862:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800486a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	3b01      	subs	r3, #1
 8004872:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004874:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	3b02      	subs	r3, #2
 800487c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800487e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004884:	4313      	orrs	r3, r2
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	4313      	orrs	r3, r2
 800488a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	1c5a      	adds	r2, r3, #1
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6979      	ldr	r1, [r7, #20]
 8004894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048a4:	d10e      	bne.n	80048c4 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80048ae:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	3b01      	subs	r3, #1
 80048b6:	051b      	lsls	r3, r3, #20
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	371c      	adds	r7, #28
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
	...

080048d4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
 80048e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048ec:	d122      	bne.n	8004934 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048f6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	4b15      	ldr	r3, [pc, #84]	; (8004950 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80048fc:	4013      	ands	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800490a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004912:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800491a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004920:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6979      	ldr	r1, [r7, #20]
 800492e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004932:	e005      	b.n	8004940 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800493c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	371c      	adds	r7, #28
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	cff00000 	.word	0xcff00000

08004954 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004954:	b084      	sub	sp, #16
 8004956:	b480      	push	{r7}
 8004958:	b085      	sub	sp, #20
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	f107 001c 	add.w	r0, r7, #28
 8004962:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004966:	2300      	movs	r3, #0
 8004968:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800496a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800496c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800496e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004972:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004974:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004976:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800497a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800497e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800498e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	431a      	orrs	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	b004      	add	sp, #16
 80049a8:	4770      	bx	lr

080049aa <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2203      	movs	r2, #3
 80049d0:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80049d2:	2002      	movs	r0, #2
 80049d4:	f7fb fe08 	bl	80005e8 <HAL_Delay>
  
  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0303 	and.w	r3, r3, #3
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b085      	sub	sp, #20
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
 8004a06:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004a1c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004a22:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004a28:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004a38:	f023 030f 	bic.w	r3, r3, #15
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	b2db      	uxtb	r3, r3
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3314      	adds	r3, #20
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	4413      	add	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
}  
 8004a86:	4618      	mov	r0, r3
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b085      	sub	sp, #20
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004ab8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004abe:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004ac4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0

}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b088      	sub	sp, #32
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004af8:	2310      	movs	r3, #16
 8004afa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004afc:	2340      	movs	r3, #64	; 0x40
 8004afe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b00:	2300      	movs	r3, #0
 8004b02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b0a:	f107 0308 	add.w	r3, r7, #8
 8004b0e:	4619      	mov	r1, r3
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff ff74 	bl	80049fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1a:	2110      	movs	r1, #16
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f975 	bl	8004e0c <SDMMC_GetCmdResp1>
 8004b22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b24:	69fb      	ldr	r3, [r7, #28]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3720      	adds	r7, #32
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b08a      	sub	sp, #40	; 0x28
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	60f8      	str	r0, [r7, #12]
 8004b36:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004b3e:	2307      	movs	r3, #7
 8004b40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b42:	2340      	movs	r3, #64	; 0x40
 8004b44:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b46:	2300      	movs	r3, #0
 8004b48:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b4e:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b50:	f107 0310 	add.w	r3, r7, #16
 8004b54:	4619      	mov	r1, r3
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f7ff ff51 	bl	80049fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b60:	2107      	movs	r1, #7
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 f952 	bl	8004e0c <SDMMC_GetCmdResp1>
 8004b68:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3728      	adds	r7, #40	; 0x28
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004b80:	2300      	movs	r3, #0
 8004b82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004b84:	2300      	movs	r3, #0
 8004b86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b92:	f107 0308 	add.w	r3, r7, #8
 8004b96:	4619      	mov	r1, r3
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7ff ff30 	bl	80049fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f90c 	bl	8004dbc <SDMMC_GetCmdError>
 8004ba4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ba6:	69fb      	ldr	r3, [r7, #28]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3720      	adds	r7, #32
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004bb8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004bbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004bbe:	2308      	movs	r3, #8
 8004bc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004bc2:	2340      	movs	r3, #64	; 0x40
 8004bc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bd0:	f107 0308 	add.w	r3, r7, #8
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7ff ff11 	bl	80049fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 faf5 	bl	80051cc <SDMMC_GetCmdResp7>
 8004be2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004be4:	69fb      	ldr	r3, [r7, #28]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3720      	adds	r7, #32
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b088      	sub	sp, #32
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004bfc:	2337      	movs	r3, #55	; 0x37
 8004bfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c00:	2340      	movs	r3, #64	; 0x40
 8004c02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c04:	2300      	movs	r3, #0
 8004c06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c0e:	f107 0308 	add.w	r3, r7, #8
 8004c12:	4619      	mov	r1, r3
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7ff fef2 	bl	80049fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c1e:	2137      	movs	r1, #55	; 0x37
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f8f3 	bl	8004e0c <SDMMC_GetCmdResp1>
 8004c26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c28:	69fb      	ldr	r3, [r7, #28]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3720      	adds	r7, #32
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b088      	sub	sp, #32
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004c48:	2329      	movs	r3, #41	; 0x29
 8004c4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c4c:	2340      	movs	r3, #64	; 0x40
 8004c4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c50:	2300      	movs	r3, #0
 8004c52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c5a:	f107 0308 	add.w	r3, r7, #8
 8004c5e:	4619      	mov	r1, r3
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7ff fecc 	bl	80049fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fa02 	bl	8005070 <SDMMC_GetCmdResp3>
 8004c6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c6e:	69fb      	ldr	r3, [r7, #28]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3720      	adds	r7, #32
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004c86:	2306      	movs	r3, #6
 8004c88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c8a:	2340      	movs	r3, #64	; 0x40
 8004c8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c98:	f107 0308 	add.w	r3, r7, #8
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff fead 	bl	80049fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca8:	2106      	movs	r1, #6
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f8ae 	bl	8004e0c <SDMMC_GetCmdResp1>
 8004cb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cb2:	69fb      	ldr	r3, [r7, #28]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3720      	adds	r7, #32
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004cc8:	2333      	movs	r3, #51	; 0x33
 8004cca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ccc:	2340      	movs	r3, #64	; 0x40
 8004cce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cd8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004cda:	f107 0308 	add.w	r3, r7, #8
 8004cde:	4619      	mov	r1, r3
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7ff fe8c 	bl	80049fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cea:	2133      	movs	r1, #51	; 0x33
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f88d 	bl	8004e0c <SDMMC_GetCmdResp1>
 8004cf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cf4:	69fb      	ldr	r3, [r7, #28]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3720      	adds	r7, #32
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b088      	sub	sp, #32
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004d0e:	23c0      	movs	r3, #192	; 0xc0
 8004d10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d12:	2300      	movs	r3, #0
 8004d14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d1c:	f107 0308 	add.w	r3, r7, #8
 8004d20:	4619      	mov	r1, r3
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7ff fe6b 	bl	80049fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f95b 	bl	8004fe4 <SDMMC_GetCmdResp2>
 8004d2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d30:	69fb      	ldr	r3, [r7, #28]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3720      	adds	r7, #32
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b088      	sub	sp, #32
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004d48:	2309      	movs	r3, #9
 8004d4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004d4c:	23c0      	movs	r3, #192	; 0xc0
 8004d4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d5a:	f107 0308 	add.w	r3, r7, #8
 8004d5e:	4619      	mov	r1, r3
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7ff fe4c 	bl	80049fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f93c 	bl	8004fe4 <SDMMC_GetCmdResp2>
 8004d6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d6e:	69fb      	ldr	r3, [r7, #28]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3720      	adds	r7, #32
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b088      	sub	sp, #32
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004d86:	2303      	movs	r3, #3
 8004d88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d8a:	2340      	movs	r3, #64	; 0x40
 8004d8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d98:	f107 0308 	add.w	r3, r7, #8
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7ff fe2d 	bl	80049fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	2103      	movs	r1, #3
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f99b 	bl	80050e4 <SDMMC_GetCmdResp6>
 8004dae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004db0:	69fb      	ldr	r3, [r7, #28]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3720      	adds	r7, #32
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004dbc:	b490      	push	{r4, r7}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004dc4:	4b0f      	ldr	r3, [pc, #60]	; (8004e04 <SDMMC_GetCmdError+0x48>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a0f      	ldr	r2, [pc, #60]	; (8004e08 <SDMMC_GetCmdError+0x4c>)
 8004dca:	fba2 2303 	umull	r2, r3, r2, r3
 8004dce:	0a5b      	lsrs	r3, r3, #9
 8004dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004dd8:	4623      	mov	r3, r4
 8004dda:	1e5c      	subs	r4, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d102      	bne.n	8004de6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004de0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004de4:	e009      	b.n	8004dfa <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0f2      	beq.n	8004dd8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	22c5      	movs	r2, #197	; 0xc5
 8004df6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bc90      	pop	{r4, r7}
 8004e02:	4770      	bx	lr
 8004e04:	200000bc 	.word	0x200000bc
 8004e08:	10624dd3 	.word	0x10624dd3

08004e0c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004e0c:	b590      	push	{r4, r7, lr}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	460b      	mov	r3, r1
 8004e16:	607a      	str	r2, [r7, #4]
 8004e18:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004e1a:	4b6f      	ldr	r3, [pc, #444]	; (8004fd8 <SDMMC_GetCmdResp1+0x1cc>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a6f      	ldr	r2, [pc, #444]	; (8004fdc <SDMMC_GetCmdResp1+0x1d0>)
 8004e20:	fba2 2303 	umull	r2, r3, r2, r3
 8004e24:	0a5b      	lsrs	r3, r3, #9
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004e2c:	4623      	mov	r3, r4
 8004e2e:	1e5c      	subs	r4, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d102      	bne.n	8004e3a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e38:	e0c9      	b.n	8004fce <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0f0      	beq.n	8004e2c <SDMMC_GetCmdResp1+0x20>
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1eb      	bne.n	8004e2c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d004      	beq.n	8004e6a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2204      	movs	r2, #4
 8004e64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004e66:	2304      	movs	r3, #4
 8004e68:	e0b1      	b.n	8004fce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d004      	beq.n	8004e80 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e0a6      	b.n	8004fce <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	22c5      	movs	r2, #197	; 0xc5
 8004e84:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f7ff fde3 	bl	8004a52 <SDIO_GetCommandResponse>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	461a      	mov	r2, r3
 8004e90:	7afb      	ldrb	r3, [r7, #11]
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d001      	beq.n	8004e9a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e099      	b.n	8004fce <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f7ff fde5 	bl	8004a6c <SDIO_GetResponse>
 8004ea2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	4b4e      	ldr	r3, [pc, #312]	; (8004fe0 <SDMMC_GetCmdResp1+0x1d4>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e08d      	b.n	8004fce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	da02      	bge.n	8004ebe <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004eb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ebc:	e087      	b.n	8004fce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004ec8:	2340      	movs	r3, #64	; 0x40
 8004eca:	e080      	b.n	8004fce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004ed6:	2380      	movs	r3, #128	; 0x80
 8004ed8:	e079      	b.n	8004fce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d002      	beq.n	8004eea <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004ee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ee8:	e071      	b.n	8004fce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ef8:	e069      	b.n	8004fce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f08:	e061      	b.n	8004fce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d002      	beq.n	8004f1a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004f14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f18:	e059      	b.n	8004fce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f28:	e051      	b.n	8004fce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004f34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f38:	e049      	b.n	8004fce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004f44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f48:	e041      	b.n	8004fce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8004f54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f58:	e039      	b.n	8004fce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004f64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f68:	e031      	b.n	8004fce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004f74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004f78:	e029      	b.n	8004fce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004f84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004f88:	e021      	b.n	8004fce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004f94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004f98:	e019      	b.n	8004fce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d002      	beq.n	8004faa <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004fa4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004fa8:	e011      	b.n	8004fce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d002      	beq.n	8004fba <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004fb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004fb8:	e009      	b.n	8004fce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f003 0308 	and.w	r3, r3, #8
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004fc4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004fc8:	e001      	b.n	8004fce <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004fca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd90      	pop	{r4, r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	200000bc 	.word	0x200000bc
 8004fdc:	10624dd3 	.word	0x10624dd3
 8004fe0:	fdffe008 	.word	0xfdffe008

08004fe4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004fe4:	b490      	push	{r4, r7}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004fec:	4b1e      	ldr	r3, [pc, #120]	; (8005068 <SDMMC_GetCmdResp2+0x84>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a1e      	ldr	r2, [pc, #120]	; (800506c <SDMMC_GetCmdResp2+0x88>)
 8004ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff6:	0a5b      	lsrs	r3, r3, #9
 8004ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005000:	4623      	mov	r3, r4
 8005002:	1e5c      	subs	r4, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d102      	bne.n	800500e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005008:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800500c:	e026      	b.n	800505c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005012:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800501a:	2b00      	cmp	r3, #0
 800501c:	d0f0      	beq.n	8005000 <SDMMC_GetCmdResp2+0x1c>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1eb      	bne.n	8005000 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b00      	cmp	r3, #0
 8005032:	d004      	beq.n	800503e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2204      	movs	r2, #4
 8005038:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800503a:	2304      	movs	r3, #4
 800503c:	e00e      	b.n	800505c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d004      	beq.n	8005054 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005050:	2301      	movs	r3, #1
 8005052:	e003      	b.n	800505c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	22c5      	movs	r2, #197	; 0xc5
 8005058:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bc90      	pop	{r4, r7}
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	200000bc 	.word	0x200000bc
 800506c:	10624dd3 	.word	0x10624dd3

08005070 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005070:	b490      	push	{r4, r7}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005078:	4b18      	ldr	r3, [pc, #96]	; (80050dc <SDMMC_GetCmdResp3+0x6c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a18      	ldr	r2, [pc, #96]	; (80050e0 <SDMMC_GetCmdResp3+0x70>)
 800507e:	fba2 2303 	umull	r2, r3, r2, r3
 8005082:	0a5b      	lsrs	r3, r3, #9
 8005084:	f241 3288 	movw	r2, #5000	; 0x1388
 8005088:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800508c:	4623      	mov	r3, r4
 800508e:	1e5c      	subs	r4, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	d102      	bne.n	800509a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005094:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005098:	e01b      	b.n	80050d2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0f0      	beq.n	800508c <SDMMC_GetCmdResp3+0x1c>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1eb      	bne.n	800508c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d004      	beq.n	80050ca <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2204      	movs	r2, #4
 80050c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80050c6:	2304      	movs	r3, #4
 80050c8:	e003      	b.n	80050d2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	22c5      	movs	r2, #197	; 0xc5
 80050ce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bc90      	pop	{r4, r7}
 80050da:	4770      	bx	lr
 80050dc:	200000bc 	.word	0x200000bc
 80050e0:	10624dd3 	.word	0x10624dd3

080050e4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80050e4:	b590      	push	{r4, r7, lr}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	460b      	mov	r3, r1
 80050ee:	607a      	str	r2, [r7, #4]
 80050f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80050f2:	4b34      	ldr	r3, [pc, #208]	; (80051c4 <SDMMC_GetCmdResp6+0xe0>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a34      	ldr	r2, [pc, #208]	; (80051c8 <SDMMC_GetCmdResp6+0xe4>)
 80050f8:	fba2 2303 	umull	r2, r3, r2, r3
 80050fc:	0a5b      	lsrs	r3, r3, #9
 80050fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005102:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005106:	4623      	mov	r3, r4
 8005108:	1e5c      	subs	r4, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d102      	bne.n	8005114 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800510e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005112:	e052      	b.n	80051ba <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005118:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0f0      	beq.n	8005106 <SDMMC_GetCmdResp6+0x22>
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1eb      	bne.n	8005106 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005132:	f003 0304 	and.w	r3, r3, #4
 8005136:	2b00      	cmp	r3, #0
 8005138:	d004      	beq.n	8005144 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2204      	movs	r2, #4
 800513e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005140:	2304      	movs	r3, #4
 8005142:	e03a      	b.n	80051ba <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	2b00      	cmp	r3, #0
 800514e:	d004      	beq.n	800515a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2201      	movs	r2, #1
 8005154:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005156:	2301      	movs	r3, #1
 8005158:	e02f      	b.n	80051ba <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f7ff fc79 	bl	8004a52 <SDIO_GetCommandResponse>
 8005160:	4603      	mov	r3, r0
 8005162:	461a      	mov	r2, r3
 8005164:	7afb      	ldrb	r3, [r7, #11]
 8005166:	4293      	cmp	r3, r2
 8005168:	d001      	beq.n	800516e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800516a:	2301      	movs	r3, #1
 800516c:	e025      	b.n	80051ba <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	22c5      	movs	r2, #197	; 0xc5
 8005172:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005174:	2100      	movs	r1, #0
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f7ff fc78 	bl	8004a6c <SDIO_GetResponse>
 800517c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d106      	bne.n	8005196 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	0c1b      	lsrs	r3, r3, #16
 800518c:	b29a      	uxth	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005192:	2300      	movs	r3, #0
 8005194:	e011      	b.n	80051ba <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80051a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051a4:	e009      	b.n	80051ba <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80051b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051b4:	e001      	b.n	80051ba <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80051b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	371c      	adds	r7, #28
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd90      	pop	{r4, r7, pc}
 80051c2:	bf00      	nop
 80051c4:	200000bc 	.word	0x200000bc
 80051c8:	10624dd3 	.word	0x10624dd3

080051cc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80051cc:	b490      	push	{r4, r7}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80051d4:	4b21      	ldr	r3, [pc, #132]	; (800525c <SDMMC_GetCmdResp7+0x90>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a21      	ldr	r2, [pc, #132]	; (8005260 <SDMMC_GetCmdResp7+0x94>)
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	0a5b      	lsrs	r3, r3, #9
 80051e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80051e8:	4623      	mov	r3, r4
 80051ea:	1e5c      	subs	r4, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d102      	bne.n	80051f6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80051f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80051f4:	e02c      	b.n	8005250 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0f0      	beq.n	80051e8 <SDMMC_GetCmdResp7+0x1c>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1eb      	bne.n	80051e8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b00      	cmp	r3, #0
 800521a:	d004      	beq.n	8005226 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2204      	movs	r2, #4
 8005220:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005222:	2304      	movs	r3, #4
 8005224:	e014      	b.n	8005250 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d004      	beq.n	800523c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005238:	2301      	movs	r3, #1
 800523a:	e009      	b.n	8005250 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005244:	2b00      	cmp	r3, #0
 8005246:	d002      	beq.n	800524e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2240      	movs	r2, #64	; 0x40
 800524c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800524e:	2300      	movs	r3, #0
  
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bc90      	pop	{r4, r7}
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	200000bc 	.word	0x200000bc
 8005260:	10624dd3 	.word	0x10624dd3

08005264 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005264:	b084      	sub	sp, #16
 8005266:	b580      	push	{r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	f107 001c 	add.w	r0, r7, #28
 8005272:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005278:	2b01      	cmp	r3, #1
 800527a:	d122      	bne.n	80052c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005280:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d105      	bne.n	80052b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f001 fa76 	bl	80067a8 <USB_CoreReset>
 80052bc:	4603      	mov	r3, r0
 80052be:	73fb      	strb	r3, [r7, #15]
 80052c0:	e01a      	b.n	80052f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f001 fa6a 	bl	80067a8 <USB_CoreReset>
 80052d4:	4603      	mov	r3, r0
 80052d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80052d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	639a      	str	r2, [r3, #56]	; 0x38
 80052ea:	e005      	b.n	80052f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80052f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d10b      	bne.n	8005316 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f043 0206 	orr.w	r2, r3, #6
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f043 0220 	orr.w	r2, r3, #32
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005316:	7bfb      	ldrb	r3, [r7, #15]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005322:	b004      	add	sp, #16
 8005324:	4770      	bx	lr
	...

08005328 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	4613      	mov	r3, r2
 8005334:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005336:	79fb      	ldrb	r3, [r7, #7]
 8005338:	2b02      	cmp	r3, #2
 800533a:	d165      	bne.n	8005408 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4a41      	ldr	r2, [pc, #260]	; (8005444 <USB_SetTurnaroundTime+0x11c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d906      	bls.n	8005352 <USB_SetTurnaroundTime+0x2a>
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	4a40      	ldr	r2, [pc, #256]	; (8005448 <USB_SetTurnaroundTime+0x120>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d802      	bhi.n	8005352 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800534c:	230f      	movs	r3, #15
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	e062      	b.n	8005418 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	4a3c      	ldr	r2, [pc, #240]	; (8005448 <USB_SetTurnaroundTime+0x120>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d906      	bls.n	8005368 <USB_SetTurnaroundTime+0x40>
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	4a3b      	ldr	r2, [pc, #236]	; (800544c <USB_SetTurnaroundTime+0x124>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d802      	bhi.n	8005368 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005362:	230e      	movs	r3, #14
 8005364:	617b      	str	r3, [r7, #20]
 8005366:	e057      	b.n	8005418 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4a38      	ldr	r2, [pc, #224]	; (800544c <USB_SetTurnaroundTime+0x124>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d906      	bls.n	800537e <USB_SetTurnaroundTime+0x56>
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4a37      	ldr	r2, [pc, #220]	; (8005450 <USB_SetTurnaroundTime+0x128>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d802      	bhi.n	800537e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005378:	230d      	movs	r3, #13
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	e04c      	b.n	8005418 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	4a33      	ldr	r2, [pc, #204]	; (8005450 <USB_SetTurnaroundTime+0x128>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d906      	bls.n	8005394 <USB_SetTurnaroundTime+0x6c>
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	4a32      	ldr	r2, [pc, #200]	; (8005454 <USB_SetTurnaroundTime+0x12c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d802      	bhi.n	8005394 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800538e:	230c      	movs	r3, #12
 8005390:	617b      	str	r3, [r7, #20]
 8005392:	e041      	b.n	8005418 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4a2f      	ldr	r2, [pc, #188]	; (8005454 <USB_SetTurnaroundTime+0x12c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d906      	bls.n	80053aa <USB_SetTurnaroundTime+0x82>
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4a2e      	ldr	r2, [pc, #184]	; (8005458 <USB_SetTurnaroundTime+0x130>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d802      	bhi.n	80053aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80053a4:	230b      	movs	r3, #11
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	e036      	b.n	8005418 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	4a2a      	ldr	r2, [pc, #168]	; (8005458 <USB_SetTurnaroundTime+0x130>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d906      	bls.n	80053c0 <USB_SetTurnaroundTime+0x98>
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	4a29      	ldr	r2, [pc, #164]	; (800545c <USB_SetTurnaroundTime+0x134>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d802      	bhi.n	80053c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80053ba:	230a      	movs	r3, #10
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	e02b      	b.n	8005418 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4a26      	ldr	r2, [pc, #152]	; (800545c <USB_SetTurnaroundTime+0x134>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d906      	bls.n	80053d6 <USB_SetTurnaroundTime+0xae>
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	4a25      	ldr	r2, [pc, #148]	; (8005460 <USB_SetTurnaroundTime+0x138>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d802      	bhi.n	80053d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80053d0:	2309      	movs	r3, #9
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	e020      	b.n	8005418 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	4a21      	ldr	r2, [pc, #132]	; (8005460 <USB_SetTurnaroundTime+0x138>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d906      	bls.n	80053ec <USB_SetTurnaroundTime+0xc4>
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	4a20      	ldr	r2, [pc, #128]	; (8005464 <USB_SetTurnaroundTime+0x13c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d802      	bhi.n	80053ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80053e6:	2308      	movs	r3, #8
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	e015      	b.n	8005418 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4a1d      	ldr	r2, [pc, #116]	; (8005464 <USB_SetTurnaroundTime+0x13c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d906      	bls.n	8005402 <USB_SetTurnaroundTime+0xda>
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	4a1c      	ldr	r2, [pc, #112]	; (8005468 <USB_SetTurnaroundTime+0x140>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d802      	bhi.n	8005402 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80053fc:	2307      	movs	r3, #7
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	e00a      	b.n	8005418 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005402:	2306      	movs	r3, #6
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	e007      	b.n	8005418 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005408:	79fb      	ldrb	r3, [r7, #7]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d102      	bne.n	8005414 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800540e:	2309      	movs	r3, #9
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	e001      	b.n	8005418 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005414:	2309      	movs	r3, #9
 8005416:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	68da      	ldr	r2, [r3, #12]
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	029b      	lsls	r3, r3, #10
 800542c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005430:	431a      	orrs	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	371c      	adds	r7, #28
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	00d8acbf 	.word	0x00d8acbf
 8005448:	00e4e1bf 	.word	0x00e4e1bf
 800544c:	00f423ff 	.word	0x00f423ff
 8005450:	0106737f 	.word	0x0106737f
 8005454:	011a499f 	.word	0x011a499f
 8005458:	01312cff 	.word	0x01312cff
 800545c:	014ca43f 	.word	0x014ca43f
 8005460:	016e35ff 	.word	0x016e35ff
 8005464:	01a6ab1f 	.word	0x01a6ab1f
 8005468:	01e847ff 	.word	0x01e847ff

0800546c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f043 0201 	orr.w	r2, r3, #1
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f023 0201 	bic.w	r2, r3, #1
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	460b      	mov	r3, r1
 80054ba:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d106      	bne.n	80054dc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	60da      	str	r2, [r3, #12]
 80054da:	e00b      	b.n	80054f4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80054dc:	78fb      	ldrb	r3, [r7, #3]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d106      	bne.n	80054f0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60da      	str	r2, [r3, #12]
 80054ee:	e001      	b.n	80054f4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e003      	b.n	80054fc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80054f4:	2032      	movs	r0, #50	; 0x32
 80054f6:	f7fb f877 	bl	80005e8 <HAL_Delay>

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005504:	b084      	sub	sp, #16
 8005506:	b580      	push	{r7, lr}
 8005508:	b086      	sub	sp, #24
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005512:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800551e:	2300      	movs	r3, #0
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	e009      	b.n	8005538 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	3340      	adds	r3, #64	; 0x40
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	2200      	movs	r2, #0
 8005530:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	3301      	adds	r3, #1
 8005536:	613b      	str	r3, [r7, #16]
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	2b0e      	cmp	r3, #14
 800553c:	d9f2      	bls.n	8005524 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800553e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005540:	2b00      	cmp	r3, #0
 8005542:	d112      	bne.n	800556a <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005548:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	e005      	b.n	8005576 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800557c:	461a      	mov	r2, r3
 800557e:	2300      	movs	r3, #0
 8005580:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005588:	4619      	mov	r1, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005590:	461a      	mov	r2, r3
 8005592:	680b      	ldr	r3, [r1, #0]
 8005594:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005598:	2b01      	cmp	r3, #1
 800559a:	d10c      	bne.n	80055b6 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800559c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d104      	bne.n	80055ac <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80055a2:	2100      	movs	r1, #0
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f961 	bl	800586c <USB_SetDevSpeed>
 80055aa:	e008      	b.n	80055be <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80055ac:	2101      	movs	r1, #1
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f95c 	bl	800586c <USB_SetDevSpeed>
 80055b4:	e003      	b.n	80055be <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80055b6:	2103      	movs	r1, #3
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f957 	bl	800586c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80055be:	2110      	movs	r1, #16
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f90b 	bl	80057dc <USB_FlushTxFifo>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 f929 	bl	8005828 <USB_FlushRxFifo>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e6:	461a      	mov	r2, r3
 80055e8:	2300      	movs	r3, #0
 80055ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f2:	461a      	mov	r2, r3
 80055f4:	2300      	movs	r3, #0
 80055f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fe:	461a      	mov	r2, r3
 8005600:	2300      	movs	r3, #0
 8005602:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005604:	2300      	movs	r3, #0
 8005606:	613b      	str	r3, [r7, #16]
 8005608:	e043      	b.n	8005692 <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	4413      	add	r3, r2
 8005612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800561c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005620:	d118      	bne.n	8005654 <USB_DevInit+0x150>
    {
      if (i == 0U)
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10a      	bne.n	800563e <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005634:	461a      	mov	r2, r3
 8005636:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800563a:	6013      	str	r3, [r2, #0]
 800563c:	e013      	b.n	8005666 <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	4413      	add	r3, r2
 8005646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564a:	461a      	mov	r2, r3
 800564c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	e008      	b.n	8005666 <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005660:	461a      	mov	r2, r3
 8005662:	2300      	movs	r3, #0
 8005664:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4413      	add	r3, r2
 800566e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005672:	461a      	mov	r2, r3
 8005674:	2300      	movs	r3, #0
 8005676:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005684:	461a      	mov	r2, r3
 8005686:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800568a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	3301      	adds	r3, #1
 8005690:	613b      	str	r3, [r7, #16]
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	429a      	cmp	r2, r3
 8005698:	d3b7      	bcc.n	800560a <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800569a:	2300      	movs	r3, #0
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	e043      	b.n	8005728 <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056b6:	d118      	bne.n	80056ea <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10a      	bne.n	80056d4 <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ca:	461a      	mov	r2, r3
 80056cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	e013      	b.n	80056fc <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e0:	461a      	mov	r2, r3
 80056e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056e6:	6013      	str	r3, [r2, #0]
 80056e8:	e008      	b.n	80056fc <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f6:	461a      	mov	r2, r3
 80056f8:	2300      	movs	r3, #0
 80056fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005708:	461a      	mov	r2, r3
 800570a:	2300      	movs	r3, #0
 800570c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571a:	461a      	mov	r2, r3
 800571c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005720:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	3301      	adds	r3, #1
 8005726:	613b      	str	r3, [r7, #16]
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	429a      	cmp	r2, r3
 800572e:	d3b7      	bcc.n	80056a0 <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800573e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005742:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8005744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005746:	2b01      	cmp	r3, #1
 8005748:	d111      	bne.n	800576e <USB_DevInit+0x26a>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005750:	461a      	mov	r2, r3
 8005752:	4b20      	ldr	r3, [pc, #128]	; (80057d4 <USB_DevInit+0x2d0>)
 8005754:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005768:	f043 0303 	orr.w	r3, r3, #3
 800576c:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800577a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	2b00      	cmp	r3, #0
 8005780:	d105      	bne.n	800578e <USB_DevInit+0x28a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	f043 0210 	orr.w	r2, r3, #16
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699a      	ldr	r2, [r3, #24]
 8005792:	4b11      	ldr	r3, [pc, #68]	; (80057d8 <USB_DevInit+0x2d4>)
 8005794:	4313      	orrs	r3, r2
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800579a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800579c:	2b00      	cmp	r3, #0
 800579e:	d005      	beq.n	80057ac <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	f043 0208 	orr.w	r2, r3, #8
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80057ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d107      	bne.n	80057c2 <USB_DevInit+0x2be>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057ba:	f043 0304 	orr.w	r3, r3, #4
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80057c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3718      	adds	r7, #24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057ce:	b004      	add	sp, #16
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	00800100 	.word	0x00800100
 80057d8:	803c3800 	.word	0x803c3800

080057dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	019b      	lsls	r3, r3, #6
 80057ee:	f043 0220 	orr.w	r2, r3, #32
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	3301      	adds	r3, #1
 80057fa:	60fb      	str	r3, [r7, #12]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4a09      	ldr	r2, [pc, #36]	; (8005824 <USB_FlushTxFifo+0x48>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d901      	bls.n	8005808 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e006      	b.n	8005816 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	f003 0320 	and.w	r3, r3, #32
 8005810:	2b20      	cmp	r3, #32
 8005812:	d0f0      	beq.n	80057f6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	00030d40 	.word	0x00030d40

08005828 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005830:	2300      	movs	r3, #0
 8005832:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2210      	movs	r2, #16
 8005838:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	3301      	adds	r3, #1
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4a09      	ldr	r2, [pc, #36]	; (8005868 <USB_FlushRxFifo+0x40>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d901      	bls.n	800584c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e006      	b.n	800585a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	f003 0310 	and.w	r3, r3, #16
 8005854:	2b10      	cmp	r3, #16
 8005856:	d0f0      	beq.n	800583a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	00030d40 	.word	0x00030d40

0800586c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	460b      	mov	r3, r1
 8005876:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	78fb      	ldrb	r3, [r7, #3]
 8005886:	68f9      	ldr	r1, [r7, #12]
 8005888:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800588c:	4313      	orrs	r3, r2
 800588e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800589e:	b480      	push	{r7}
 80058a0:	b087      	sub	sp, #28
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f003 0306 	and.w	r3, r3, #6
 80058b6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d102      	bne.n	80058c4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80058be:	2300      	movs	r3, #0
 80058c0:	75fb      	strb	r3, [r7, #23]
 80058c2:	e00a      	b.n	80058da <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d002      	beq.n	80058d0 <USB_GetDevSpeed+0x32>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2b06      	cmp	r3, #6
 80058ce:	d102      	bne.n	80058d6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80058d0:	2302      	movs	r3, #2
 80058d2:	75fb      	strb	r3, [r7, #23]
 80058d4:	e001      	b.n	80058da <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80058d6:	230f      	movs	r3, #15
 80058d8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80058da:	7dfb      	ldrb	r3, [r7, #23]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	371c      	adds	r7, #28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	785b      	ldrb	r3, [r3, #1]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d13a      	bne.n	800597a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590a:	69da      	ldr	r2, [r3, #28]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	f003 030f 	and.w	r3, r3, #15
 8005914:	2101      	movs	r1, #1
 8005916:	fa01 f303 	lsl.w	r3, r1, r3
 800591a:	b29b      	uxth	r3, r3
 800591c:	68f9      	ldr	r1, [r7, #12]
 800591e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005922:	4313      	orrs	r3, r2
 8005924:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4413      	add	r3, r2
 800592e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d155      	bne.n	80059e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	78db      	ldrb	r3, [r3, #3]
 8005956:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005958:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	059b      	lsls	r3, r3, #22
 800595e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005960:	4313      	orrs	r3, r2
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	0151      	lsls	r1, r2, #5
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	440a      	add	r2, r1
 800596a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800596e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005976:	6013      	str	r3, [r2, #0]
 8005978:	e036      	b.n	80059e8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005980:	69da      	ldr	r2, [r3, #28]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	f003 030f 	and.w	r3, r3, #15
 800598a:	2101      	movs	r1, #1
 800598c:	fa01 f303 	lsl.w	r3, r1, r3
 8005990:	041b      	lsls	r3, r3, #16
 8005992:	68f9      	ldr	r1, [r7, #12]
 8005994:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005998:	4313      	orrs	r3, r2
 800599a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d11a      	bne.n	80059e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	015a      	lsls	r2, r3, #5
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	78db      	ldrb	r3, [r3, #3]
 80059cc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059ce:	430b      	orrs	r3, r1
 80059d0:	4313      	orrs	r3, r2
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	0151      	lsls	r1, r2, #5
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	440a      	add	r2, r1
 80059da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059e6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
	...

080059f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	785b      	ldrb	r3, [r3, #1]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d135      	bne.n	8005a80 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	f003 030f 	and.w	r3, r3, #15
 8005a24:	2101      	movs	r1, #1
 8005a26:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	43db      	mvns	r3, r3
 8005a2e:	68f9      	ldr	r1, [r7, #12]
 8005a30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a34:	4013      	ands	r3, r2
 8005a36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3e:	69da      	ldr	r2, [r3, #28]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	f003 030f 	and.w	r3, r3, #15
 8005a48:	2101      	movs	r1, #1
 8005a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	43db      	mvns	r3, r3
 8005a52:	68f9      	ldr	r1, [r7, #12]
 8005a54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a58:	4013      	ands	r3, r2
 8005a5a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	0159      	lsls	r1, r3, #5
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	440b      	add	r3, r1
 8005a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a76:	4619      	mov	r1, r3
 8005a78:	4b1f      	ldr	r3, [pc, #124]	; (8005af8 <USB_DeactivateEndpoint+0x100>)
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	600b      	str	r3, [r1, #0]
 8005a7e:	e034      	b.n	8005aea <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	f003 030f 	and.w	r3, r3, #15
 8005a90:	2101      	movs	r1, #1
 8005a92:	fa01 f303 	lsl.w	r3, r1, r3
 8005a96:	041b      	lsls	r3, r3, #16
 8005a98:	43db      	mvns	r3, r3
 8005a9a:	68f9      	ldr	r1, [r7, #12]
 8005a9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aaa:	69da      	ldr	r2, [r3, #28]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	f003 030f 	and.w	r3, r3, #15
 8005ab4:	2101      	movs	r1, #1
 8005ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aba:	041b      	lsls	r3, r3, #16
 8005abc:	43db      	mvns	r3, r3
 8005abe:	68f9      	ldr	r1, [r7, #12]
 8005ac0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	0159      	lsls	r1, r3, #5
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	440b      	add	r3, r1
 8005ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	4b05      	ldr	r3, [pc, #20]	; (8005afc <USB_DeactivateEndpoint+0x104>)
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	ec337800 	.word	0xec337800
 8005afc:	eff37800 	.word	0xeff37800

08005b00 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08a      	sub	sp, #40	; 0x28
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	785b      	ldrb	r3, [r3, #1]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	f040 815c 	bne.w	8005dda <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d132      	bne.n	8005b90 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	0151      	lsls	r1, r2, #5
 8005b3c:	69fa      	ldr	r2, [r7, #28]
 8005b3e:	440a      	add	r2, r1
 8005b40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	0151      	lsls	r1, r2, #5
 8005b60:	69fa      	ldr	r2, [r7, #28]
 8005b62:	440a      	add	r2, r1
 8005b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	0151      	lsls	r1, r2, #5
 8005b80:	69fa      	ldr	r2, [r7, #28]
 8005b82:	440a      	add	r2, r1
 8005b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b88:	0cdb      	lsrs	r3, r3, #19
 8005b8a:	04db      	lsls	r3, r3, #19
 8005b8c:	6113      	str	r3, [r2, #16]
 8005b8e:	e074      	b.n	8005c7a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	0151      	lsls	r1, r2, #5
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	440a      	add	r2, r1
 8005ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005baa:	0cdb      	lsrs	r3, r3, #19
 8005bac:	04db      	lsls	r3, r3, #19
 8005bae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	0151      	lsls	r1, r2, #5
 8005bc2:	69fa      	ldr	r2, [r7, #28]
 8005bc4:	440a      	add	r2, r1
 8005bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be0:	691a      	ldr	r2, [r3, #16]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	6959      	ldr	r1, [r3, #20]
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	440b      	add	r3, r1
 8005bec:	1e59      	subs	r1, r3, #1
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bf6:	04d9      	lsls	r1, r3, #19
 8005bf8:	4b9d      	ldr	r3, [pc, #628]	; (8005e70 <USB_EPStartXfer+0x370>)
 8005bfa:	400b      	ands	r3, r1
 8005bfc:	69b9      	ldr	r1, [r7, #24]
 8005bfe:	0148      	lsls	r0, r1, #5
 8005c00:	69f9      	ldr	r1, [r7, #28]
 8005c02:	4401      	add	r1, r0
 8005c04:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c18:	691a      	ldr	r2, [r3, #16]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c22:	69b9      	ldr	r1, [r7, #24]
 8005c24:	0148      	lsls	r0, r1, #5
 8005c26:	69f9      	ldr	r1, [r7, #28]
 8005c28:	4401      	add	r1, r0
 8005c2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	78db      	ldrb	r3, [r3, #3]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d11f      	bne.n	8005c7a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	69ba      	ldr	r2, [r7, #24]
 8005c4a:	0151      	lsls	r1, r2, #5
 8005c4c:	69fa      	ldr	r2, [r7, #28]
 8005c4e:	440a      	add	r2, r1
 8005c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c54:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005c58:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	0151      	lsls	r1, r2, #5
 8005c6c:	69fa      	ldr	r2, [r7, #28]
 8005c6e:	440a      	add	r2, r1
 8005c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c78:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005c7a:	79fb      	ldrb	r3, [r7, #7]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d14b      	bne.n	8005d18 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d009      	beq.n	8005c9c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c94:	461a      	mov	r2, r3
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	78db      	ldrb	r3, [r3, #3]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d128      	bne.n	8005cf6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d110      	bne.n	8005cd6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	0151      	lsls	r1, r2, #5
 8005cc6:	69fa      	ldr	r2, [r7, #28]
 8005cc8:	440a      	add	r2, r1
 8005cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	e00f      	b.n	8005cf6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	0151      	lsls	r1, r2, #5
 8005ce8:	69fa      	ldr	r2, [r7, #28]
 8005cea:	440a      	add	r2, r1
 8005cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cf4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	0151      	lsls	r1, r2, #5
 8005d08:	69fa      	ldr	r2, [r7, #28]
 8005d0a:	440a      	add	r2, r1
 8005d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d14:	6013      	str	r3, [r2, #0]
 8005d16:	e12f      	b.n	8005f78 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	0151      	lsls	r1, r2, #5
 8005d2a:	69fa      	ldr	r2, [r7, #28]
 8005d2c:	440a      	add	r2, r1
 8005d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d36:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	78db      	ldrb	r3, [r3, #3]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d015      	beq.n	8005d6c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 8117 	beq.w	8005f78 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d60:	69f9      	ldr	r1, [r7, #28]
 8005d62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d66:	4313      	orrs	r3, r2
 8005d68:	634b      	str	r3, [r1, #52]	; 0x34
 8005d6a:	e105      	b.n	8005f78 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d110      	bne.n	8005d9e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	0151      	lsls	r1, r2, #5
 8005d8e:	69fa      	ldr	r2, [r7, #28]
 8005d90:	440a      	add	r2, r1
 8005d92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	e00f      	b.n	8005dbe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	0151      	lsls	r1, r2, #5
 8005db0:	69fa      	ldr	r2, [r7, #28]
 8005db2:	440a      	add	r2, r1
 8005db4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dbc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	68d9      	ldr	r1, [r3, #12]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	781a      	ldrb	r2, [r3, #0]
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	b298      	uxth	r0, r3
 8005dcc:	79fb      	ldrb	r3, [r7, #7]
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 fa2b 	bl	800622e <USB_WritePacket>
 8005dd8:	e0ce      	b.n	8005f78 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	0151      	lsls	r1, r2, #5
 8005dec:	69fa      	ldr	r2, [r7, #28]
 8005dee:	440a      	add	r2, r1
 8005df0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005df4:	0cdb      	lsrs	r3, r3, #19
 8005df6:	04db      	lsls	r3, r3, #19
 8005df8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	0151      	lsls	r1, r2, #5
 8005e0c:	69fa      	ldr	r2, [r7, #28]
 8005e0e:	440a      	add	r2, r1
 8005e10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e1c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d126      	bne.n	8005e74 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e32:	691a      	ldr	r2, [r3, #16]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e3c:	69b9      	ldr	r1, [r7, #24]
 8005e3e:	0148      	lsls	r0, r1, #5
 8005e40:	69f9      	ldr	r1, [r7, #28]
 8005e42:	4401      	add	r1, r0
 8005e44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	0151      	lsls	r1, r2, #5
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	440a      	add	r2, r1
 8005e62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e6a:	6113      	str	r3, [r2, #16]
 8005e6c:	e036      	b.n	8005edc <USB_EPStartXfer+0x3dc>
 8005e6e:	bf00      	nop
 8005e70:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	695a      	ldr	r2, [r3, #20]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	1e5a      	subs	r2, r3, #1
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e88:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e96:	691a      	ldr	r2, [r3, #16]
 8005e98:	8afb      	ldrh	r3, [r7, #22]
 8005e9a:	04d9      	lsls	r1, r3, #19
 8005e9c:	4b39      	ldr	r3, [pc, #228]	; (8005f84 <USB_EPStartXfer+0x484>)
 8005e9e:	400b      	ands	r3, r1
 8005ea0:	69b9      	ldr	r1, [r7, #24]
 8005ea2:	0148      	lsls	r0, r1, #5
 8005ea4:	69f9      	ldr	r1, [r7, #28]
 8005ea6:	4401      	add	r1, r0
 8005ea8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005eac:	4313      	orrs	r3, r2
 8005eae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebc:	691a      	ldr	r2, [r3, #16]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	8af9      	ldrh	r1, [r7, #22]
 8005ec4:	fb01 f303 	mul.w	r3, r1, r3
 8005ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ecc:	69b9      	ldr	r1, [r7, #24]
 8005ece:	0148      	lsls	r0, r1, #5
 8005ed0:	69f9      	ldr	r1, [r7, #28]
 8005ed2:	4401      	add	r1, r0
 8005ed4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005edc:	79fb      	ldrb	r3, [r7, #7]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d10d      	bne.n	8005efe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d009      	beq.n	8005efe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	68d9      	ldr	r1, [r3, #12]
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efa:	460a      	mov	r2, r1
 8005efc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	78db      	ldrb	r3, [r3, #3]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d128      	bne.n	8005f58 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d110      	bne.n	8005f38 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	0151      	lsls	r1, r2, #5
 8005f28:	69fa      	ldr	r2, [r7, #28]
 8005f2a:	440a      	add	r2, r1
 8005f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	e00f      	b.n	8005f58 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	0151      	lsls	r1, r2, #5
 8005f4a:	69fa      	ldr	r2, [r7, #28]
 8005f4c:	440a      	add	r2, r1
 8005f4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f56:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	0151      	lsls	r1, r2, #5
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	440a      	add	r2, r1
 8005f6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3720      	adds	r7, #32
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	1ff80000 	.word	0x1ff80000

08005f88 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	4613      	mov	r3, r2
 8005f94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	785b      	ldrb	r3, [r3, #1]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	f040 80cd 	bne.w	8006144 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d132      	bne.n	8006018 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	0151      	lsls	r1, r2, #5
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	440a      	add	r2, r1
 8005fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	0151      	lsls	r1, r2, #5
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	440a      	add	r2, r1
 8005fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ff4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	0151      	lsls	r1, r2, #5
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	440a      	add	r2, r1
 800600c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006010:	0cdb      	lsrs	r3, r3, #19
 8006012:	04db      	lsls	r3, r3, #19
 8006014:	6113      	str	r3, [r2, #16]
 8006016:	e04e      	b.n	80060b6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	0151      	lsls	r1, r2, #5
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	440a      	add	r2, r1
 800602e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006032:	0cdb      	lsrs	r3, r3, #19
 8006034:	04db      	lsls	r3, r3, #19
 8006036:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	0151      	lsls	r1, r2, #5
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	440a      	add	r2, r1
 800604e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006052:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006056:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800605a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	695a      	ldr	r2, [r3, #20]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	429a      	cmp	r2, r3
 8006066:	d903      	bls.n	8006070 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	0151      	lsls	r1, r2, #5
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	440a      	add	r2, r1
 8006086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800608a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800608e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800609c:	691a      	ldr	r2, [r3, #16]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060a6:	6939      	ldr	r1, [r7, #16]
 80060a8:	0148      	lsls	r0, r1, #5
 80060aa:	6979      	ldr	r1, [r7, #20]
 80060ac:	4401      	add	r1, r0
 80060ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80060b2:	4313      	orrs	r3, r2
 80060b4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80060b6:	79fb      	ldrb	r3, [r7, #7]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d11e      	bne.n	80060fa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d009      	beq.n	80060d8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d0:	461a      	mov	r2, r3
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	015a      	lsls	r2, r3, #5
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	4413      	add	r3, r2
 80060e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	0151      	lsls	r1, r2, #5
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	440a      	add	r2, r1
 80060ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060f6:	6013      	str	r3, [r2, #0]
 80060f8:	e092      	b.n	8006220 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	4413      	add	r3, r2
 8006102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	0151      	lsls	r1, r2, #5
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	440a      	add	r2, r1
 8006110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006114:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006118:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d07e      	beq.n	8006220 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	f003 030f 	and.w	r3, r3, #15
 8006132:	2101      	movs	r1, #1
 8006134:	fa01 f303 	lsl.w	r3, r1, r3
 8006138:	6979      	ldr	r1, [r7, #20]
 800613a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800613e:	4313      	orrs	r3, r2
 8006140:	634b      	str	r3, [r1, #52]	; 0x34
 8006142:	e06d      	b.n	8006220 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	0151      	lsls	r1, r2, #5
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	440a      	add	r2, r1
 800615a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800615e:	0cdb      	lsrs	r3, r3, #19
 8006160:	04db      	lsls	r3, r3, #19
 8006162:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	0151      	lsls	r1, r2, #5
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	440a      	add	r2, r1
 800617a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800617e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006182:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006186:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	0151      	lsls	r1, r2, #5
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	440a      	add	r2, r1
 80061ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c4:	691a      	ldr	r2, [r3, #16]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061ce:	6939      	ldr	r1, [r7, #16]
 80061d0:	0148      	lsls	r0, r1, #5
 80061d2:	6979      	ldr	r1, [r7, #20]
 80061d4:	4401      	add	r1, r0
 80061d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061da:	4313      	orrs	r3, r2
 80061dc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80061de:	79fb      	ldrb	r3, [r7, #7]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d10d      	bne.n	8006200 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d009      	beq.n	8006200 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	68d9      	ldr	r1, [r3, #12]
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fc:	460a      	mov	r2, r1
 80061fe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	0151      	lsls	r1, r2, #5
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	440a      	add	r2, r1
 8006216:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800621a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800621e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800622e:	b480      	push	{r7}
 8006230:	b089      	sub	sp, #36	; 0x24
 8006232:	af00      	add	r7, sp, #0
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	4611      	mov	r1, r2
 800623a:	461a      	mov	r2, r3
 800623c:	460b      	mov	r3, r1
 800623e:	71fb      	strb	r3, [r7, #7]
 8006240:	4613      	mov	r3, r2
 8006242:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800624c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006250:	2b00      	cmp	r3, #0
 8006252:	d11a      	bne.n	800628a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006254:	88bb      	ldrh	r3, [r7, #4]
 8006256:	3303      	adds	r3, #3
 8006258:	089b      	lsrs	r3, r3, #2
 800625a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800625c:	2300      	movs	r3, #0
 800625e:	61bb      	str	r3, [r7, #24]
 8006260:	e00f      	b.n	8006282 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006262:	79fb      	ldrb	r3, [r7, #7]
 8006264:	031a      	lsls	r2, r3, #12
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	4413      	add	r3, r2
 800626a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800626e:	461a      	mov	r2, r3
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	3304      	adds	r3, #4
 800627a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	3301      	adds	r3, #1
 8006280:	61bb      	str	r3, [r7, #24]
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	429a      	cmp	r2, r3
 8006288:	d3eb      	bcc.n	8006262 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3724      	adds	r7, #36	; 0x24
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006298:	b480      	push	{r7}
 800629a:	b089      	sub	sp, #36	; 0x24
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	4613      	mov	r3, r2
 80062a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80062ae:	88fb      	ldrh	r3, [r7, #6]
 80062b0:	3303      	adds	r3, #3
 80062b2:	089b      	lsrs	r3, r3, #2
 80062b4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80062b6:	2300      	movs	r3, #0
 80062b8:	61bb      	str	r3, [r7, #24]
 80062ba:	e00b      	b.n	80062d4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	3304      	adds	r3, #4
 80062cc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	3301      	adds	r3, #1
 80062d2:	61bb      	str	r3, [r7, #24]
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d3ef      	bcc.n	80062bc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80062dc:	69fb      	ldr	r3, [r7, #28]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3724      	adds	r7, #36	; 0x24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b085      	sub	sp, #20
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	785b      	ldrb	r3, [r3, #1]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d12c      	bne.n	8006360 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	db12      	blt.n	800633e <USB_EPSetStall+0x54>
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00f      	beq.n	800633e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	0151      	lsls	r1, r2, #5
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	440a      	add	r2, r1
 8006334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006338:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800633c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4413      	add	r3, r2
 8006346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	0151      	lsls	r1, r2, #5
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	440a      	add	r2, r1
 8006354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006358:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800635c:	6013      	str	r3, [r2, #0]
 800635e:	e02b      	b.n	80063b8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	4413      	add	r3, r2
 8006368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	db12      	blt.n	8006398 <USB_EPSetStall+0xae>
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00f      	beq.n	8006398 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4413      	add	r3, r2
 8006380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	0151      	lsls	r1, r2, #5
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	440a      	add	r2, r1
 800638e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006392:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006396:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	0151      	lsls	r1, r2, #5
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	440a      	add	r2, r1
 80063ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b085      	sub	sp, #20
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	785b      	ldrb	r3, [r3, #1]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d128      	bne.n	8006434 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	015a      	lsls	r2, r3, #5
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	0151      	lsls	r1, r2, #5
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	440a      	add	r2, r1
 80063f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006400:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	78db      	ldrb	r3, [r3, #3]
 8006406:	2b03      	cmp	r3, #3
 8006408:	d003      	beq.n	8006412 <USB_EPClearStall+0x4c>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	78db      	ldrb	r3, [r3, #3]
 800640e:	2b02      	cmp	r3, #2
 8006410:	d138      	bne.n	8006484 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	4413      	add	r3, r2
 800641a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	0151      	lsls	r1, r2, #5
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	440a      	add	r2, r1
 8006428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800642c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006430:	6013      	str	r3, [r2, #0]
 8006432:	e027      	b.n	8006484 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4413      	add	r3, r2
 800643c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	0151      	lsls	r1, r2, #5
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	440a      	add	r2, r1
 800644a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800644e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006452:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	78db      	ldrb	r3, [r3, #3]
 8006458:	2b03      	cmp	r3, #3
 800645a:	d003      	beq.n	8006464 <USB_EPClearStall+0x9e>
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	78db      	ldrb	r3, [r3, #3]
 8006460:	2b02      	cmp	r3, #2
 8006462:	d10f      	bne.n	8006484 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	0151      	lsls	r1, r2, #5
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	440a      	add	r2, r1
 800647a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800647e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006482:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006492:	b480      	push	{r7}
 8006494:	b085      	sub	sp, #20
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	460b      	mov	r3, r1
 800649c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80064b4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	78fb      	ldrb	r3, [r7, #3]
 80064c0:	011b      	lsls	r3, r3, #4
 80064c2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80064c6:	68f9      	ldr	r1, [r7, #12]
 80064c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064cc:	4313      	orrs	r3, r2
 80064ce:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b084      	sub	sp, #16
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064f8:	f023 0302 	bic.w	r3, r3, #2
 80064fc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80064fe:	2003      	movs	r0, #3
 8006500:	f7fa f872 	bl	80005e8 <HAL_Delay>

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006528:	f043 0302 	orr.w	r3, r3, #2
 800652c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800652e:	2003      	movs	r0, #3
 8006530:	f7fa f85a 	bl	80005e8 <HAL_Delay>

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800653e:	b480      	push	{r7}
 8006540:	b085      	sub	sp, #20
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	4013      	ands	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006556:	68fb      	ldr	r3, [r7, #12]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	4013      	ands	r3, r2
 8006586:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	0c1b      	lsrs	r3, r3, #16
}
 800658c:	4618      	mov	r0, r3
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	4013      	ands	r3, r2
 80065ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	b29b      	uxth	r3, r3
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	460b      	mov	r3, r1
 80065d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80065dc:	78fb      	ldrb	r3, [r7, #3]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	4013      	ands	r3, r2
 80065f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80065fa:	68bb      	ldr	r3, [r7, #8]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006608:	b480      	push	{r7}
 800660a:	b087      	sub	sp, #28
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	460b      	mov	r3, r1
 8006612:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800662a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800662c:	78fb      	ldrb	r3, [r7, #3]
 800662e:	f003 030f 	and.w	r3, r3, #15
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	fa22 f303 	lsr.w	r3, r2, r3
 8006638:	01db      	lsls	r3, r3, #7
 800663a:	b2db      	uxtb	r3, r3
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	4313      	orrs	r3, r2
 8006640:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006642:	78fb      	ldrb	r3, [r7, #3]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	4013      	ands	r3, r2
 8006654:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006656:	68bb      	ldr	r3, [r7, #8]
}
 8006658:	4618      	mov	r0, r3
 800665a:	371c      	adds	r7, #28
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	f003 0301 	and.w	r3, r3, #1
}
 8006674:	4618      	mov	r0, r3
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800669a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800669e:	f023 0307 	bic.w	r3, r3, #7
 80066a2:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f003 0306 	and.w	r3, r3, #6
 80066b0:	2b04      	cmp	r3, #4
 80066b2:	d109      	bne.n	80066c8 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c2:	f043 0303 	orr.w	r3, r3, #3
 80066c6:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
	...

080066ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	460b      	mov	r3, r1
 80066f6:	607a      	str	r2, [r7, #4]
 80066f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	333c      	adds	r3, #60	; 0x3c
 8006702:	3304      	adds	r3, #4
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	4a26      	ldr	r2, [pc, #152]	; (80067a4 <USB_EP0_OutStart+0xb8>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d90a      	bls.n	8006726 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800671c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006720:	d101      	bne.n	8006726 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	e037      	b.n	8006796 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800672c:	461a      	mov	r2, r3
 800672e:	2300      	movs	r3, #0
 8006730:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006740:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006744:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006754:	f043 0318 	orr.w	r3, r3, #24
 8006758:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006768:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800676c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800676e:	7afb      	ldrb	r3, [r7, #11]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d10f      	bne.n	8006794 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677a:	461a      	mov	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800678e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006792:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	371c      	adds	r7, #28
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	4f54300a 	.word	0x4f54300a

080067a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	3301      	adds	r3, #1
 80067b8:	60fb      	str	r3, [r7, #12]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	4a13      	ldr	r2, [pc, #76]	; (800680c <USB_CoreReset+0x64>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d901      	bls.n	80067c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e01b      	b.n	80067fe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	daf2      	bge.n	80067b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067ce:	2300      	movs	r3, #0
 80067d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f043 0201 	orr.w	r2, r3, #1
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	3301      	adds	r3, #1
 80067e2:	60fb      	str	r3, [r7, #12]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	4a09      	ldr	r2, [pc, #36]	; (800680c <USB_CoreReset+0x64>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d901      	bls.n	80067f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e006      	b.n	80067fe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d0f0      	beq.n	80067de <USB_CoreReset+0x36>

  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	00030d40 	.word	0x00030d40

08006810 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_AUDIO_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	460b      	mov	r3, r1
 800681a:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef   *haudio;

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 800681c:	2358      	movs	r3, #88	; 0x58
 800681e:	2201      	movs	r2, #1
 8006820:	2101      	movs	r1, #1
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f002 fbf9 	bl	800901a <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Allocate Audio structure */
  pdev->pClassData = USBD_malloc(sizeof (USBD_AUDIO_HandleTypeDef));
 8006830:	f641 30d0 	movw	r0, #7120	; 0x1bd0
 8006834:	f002 fef4 	bl	8009620 <malloc>
 8006838:	4603      	mov	r3, r0
 800683a:	461a      	mov	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <USBD_AUDIO_Init+0x40>
  {
    return USBD_FAIL;
 800684c:	2302      	movs	r3, #2
 800684e:	e034      	b.n	80068ba <USBD_AUDIO_Init+0xaa>
  }
  else
  {
    haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006856:	60fb      	str	r3, [r7, #12]
    haudio->alt_setting = 0U;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	601a      	str	r2, [r3, #0]
    haudio->offset = AUDIO_OFFSET_UNKNOWN;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8006864:	3304      	adds	r3, #4
 8006866:	2203      	movs	r2, #3
 8006868:	701a      	strb	r2, [r3, #0]
    haudio->wr_ptr = 0U;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8006870:	3308      	adds	r3, #8
 8006872:	2200      	movs	r2, #0
 8006874:	801a      	strh	r2, [r3, #0]
    haudio->rd_ptr = 0U;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800687c:	3306      	adds	r3, #6
 800687e:	2200      	movs	r2, #0
 8006880:	801a      	strh	r2, [r3, #0]
    haudio->rd_enable = 0U;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8006888:	3305      	adds	r3, #5
 800688a:	2200      	movs	r2, #0
 800688c:	701a      	strb	r2, [r3, #0]

    /* Initialize the Audio output Hardware layer */
    if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2200      	movs	r2, #0
 8006898:	2146      	movs	r1, #70	; 0x46
 800689a:	f245 6054 	movw	r0, #22100	; 0x5654
 800689e:	4798      	blx	r3
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <USBD_AUDIO_Init+0x9a>
                                                         AUDIO_DEFAULT_VOLUME,
                                                         0U) != 0)
    {
      return USBD_FAIL;
 80068a6:	2302      	movs	r3, #2
 80068a8:	e007      	b.n	80068ba <USBD_AUDIO_Init+0xaa>
    }

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	1d1a      	adds	r2, r3, #4
 80068ae:	2358      	movs	r3, #88	; 0x58
 80068b0:	2101      	movs	r1, #1
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f002 fca2 	bl	80091fc <USBD_LL_PrepareReceive>
                           AUDIO_OUT_PACKET);
  }
  return USBD_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <USBD_AUDIO_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b082      	sub	sp, #8
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	460b      	mov	r3, r1
 80068cc:	70fb      	strb	r3, [r7, #3]

  /* Open EP OUT */
  USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 80068ce:	2101      	movs	r1, #1
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f002 fbc8 	bl	8009066 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00f      	beq.n	8006908 <USBD_AUDIO_DeInit+0x46>
  {
   ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	2000      	movs	r0, #0
 80068f2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80068fa:	4618      	mov	r0, r3
 80068fc:	f002 fe98 	bl	8009630 <free>
    pdev->pClassData = NULL;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return USBD_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
	...

08006914 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_AUDIO_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b086      	sub	sp, #24
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	813b      	strh	r3, [r7, #8]
  uint8_t ret = USBD_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800692c:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006936:	2b00      	cmp	r3, #0
 8006938:	d01a      	beq.n	8006970 <USBD_AUDIO_Setup+0x5c>
 800693a:	2b20      	cmp	r3, #32
 800693c:	f040 809c 	bne.w	8006a78 <USBD_AUDIO_Setup+0x164>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	785b      	ldrb	r3, [r3, #1]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d006      	beq.n	8006956 <USBD_AUDIO_Setup+0x42>
 8006948:	2b81      	cmp	r3, #129	; 0x81
 800694a:	d109      	bne.n	8006960 <USBD_AUDIO_Setup+0x4c>
    {
    case AUDIO_REQ_GET_CUR:
      AUDIO_REQ_GetCurrent(pdev, req);
 800694c:	6839      	ldr	r1, [r7, #0]
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f985 	bl	8006c5e <AUDIO_REQ_GetCurrent>
      break;
 8006954:	e00b      	b.n	800696e <USBD_AUDIO_Setup+0x5a>

    case AUDIO_REQ_SET_CUR:
      AUDIO_REQ_SetCurrent(pdev, req);
 8006956:	6839      	ldr	r1, [r7, #0]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 f9a0 	bl	8006c9e <AUDIO_REQ_SetCurrent>
      break;
 800695e:	e006      	b.n	800696e <USBD_AUDIO_Setup+0x5a>

    default:
      USBD_CtlError (pdev, req);
 8006960:	6839      	ldr	r1, [r7, #0]
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f001 f979 	bl	8007c5a <USBD_CtlError>
      ret = USBD_FAIL;
 8006968:	2302      	movs	r3, #2
 800696a:	75fb      	strb	r3, [r7, #23]
      break;
 800696c:	bf00      	nop
    }
    break;
 800696e:	e08a      	b.n	8006a86 <USBD_AUDIO_Setup+0x172>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	785b      	ldrb	r3, [r3, #1]
 8006974:	2b0b      	cmp	r3, #11
 8006976:	d876      	bhi.n	8006a66 <USBD_AUDIO_Setup+0x152>
 8006978:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <USBD_AUDIO_Setup+0x6c>)
 800697a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697e:	bf00      	nop
 8006980:	080069b1 	.word	0x080069b1
 8006984:	08006a67 	.word	0x08006a67
 8006988:	08006a67 	.word	0x08006a67
 800698c:	08006a67 	.word	0x08006a67
 8006990:	08006a67 	.word	0x08006a67
 8006994:	08006a67 	.word	0x08006a67
 8006998:	080069d9 	.word	0x080069d9
 800699c:	08006a67 	.word	0x08006a67
 80069a0:	08006a67 	.word	0x08006a67
 80069a4:	08006a67 	.word	0x08006a67
 80069a8:	08006a03 	.word	0x08006a03
 80069ac:	08006a29 	.word	0x08006a29
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	d107      	bne.n	80069ca <USBD_AUDIO_Setup+0xb6>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80069ba:	f107 0308 	add.w	r3, r7, #8
 80069be:	2202      	movs	r2, #2
 80069c0:	4619      	mov	r1, r3
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f001 f9b4 	bl	8007d30 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
                         ret = USBD_FAIL;
      }
      break;
 80069c8:	e055      	b.n	8006a76 <USBD_AUDIO_Setup+0x162>
        USBD_CtlError (pdev, req);
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f001 f944 	bl	8007c5a <USBD_CtlError>
                         ret = USBD_FAIL;
 80069d2:	2302      	movs	r3, #2
 80069d4:	75fb      	strb	r3, [r7, #23]
      break;
 80069d6:	e04e      	b.n	8006a76 <USBD_AUDIO_Setup+0x162>

    case USB_REQ_GET_DESCRIPTOR:
      if( (req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	885b      	ldrh	r3, [r3, #2]
 80069dc:	0a1b      	lsrs	r3, r3, #8
 80069de:	b29b      	uxth	r3, r3
 80069e0:	2b21      	cmp	r3, #33	; 0x21
 80069e2:	d147      	bne.n	8006a74 <USBD_AUDIO_Setup+0x160>
      {
        pbuf = USBD_AUDIO_CfgDesc + 18;
 80069e4:	4b2a      	ldr	r3, [pc, #168]	; (8006a90 <USBD_AUDIO_Setup+0x17c>)
 80069e6:	60fb      	str	r3, [r7, #12]
        len = MIN(USB_AUDIO_DESC_SIZ , req->wLength);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	88db      	ldrh	r3, [r3, #6]
 80069ec:	2b09      	cmp	r3, #9
 80069ee:	bf28      	it	cs
 80069f0:	2309      	movcs	r3, #9
 80069f2:	817b      	strh	r3, [r7, #10]

        USBD_CtlSendData (pdev, pbuf, len);
 80069f4:	897b      	ldrh	r3, [r7, #10]
 80069f6:	461a      	mov	r2, r3
 80069f8:	68f9      	ldr	r1, [r7, #12]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f001 f998 	bl	8007d30 <USBD_CtlSendData>
      }
      break;
 8006a00:	e038      	b.n	8006a74 <USBD_AUDIO_Setup+0x160>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006a08:	2b03      	cmp	r3, #3
 8006a0a:	d106      	bne.n	8006a1a <USBD_AUDIO_Setup+0x106>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&haudio->alt_setting, 1U);
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	4619      	mov	r1, r3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f001 f98c 	bl	8007d30 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006a18:	e02d      	b.n	8006a76 <USBD_AUDIO_Setup+0x162>
        USBD_CtlError (pdev, req);
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f001 f91c 	bl	8007c5a <USBD_CtlError>
        ret = USBD_FAIL;
 8006a22:	2302      	movs	r3, #2
 8006a24:	75fb      	strb	r3, [r7, #23]
      break;
 8006a26:	e026      	b.n	8006a76 <USBD_AUDIO_Setup+0x162>

    case USB_REQ_SET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006a2e:	2b03      	cmp	r3, #3
 8006a30:	d112      	bne.n	8006a58 <USBD_AUDIO_Setup+0x144>
      {
         if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	885b      	ldrh	r3, [r3, #2]
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d806      	bhi.n	8006a4a <USBD_AUDIO_Setup+0x136>
         {
           haudio->alt_setting = (uint8_t)(req->wValue);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	885b      	ldrh	r3, [r3, #2]
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	461a      	mov	r2, r3
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	601a      	str	r2, [r3, #0]
      else
      {
        USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006a48:	e015      	b.n	8006a76 <USBD_AUDIO_Setup+0x162>
           USBD_CtlError (pdev, req);
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f001 f904 	bl	8007c5a <USBD_CtlError>
           ret = USBD_FAIL;
 8006a52:	2302      	movs	r3, #2
 8006a54:	75fb      	strb	r3, [r7, #23]
      break;
 8006a56:	e00e      	b.n	8006a76 <USBD_AUDIO_Setup+0x162>
        USBD_CtlError (pdev, req);
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f001 f8fd 	bl	8007c5a <USBD_CtlError>
        ret = USBD_FAIL;
 8006a60:	2302      	movs	r3, #2
 8006a62:	75fb      	strb	r3, [r7, #23]
      break;
 8006a64:	e007      	b.n	8006a76 <USBD_AUDIO_Setup+0x162>

    default:
      USBD_CtlError (pdev, req);
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f001 f8f6 	bl	8007c5a <USBD_CtlError>
      ret = USBD_FAIL;
 8006a6e:	2302      	movs	r3, #2
 8006a70:	75fb      	strb	r3, [r7, #23]
      break;
 8006a72:	e000      	b.n	8006a76 <USBD_AUDIO_Setup+0x162>
      break;
 8006a74:	bf00      	nop
    }
    break;
 8006a76:	e006      	b.n	8006a86 <USBD_AUDIO_Setup+0x172>
  default:
    USBD_CtlError (pdev, req);
 8006a78:	6839      	ldr	r1, [r7, #0]
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f001 f8ed 	bl	8007c5a <USBD_CtlError>
    ret = USBD_FAIL;
 8006a80:	2302      	movs	r3, #2
 8006a82:	75fb      	strb	r3, [r7, #23]
    break;
 8006a84:	bf00      	nop
  }

  return ret;
 8006a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3718      	adds	r7, #24
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	20000052 	.word	0x20000052

08006a94 <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_AUDIO_GetCfgDesc (uint16_t *length)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_AUDIO_CfgDesc);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	226d      	movs	r2, #109	; 0x6d
 8006aa0:	801a      	strh	r2, [r3, #0]
  return USBD_AUDIO_CfgDesc;
 8006aa2:	4b03      	ldr	r3, [pc, #12]	; (8006ab0 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	20000040 	.word	0x20000040

08006ab4 <USBD_AUDIO_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	460b      	mov	r3, r1
 8006abe:	70fb      	strb	r3, [r7, #3]

  /* Only OUT data are processed */
  return USBD_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b084      	sub	sp, #16
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006adc:	60fb      	str	r3, [r7, #12]

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8006ae4:	330a      	adds	r3, #10
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d11d      	bne.n	8006b28 <USBD_AUDIO_EP0_RxReady+0x5a>
  {/* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 8006af2:	330c      	adds	r3, #12
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d116      	bne.n	8006b28 <USBD_AUDIO_EP0_RxReady+0x5a>
    {
     ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b00:	691a      	ldr	r2, [r3, #16]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8006b08:	330b      	adds	r3, #11
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	4790      	blx	r2
      haudio->control.cmd = 0U;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8006b16:	330a      	adds	r3, #10
 8006b18:	2200      	movs	r2, #0
 8006b1a:	701a      	strb	r2, [r3, #0]
      haudio->control.len = 0U;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 8006b22:	330b      	adds	r3, #11
 8006b24:	2200      	movs	r2, #0
 8006b26:	701a      	strb	r2, [r3, #0]
    }
  }

  return USBD_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b083      	sub	sp, #12
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  /* Only OUT control data are processed */
  return USBD_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_SOF (USBD_HandleTypeDef *pdev)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	460b      	mov	r3, r1
 8006b68:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	460b      	mov	r3, r1
 8006b82:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <USBD_AUDIO_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b084      	sub	sp, #16
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ba4:	60fb      	str	r3, [r7, #12]

  if (epnum == AUDIO_OUT_EP)
 8006ba6:	78fb      	ldrb	r3, [r7, #3]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d153      	bne.n	8006c54 <USBD_AUDIO_DataOut+0xc2>
  {
    /* Increment the Buffer pointer or roll it back when all buffers are full */

    haudio->wr_ptr += AUDIO_OUT_PACKET;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8006bb2:	3308      	adds	r3, #8
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	3358      	adds	r3, #88	; 0x58
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8006bc0:	3308      	adds	r3, #8
 8006bc2:	801a      	strh	r2, [r3, #0]

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8006bca:	3308      	adds	r3, #8
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	f5b3 5fdc 	cmp.w	r3, #7040	; 0x1b80
 8006bd2:	d11c      	bne.n	8006c0e <USBD_AUDIO_DataOut+0x7c>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8006bda:	3308      	adds	r3, #8
 8006bdc:	2200      	movs	r2, #0
 8006bde:	801a      	strh	r2, [r3, #0]

      if(haudio->offset == AUDIO_OFFSET_UNKNOWN)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8006be6:	3304      	adds	r3, #4
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	2b03      	cmp	r3, #3
 8006bec:	d10f      	bne.n	8006c0e <USBD_AUDIO_DataOut+0x7c>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	1d10      	adds	r0, r2, #4
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 8006c00:	4798      	blx	r3
                                                             AUDIO_TOTAL_BUF_SIZE / 2U,
                                                             AUDIO_CMD_START);
          haudio->offset = AUDIO_OFFSET_NONE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8006c08:	3304      	adds	r3, #4
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	701a      	strb	r2, [r3, #0]
      }
    }

    if(haudio->rd_enable == 0U)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8006c14:	3305      	adds	r3, #5
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10d      	bne.n	8006c38 <USBD_AUDIO_DataOut+0xa6>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8006c22:	3308      	adds	r3, #8
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	f5b3 6f5c 	cmp.w	r3, #3520	; 0xdc0
 8006c2a:	d105      	bne.n	8006c38 <USBD_AUDIO_DataOut+0xa6>
      {
        haudio->rd_enable = 1U;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8006c32:	3305      	adds	r3, #5
 8006c34:	2201      	movs	r2, #1
 8006c36:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, &haudio->buffer[haudio->wr_ptr],
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8006c3e:	3308      	adds	r3, #8
 8006c40:	881b      	ldrh	r3, [r3, #0]
 8006c42:	461a      	mov	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	4413      	add	r3, r2
 8006c48:	1d1a      	adds	r2, r3, #4
 8006c4a:	2358      	movs	r3, #88	; 0x58
 8006c4c:	2101      	movs	r1, #1
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f002 fad4 	bl	80091fc <USBD_LL_PrepareReceive>
                           AUDIO_OUT_PACKET);
  }

  return USBD_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b084      	sub	sp, #16
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c6e:	60fb      	str	r3, [r7, #12]

  memset(haudio->control.data, 0, 64U);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8006c76:	330b      	adds	r3, #11
 8006c78:	2240      	movs	r2, #64	; 0x40
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f002 fcdf 	bl	8009640 <memset>

  /* Send the current mute state */
  USBD_CtlSendData (pdev, haudio->control.data, req->wLength);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8006c88:	330b      	adds	r3, #11
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	88d2      	ldrh	r2, [r2, #6]
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f001 f84d 	bl	8007d30 <USBD_CtlSendData>
}
 8006c96:	bf00      	nop
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006cae:	60fb      	str	r3, [r7, #12]

  if (req->wLength)
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	88db      	ldrh	r3, [r3, #6]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d021      	beq.n	8006cfc <AUDIO_REQ_SetCurrent+0x5e>
  {
    /* Prepare the reception of the buffer over EP0 */
    USBD_CtlPrepareRx (pdev,
                       haudio->control.data,
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8006cbe:	330b      	adds	r3, #11
    USBD_CtlPrepareRx (pdev,
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	88d2      	ldrh	r2, [r2, #6]
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f001 f860 	bl	8007d8c <USBD_CtlPrepareRx>
                       req->wLength);

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8006cd2:	330a      	adds	r3, #10
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	701a      	strb	r2, [r3, #0]
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	88db      	ldrh	r3, [r3, #6]
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 8006ce4:	330b      	adds	r3, #11
 8006ce6:	701a      	strb	r2, [r3, #0]
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	889b      	ldrh	r3, [r3, #4]
 8006cec:	0a1b      	lsrs	r3, r3, #8
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 8006cf8:	330c      	adds	r3, #12
 8006cfa:	701a      	strb	r2, [r3, #0]
  }
}
 8006cfc:	bf00      	nop
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetDeviceQualifierDesc (uint16_t *length)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_AUDIO_DeviceQualifierDesc);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	220a      	movs	r2, #10
 8006d10:	801a      	strh	r2, [r3, #0]
  return USBD_AUDIO_DeviceQualifierDesc;
 8006d12:	4b03      	ldr	r3, [pc, #12]	; (8006d20 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	200000b0 	.word	0x200000b0

08006d24 <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t  USBD_AUDIO_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                        USBD_AUDIO_ItfTypeDef *fops)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  if(fops != NULL)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <USBD_AUDIO_RegisterInterface+0x18>
  {
    pdev->pUserData= fops;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  }
  return USBD_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	60f8      	str	r0, [r7, #12]
 8006d52:	60b9      	str	r1, [r7, #8]
 8006d54:	4613      	mov	r3, r2
 8006d56:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006d5e:	2302      	movs	r3, #2
 8006d60:	e01a      	b.n	8006d98 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d003      	beq.n	8006d82 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	79fa      	ldrb	r2, [r7, #7]
 8006d8e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f002 f8d7 	bl	8008f44 <USBD_LL_Init>

  return USBD_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006daa:	2300      	movs	r3, #0
 8006dac:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d006      	beq.n	8006dc2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	73fb      	strb	r3, [r7, #15]
 8006dc0:	e001      	b.n	8006dc6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f002 f901 	bl	8008fe4 <USBD_LL_Start>

  return USBD_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr

08006e02 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b084      	sub	sp, #16
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006e0e:	2302      	movs	r3, #2
 8006e10:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00c      	beq.n	8006e36 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	78fa      	ldrb	r2, [r7, #3]
 8006e26:	4611      	mov	r1, r2
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	4798      	blx	r3
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006e32:	2300      	movs	r3, #0
 8006e34:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	460b      	mov	r3, r1
 8006e4a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	78fa      	ldrb	r2, [r7, #3]
 8006e56:	4611      	mov	r1, r2
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	4798      	blx	r3
  return USBD_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b082      	sub	sp, #8
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006e76:	6839      	ldr	r1, [r7, #0]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 feb1 	bl	8007be0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006e9a:	f003 031f 	and.w	r3, r3, #31
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d00c      	beq.n	8006ebc <USBD_LL_SetupStage+0x56>
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d302      	bcc.n	8006eac <USBD_LL_SetupStage+0x46>
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d010      	beq.n	8006ecc <USBD_LL_SetupStage+0x66>
 8006eaa:	e017      	b.n	8006edc <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fa05 	bl	80072c4 <USBD_StdDevReq>
    break;
 8006eba:	e01a      	b.n	8006ef2 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fa67 	bl	8007398 <USBD_StdItfReq>
    break;
 8006eca:	e012      	b.n	8006ef2 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 faa5 	bl	8007424 <USBD_StdEPReq>
    break;
 8006eda:	e00a      	b.n	8006ef2 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006ee2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	4619      	mov	r1, r3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f002 f8da 	bl	80090a4 <USBD_LL_StallEP>
    break;
 8006ef0:	bf00      	nop
  }

  return USBD_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	460b      	mov	r3, r1
 8006f06:	607a      	str	r2, [r7, #4]
 8006f08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006f0a:	7afb      	ldrb	r3, [r7, #11]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d14b      	bne.n	8006fa8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006f16:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d134      	bne.n	8006f8c <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	68da      	ldr	r2, [r3, #12]
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d919      	bls.n	8006f62 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	68da      	ldr	r2, [r3, #12]
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	1ad2      	subs	r2, r2, r3
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	68da      	ldr	r2, [r3, #12]
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d203      	bcs.n	8006f50 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	e002      	b.n	8006f56 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	461a      	mov	r2, r3
 8006f58:	6879      	ldr	r1, [r7, #4]
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f000 ff34 	bl	8007dc8 <USBD_CtlContinueRx>
 8006f60:	e038      	b.n	8006fd4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00a      	beq.n	8006f84 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006f74:	2b03      	cmp	r3, #3
 8006f76:	d105      	bne.n	8006f84 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f000 ff31 	bl	8007dec <USBD_CtlSendStatus>
 8006f8a:	e023      	b.n	8006fd4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006f92:	2b05      	cmp	r3, #5
 8006f94:	d11e      	bne.n	8006fd4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f002 f87f 	bl	80090a4 <USBD_LL_StallEP>
 8006fa6:	e015      	b.n	8006fd4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00d      	beq.n	8006fd0 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8006fba:	2b03      	cmp	r3, #3
 8006fbc:	d108      	bne.n	8006fd0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	7afa      	ldrb	r2, [r7, #11]
 8006fc8:	4611      	mov	r1, r2
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	4798      	blx	r3
 8006fce:	e001      	b.n	8006fd4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	e000      	b.n	8006fd6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3718      	adds	r7, #24
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b086      	sub	sp, #24
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	60f8      	str	r0, [r7, #12]
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	607a      	str	r2, [r7, #4]
 8006fea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006fec:	7afb      	ldrb	r3, [r7, #11]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d17f      	bne.n	80070f2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3314      	adds	r3, #20
 8006ff6:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d15c      	bne.n	80070bc <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	68da      	ldr	r2, [r3, #12]
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	429a      	cmp	r2, r3
 800700c:	d915      	bls.n	800703a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	68da      	ldr	r2, [r3, #12]
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	1ad2      	subs	r2, r2, r3
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	b29b      	uxth	r3, r3
 8007022:	461a      	mov	r2, r3
 8007024:	6879      	ldr	r1, [r7, #4]
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f000 fe9e 	bl	8007d68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800702c:	2300      	movs	r3, #0
 800702e:	2200      	movs	r2, #0
 8007030:	2100      	movs	r1, #0
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f002 f8e2 	bl	80091fc <USBD_LL_PrepareReceive>
 8007038:	e04e      	b.n	80070d8 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	6912      	ldr	r2, [r2, #16]
 8007042:	fbb3 f1f2 	udiv	r1, r3, r2
 8007046:	fb02 f201 	mul.w	r2, r2, r1
 800704a:	1a9b      	subs	r3, r3, r2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d11c      	bne.n	800708a <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	689a      	ldr	r2, [r3, #8]
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8007058:	429a      	cmp	r2, r3
 800705a:	d316      	bcc.n	800708a <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	689a      	ldr	r2, [r3, #8]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8007066:	429a      	cmp	r2, r3
 8007068:	d20f      	bcs.n	800708a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800706a:	2200      	movs	r2, #0
 800706c:	2100      	movs	r1, #0
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 fe7a 	bl	8007d68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800707c:	2300      	movs	r3, #0
 800707e:	2200      	movs	r2, #0
 8007080:	2100      	movs	r1, #0
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f002 f8ba 	bl	80091fc <USBD_LL_PrepareReceive>
 8007088:	e026      	b.n	80070d8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00a      	beq.n	80070ac <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800709c:	2b03      	cmp	r3, #3
 800709e:	d105      	bne.n	80070ac <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80070ac:	2180      	movs	r1, #128	; 0x80
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f001 fff8 	bl	80090a4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f000 feac 	bl	8007e12 <USBD_CtlReceiveStatus>
 80070ba:	e00d      	b.n	80070d8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	d004      	beq.n	80070d0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d103      	bne.n	80070d8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80070d0:	2180      	movs	r1, #128	; 0x80
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f001 ffe6 	bl	80090a4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d11d      	bne.n	800711e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f7ff fe82 	bl	8006dec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80070f0:	e015      	b.n	800711e <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00d      	beq.n	800711a <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8007104:	2b03      	cmp	r3, #3
 8007106:	d108      	bne.n	800711a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800710e:	695b      	ldr	r3, [r3, #20]
 8007110:	7afa      	ldrb	r2, [r7, #11]
 8007112:	4611      	mov	r1, r2
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	4798      	blx	r3
 8007118:	e001      	b.n	800711e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800711a:	2302      	movs	r3, #2
 800711c:	e000      	b.n	8007120 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3718      	adds	r7, #24
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007130:	2340      	movs	r3, #64	; 0x40
 8007132:	2200      	movs	r2, #0
 8007134:	2100      	movs	r1, #0
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f001 ff6f 	bl	800901a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2240      	movs	r2, #64	; 0x40
 8007148:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800714c:	2340      	movs	r3, #64	; 0x40
 800714e:	2200      	movs	r2, #0
 8007150:	2180      	movs	r1, #128	; 0x80
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f001 ff61 	bl	800901a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2240      	movs	r2, #64	; 0x40
 8007162:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007188:	2b00      	cmp	r3, #0
 800718a:	d009      	beq.n	80071a0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	6852      	ldr	r2, [r2, #4]
 8007198:	b2d2      	uxtb	r2, r2
 800719a:	4611      	mov	r1, r2
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	4798      	blx	r3
  }

  return USBD_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b083      	sub	sp, #12
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
 80071b2:	460b      	mov	r3, r1
 80071b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	78fa      	ldrb	r2, [r7, #3]
 80071ba:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b083      	sub	sp, #12
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2204      	movs	r2, #4
 80071e2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b082      	sub	sp, #8
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007224:	2b03      	cmp	r3, #3
 8007226:	d10b      	bne.n	8007240 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d005      	beq.n	8007240 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800723a:	69db      	ldr	r3, [r3, #28]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800724a:	b480      	push	{r7}
 800724c:	b083      	sub	sp, #12
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
 8007252:	460b      	mov	r3, r1
 8007254:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	460b      	mov	r3, r1
 800726e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800727e:	b480      	push	{r7}
 8007280:	b083      	sub	sp, #12
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	6852      	ldr	r2, [r2, #4]
 80072b0:	b2d2      	uxtb	r2, r2
 80072b2:	4611      	mov	r1, r2
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	4798      	blx	r3

  return USBD_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3708      	adds	r7, #8
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
	...

080072c4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072ce:	2300      	movs	r3, #0
 80072d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072da:	2b20      	cmp	r3, #32
 80072dc:	d004      	beq.n	80072e8 <USBD_StdDevReq+0x24>
 80072de:	2b40      	cmp	r3, #64	; 0x40
 80072e0:	d002      	beq.n	80072e8 <USBD_StdDevReq+0x24>
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d008      	beq.n	80072f8 <USBD_StdDevReq+0x34>
 80072e6:	e04c      	b.n	8007382 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	4798      	blx	r3
    break;
 80072f6:	e049      	b.n	800738c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	785b      	ldrb	r3, [r3, #1]
 80072fc:	2b09      	cmp	r3, #9
 80072fe:	d83a      	bhi.n	8007376 <USBD_StdDevReq+0xb2>
 8007300:	a201      	add	r2, pc, #4	; (adr r2, 8007308 <USBD_StdDevReq+0x44>)
 8007302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007306:	bf00      	nop
 8007308:	08007359 	.word	0x08007359
 800730c:	0800736d 	.word	0x0800736d
 8007310:	08007377 	.word	0x08007377
 8007314:	08007363 	.word	0x08007363
 8007318:	08007377 	.word	0x08007377
 800731c:	0800733b 	.word	0x0800733b
 8007320:	08007331 	.word	0x08007331
 8007324:	08007377 	.word	0x08007377
 8007328:	0800734f 	.word	0x0800734f
 800732c:	08007345 	.word	0x08007345
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f9d2 	bl	80076dc <USBD_GetDescriptor>
      break;
 8007338:	e022      	b.n	8007380 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800733a:	6839      	ldr	r1, [r7, #0]
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fae3 	bl	8007908 <USBD_SetAddress>
      break;
 8007342:	e01d      	b.n	8007380 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fb20 	bl	800798c <USBD_SetConfig>
      break;
 800734c:	e018      	b.n	8007380 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fba9 	bl	8007aa8 <USBD_GetConfig>
      break;
 8007356:	e013      	b.n	8007380 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007358:	6839      	ldr	r1, [r7, #0]
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fbd8 	bl	8007b10 <USBD_GetStatus>
      break;
 8007360:	e00e      	b.n	8007380 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8007362:	6839      	ldr	r1, [r7, #0]
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fc06 	bl	8007b76 <USBD_SetFeature>
      break;
 800736a:	e009      	b.n	8007380 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800736c:	6839      	ldr	r1, [r7, #0]
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fc15 	bl	8007b9e <USBD_ClrFeature>
      break;
 8007374:	e004      	b.n	8007380 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fc6e 	bl	8007c5a <USBD_CtlError>
      break;
 800737e:	bf00      	nop
    }
    break;
 8007380:	e004      	b.n	800738c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fc68 	bl	8007c5a <USBD_CtlError>
    break;
 800738a:	bf00      	nop
  }

  return ret;
 800738c:	7bfb      	ldrb	r3, [r7, #15]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop

08007398 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073a2:	2300      	movs	r3, #0
 80073a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073ae:	2b20      	cmp	r3, #32
 80073b0:	d003      	beq.n	80073ba <USBD_StdItfReq+0x22>
 80073b2:	2b40      	cmp	r3, #64	; 0x40
 80073b4:	d001      	beq.n	80073ba <USBD_StdItfReq+0x22>
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d12a      	bne.n	8007410 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80073c0:	3b01      	subs	r3, #1
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d81d      	bhi.n	8007402 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	889b      	ldrh	r3, [r3, #4]
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d813      	bhi.n	80073f8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	6839      	ldr	r1, [r7, #0]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	4798      	blx	r3
 80073de:	4603      	mov	r3, r0
 80073e0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	88db      	ldrh	r3, [r3, #6]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d110      	bne.n	800740c <USBD_StdItfReq+0x74>
 80073ea:	7bfb      	ldrb	r3, [r7, #15]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d10d      	bne.n	800740c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fcfb 	bl	8007dec <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80073f6:	e009      	b.n	800740c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80073f8:	6839      	ldr	r1, [r7, #0]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fc2d 	bl	8007c5a <USBD_CtlError>
      break;
 8007400:	e004      	b.n	800740c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 fc28 	bl	8007c5a <USBD_CtlError>
      break;
 800740a:	e000      	b.n	800740e <USBD_StdItfReq+0x76>
      break;
 800740c:	bf00      	nop
    }
    break;
 800740e:	e004      	b.n	800741a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fc21 	bl	8007c5a <USBD_CtlError>
    break;
 8007418:	bf00      	nop
  }

  return USBD_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	889b      	ldrh	r3, [r3, #4]
 8007436:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007440:	2b20      	cmp	r3, #32
 8007442:	d004      	beq.n	800744e <USBD_StdEPReq+0x2a>
 8007444:	2b40      	cmp	r3, #64	; 0x40
 8007446:	d002      	beq.n	800744e <USBD_StdEPReq+0x2a>
 8007448:	2b00      	cmp	r3, #0
 800744a:	d008      	beq.n	800745e <USBD_StdEPReq+0x3a>
 800744c:	e13b      	b.n	80076c6 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	6839      	ldr	r1, [r7, #0]
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	4798      	blx	r3
    break;
 800745c:	e138      	b.n	80076d0 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007466:	2b20      	cmp	r3, #32
 8007468:	d10a      	bne.n	8007480 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	4798      	blx	r3
 8007478:	4603      	mov	r3, r0
 800747a:	73fb      	strb	r3, [r7, #15]

      return ret;
 800747c:	7bfb      	ldrb	r3, [r7, #15]
 800747e:	e128      	b.n	80076d2 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	785b      	ldrb	r3, [r3, #1]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d03e      	beq.n	8007506 <USBD_StdEPReq+0xe2>
 8007488:	2b03      	cmp	r3, #3
 800748a:	d002      	beq.n	8007492 <USBD_StdEPReq+0x6e>
 800748c:	2b00      	cmp	r3, #0
 800748e:	d070      	beq.n	8007572 <USBD_StdEPReq+0x14e>
 8007490:	e113      	b.n	80076ba <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007498:	2b02      	cmp	r3, #2
 800749a:	d002      	beq.n	80074a2 <USBD_StdEPReq+0x7e>
 800749c:	2b03      	cmp	r3, #3
 800749e:	d015      	beq.n	80074cc <USBD_StdEPReq+0xa8>
 80074a0:	e02b      	b.n	80074fa <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074a2:	7bbb      	ldrb	r3, [r7, #14]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00c      	beq.n	80074c2 <USBD_StdEPReq+0x9e>
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
 80074aa:	2b80      	cmp	r3, #128	; 0x80
 80074ac:	d009      	beq.n	80074c2 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80074ae:	7bbb      	ldrb	r3, [r7, #14]
 80074b0:	4619      	mov	r1, r3
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f001 fdf6 	bl	80090a4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80074b8:	2180      	movs	r1, #128	; 0x80
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f001 fdf2 	bl	80090a4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80074c0:	e020      	b.n	8007504 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80074c2:	6839      	ldr	r1, [r7, #0]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fbc8 	bl	8007c5a <USBD_CtlError>
        break;
 80074ca:	e01b      	b.n	8007504 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	885b      	ldrh	r3, [r3, #2]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d10e      	bne.n	80074f2 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80074d4:	7bbb      	ldrb	r3, [r7, #14]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00b      	beq.n	80074f2 <USBD_StdEPReq+0xce>
 80074da:	7bbb      	ldrb	r3, [r7, #14]
 80074dc:	2b80      	cmp	r3, #128	; 0x80
 80074de:	d008      	beq.n	80074f2 <USBD_StdEPReq+0xce>
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	88db      	ldrh	r3, [r3, #6]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d104      	bne.n	80074f2 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
 80074ea:	4619      	mov	r1, r3
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f001 fdd9 	bl	80090a4 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fc7a 	bl	8007dec <USBD_CtlSendStatus>

        break;
 80074f8:	e004      	b.n	8007504 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fbac 	bl	8007c5a <USBD_CtlError>
        break;
 8007502:	bf00      	nop
      }
      break;
 8007504:	e0de      	b.n	80076c4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800750c:	2b02      	cmp	r3, #2
 800750e:	d002      	beq.n	8007516 <USBD_StdEPReq+0xf2>
 8007510:	2b03      	cmp	r3, #3
 8007512:	d015      	beq.n	8007540 <USBD_StdEPReq+0x11c>
 8007514:	e026      	b.n	8007564 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007516:	7bbb      	ldrb	r3, [r7, #14]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00c      	beq.n	8007536 <USBD_StdEPReq+0x112>
 800751c:	7bbb      	ldrb	r3, [r7, #14]
 800751e:	2b80      	cmp	r3, #128	; 0x80
 8007520:	d009      	beq.n	8007536 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007522:	7bbb      	ldrb	r3, [r7, #14]
 8007524:	4619      	mov	r1, r3
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f001 fdbc 	bl	80090a4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800752c:	2180      	movs	r1, #128	; 0x80
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f001 fdb8 	bl	80090a4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007534:	e01c      	b.n	8007570 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fb8e 	bl	8007c5a <USBD_CtlError>
        break;
 800753e:	e017      	b.n	8007570 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	885b      	ldrh	r3, [r3, #2]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d112      	bne.n	800756e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007548:	7bbb      	ldrb	r3, [r7, #14]
 800754a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800754e:	2b00      	cmp	r3, #0
 8007550:	d004      	beq.n	800755c <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007552:	7bbb      	ldrb	r3, [r7, #14]
 8007554:	4619      	mov	r1, r3
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f001 fdc3 	bl	80090e2 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fc45 	bl	8007dec <USBD_CtlSendStatus>
        }
        break;
 8007562:	e004      	b.n	800756e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8007564:	6839      	ldr	r1, [r7, #0]
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fb77 	bl	8007c5a <USBD_CtlError>
        break;
 800756c:	e000      	b.n	8007570 <USBD_StdEPReq+0x14c>
        break;
 800756e:	bf00      	nop
      }
      break;
 8007570:	e0a8      	b.n	80076c4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007578:	2b02      	cmp	r3, #2
 800757a:	d002      	beq.n	8007582 <USBD_StdEPReq+0x15e>
 800757c:	2b03      	cmp	r3, #3
 800757e:	d031      	beq.n	80075e4 <USBD_StdEPReq+0x1c0>
 8007580:	e095      	b.n	80076ae <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007582:	7bbb      	ldrb	r3, [r7, #14]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d007      	beq.n	8007598 <USBD_StdEPReq+0x174>
 8007588:	7bbb      	ldrb	r3, [r7, #14]
 800758a:	2b80      	cmp	r3, #128	; 0x80
 800758c:	d004      	beq.n	8007598 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fb62 	bl	8007c5a <USBD_CtlError>
          break;
 8007596:	e08f      	b.n	80076b8 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007598:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800759c:	2b00      	cmp	r3, #0
 800759e:	da0b      	bge.n	80075b8 <USBD_StdEPReq+0x194>
 80075a0:	7bbb      	ldrb	r3, [r7, #14]
 80075a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075a6:	4613      	mov	r3, r2
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	4413      	add	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	3310      	adds	r3, #16
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	4413      	add	r3, r2
 80075b4:	3304      	adds	r3, #4
 80075b6:	e00a      	b.n	80075ce <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 80075b8:	7bbb      	ldrb	r3, [r7, #14]
 80075ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80075be:	4613      	mov	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	4413      	add	r3, r2
 80075ce:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2200      	movs	r2, #0
 80075d4:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2202      	movs	r2, #2
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 fba7 	bl	8007d30 <USBD_CtlSendData>
          break;
 80075e2:	e069      	b.n	80076b8 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80075e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	da11      	bge.n	8007610 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80075ec:	7bbb      	ldrb	r3, [r7, #14]
 80075ee:	f003 020f 	and.w	r2, r3, #15
 80075f2:	6879      	ldr	r1, [r7, #4]
 80075f4:	4613      	mov	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	440b      	add	r3, r1
 80075fe:	3318      	adds	r3, #24
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d117      	bne.n	8007636 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fb26 	bl	8007c5a <USBD_CtlError>
            break;
 800760e:	e053      	b.n	80076b8 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007610:	7bbb      	ldrb	r3, [r7, #14]
 8007612:	f003 020f 	and.w	r2, r3, #15
 8007616:	6879      	ldr	r1, [r7, #4]
 8007618:	4613      	mov	r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4413      	add	r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	440b      	add	r3, r1
 8007622:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d104      	bne.n	8007636 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fb13 	bl	8007c5a <USBD_CtlError>
            break;
 8007634:	e040      	b.n	80076b8 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007636:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800763a:	2b00      	cmp	r3, #0
 800763c:	da0b      	bge.n	8007656 <USBD_StdEPReq+0x232>
 800763e:	7bbb      	ldrb	r3, [r7, #14]
 8007640:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007644:	4613      	mov	r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	3310      	adds	r3, #16
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	4413      	add	r3, r2
 8007652:	3304      	adds	r3, #4
 8007654:	e00a      	b.n	800766c <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007656:	7bbb      	ldrb	r3, [r7, #14]
 8007658:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800765c:	4613      	mov	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	4413      	add	r3, r2
 800766c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800766e:	7bbb      	ldrb	r3, [r7, #14]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <USBD_StdEPReq+0x256>
 8007674:	7bbb      	ldrb	r3, [r7, #14]
 8007676:	2b80      	cmp	r3, #128	; 0x80
 8007678:	d103      	bne.n	8007682 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	2200      	movs	r2, #0
 800767e:	601a      	str	r2, [r3, #0]
 8007680:	e00e      	b.n	80076a0 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007682:	7bbb      	ldrb	r3, [r7, #14]
 8007684:	4619      	mov	r1, r3
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f001 fd4a 	bl	8009120 <USBD_LL_IsStallEP>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d003      	beq.n	800769a <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2201      	movs	r2, #1
 8007696:	601a      	str	r2, [r3, #0]
 8007698:	e002      	b.n	80076a0 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	2200      	movs	r2, #0
 800769e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	2202      	movs	r2, #2
 80076a4:	4619      	mov	r1, r3
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fb42 	bl	8007d30 <USBD_CtlSendData>
          break;
 80076ac:	e004      	b.n	80076b8 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fad2 	bl	8007c5a <USBD_CtlError>
        break;
 80076b6:	bf00      	nop
      }
      break;
 80076b8:	e004      	b.n	80076c4 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 facc 	bl	8007c5a <USBD_CtlError>
      break;
 80076c2:	bf00      	nop
    }
    break;
 80076c4:	e004      	b.n	80076d0 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fac6 	bl	8007c5a <USBD_CtlError>
    break;
 80076ce:	bf00      	nop
  }

  return ret;
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
	...

080076dc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	885b      	ldrh	r3, [r3, #2]
 80076ea:	0a1b      	lsrs	r3, r3, #8
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	3b01      	subs	r3, #1
 80076f0:	2b0e      	cmp	r3, #14
 80076f2:	f200 80e5 	bhi.w	80078c0 <USBD_GetDescriptor+0x1e4>
 80076f6:	a201      	add	r2, pc, #4	; (adr r2, 80076fc <USBD_GetDescriptor+0x20>)
 80076f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fc:	08007751 	.word	0x08007751
 8007700:	08007769 	.word	0x08007769
 8007704:	080077a9 	.word	0x080077a9
 8007708:	080078c1 	.word	0x080078c1
 800770c:	080078c1 	.word	0x080078c1
 8007710:	0800786d 	.word	0x0800786d
 8007714:	08007893 	.word	0x08007893
 8007718:	080078c1 	.word	0x080078c1
 800771c:	080078c1 	.word	0x080078c1
 8007720:	080078c1 	.word	0x080078c1
 8007724:	080078c1 	.word	0x080078c1
 8007728:	080078c1 	.word	0x080078c1
 800772c:	080078c1 	.word	0x080078c1
 8007730:	080078c1 	.word	0x080078c1
 8007734:	08007739 	.word	0x08007739
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800773e:	69db      	ldr	r3, [r3, #28]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	7c12      	ldrb	r2, [r2, #16]
 8007744:	f107 010a 	add.w	r1, r7, #10
 8007748:	4610      	mov	r0, r2
 800774a:	4798      	blx	r3
 800774c:	60f8      	str	r0, [r7, #12]
    break;
 800774e:	e0bc      	b.n	80078ca <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	7c12      	ldrb	r2, [r2, #16]
 800775c:	f107 010a 	add.w	r1, r7, #10
 8007760:	4610      	mov	r0, r2
 8007762:	4798      	blx	r3
 8007764:	60f8      	str	r0, [r7, #12]
    break;
 8007766:	e0b0      	b.n	80078ca <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	7c1b      	ldrb	r3, [r3, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10d      	bne.n	800778c <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007778:	f107 020a 	add.w	r2, r7, #10
 800777c:	4610      	mov	r0, r2
 800777e:	4798      	blx	r3
 8007780:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	3301      	adds	r3, #1
 8007786:	2202      	movs	r2, #2
 8007788:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800778a:	e09e      	b.n	80078ca <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	f107 020a 	add.w	r2, r7, #10
 8007798:	4610      	mov	r0, r2
 800779a:	4798      	blx	r3
 800779c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	3301      	adds	r3, #1
 80077a2:	2202      	movs	r2, #2
 80077a4:	701a      	strb	r2, [r3, #0]
    break;
 80077a6:	e090      	b.n	80078ca <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	885b      	ldrh	r3, [r3, #2]
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b05      	cmp	r3, #5
 80077b0:	d856      	bhi.n	8007860 <USBD_GetDescriptor+0x184>
 80077b2:	a201      	add	r2, pc, #4	; (adr r2, 80077b8 <USBD_GetDescriptor+0xdc>)
 80077b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b8:	080077d1 	.word	0x080077d1
 80077bc:	080077e9 	.word	0x080077e9
 80077c0:	08007801 	.word	0x08007801
 80077c4:	08007819 	.word	0x08007819
 80077c8:	08007831 	.word	0x08007831
 80077cc:	08007849 	.word	0x08007849
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	7c12      	ldrb	r2, [r2, #16]
 80077dc:	f107 010a 	add.w	r1, r7, #10
 80077e0:	4610      	mov	r0, r2
 80077e2:	4798      	blx	r3
 80077e4:	60f8      	str	r0, [r7, #12]
      break;
 80077e6:	e040      	b.n	800786a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	7c12      	ldrb	r2, [r2, #16]
 80077f4:	f107 010a 	add.w	r1, r7, #10
 80077f8:	4610      	mov	r0, r2
 80077fa:	4798      	blx	r3
 80077fc:	60f8      	str	r0, [r7, #12]
      break;
 80077fe:	e034      	b.n	800786a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	7c12      	ldrb	r2, [r2, #16]
 800780c:	f107 010a 	add.w	r1, r7, #10
 8007810:	4610      	mov	r0, r2
 8007812:	4798      	blx	r3
 8007814:	60f8      	str	r0, [r7, #12]
      break;
 8007816:	e028      	b.n	800786a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	7c12      	ldrb	r2, [r2, #16]
 8007824:	f107 010a 	add.w	r1, r7, #10
 8007828:	4610      	mov	r0, r2
 800782a:	4798      	blx	r3
 800782c:	60f8      	str	r0, [r7, #12]
      break;
 800782e:	e01c      	b.n	800786a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	7c12      	ldrb	r2, [r2, #16]
 800783c:	f107 010a 	add.w	r1, r7, #10
 8007840:	4610      	mov	r0, r2
 8007842:	4798      	blx	r3
 8007844:	60f8      	str	r0, [r7, #12]
      break;
 8007846:	e010      	b.n	800786a <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	7c12      	ldrb	r2, [r2, #16]
 8007854:	f107 010a 	add.w	r1, r7, #10
 8007858:	4610      	mov	r0, r2
 800785a:	4798      	blx	r3
 800785c:	60f8      	str	r0, [r7, #12]
      break;
 800785e:	e004      	b.n	800786a <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f9f9 	bl	8007c5a <USBD_CtlError>
      return;
 8007868:	e04b      	b.n	8007902 <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 800786a:	e02e      	b.n	80078ca <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	7c1b      	ldrb	r3, [r3, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d109      	bne.n	8007888 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800787a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787c:	f107 020a 	add.w	r2, r7, #10
 8007880:	4610      	mov	r0, r2
 8007882:	4798      	blx	r3
 8007884:	60f8      	str	r0, [r7, #12]
      break;
 8007886:	e020      	b.n	80078ca <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f9e5 	bl	8007c5a <USBD_CtlError>
      return;
 8007890:	e037      	b.n	8007902 <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	7c1b      	ldrb	r3, [r3, #16]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10d      	bne.n	80078b6 <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80078a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a2:	f107 020a 	add.w	r2, r7, #10
 80078a6:	4610      	mov	r0, r2
 80078a8:	4798      	blx	r3
 80078aa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	3301      	adds	r3, #1
 80078b0:	2207      	movs	r2, #7
 80078b2:	701a      	strb	r2, [r3, #0]
      break;
 80078b4:	e009      	b.n	80078ca <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f9ce 	bl	8007c5a <USBD_CtlError>
      return;
 80078be:	e020      	b.n	8007902 <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f9c9 	bl	8007c5a <USBD_CtlError>
    return;
 80078c8:	e01b      	b.n	8007902 <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 80078ca:	897b      	ldrh	r3, [r7, #10]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d011      	beq.n	80078f4 <USBD_GetDescriptor+0x218>
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	88db      	ldrh	r3, [r3, #6]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00d      	beq.n	80078f4 <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	88da      	ldrh	r2, [r3, #6]
 80078dc:	897b      	ldrh	r3, [r7, #10]
 80078de:	4293      	cmp	r3, r2
 80078e0:	bf28      	it	cs
 80078e2:	4613      	movcs	r3, r2
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80078e8:	897b      	ldrh	r3, [r7, #10]
 80078ea:	461a      	mov	r2, r3
 80078ec:	68f9      	ldr	r1, [r7, #12]
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fa1e 	bl	8007d30 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	88db      	ldrh	r3, [r3, #6]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d102      	bne.n	8007902 <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fa75 	bl	8007dec <USBD_CtlSendStatus>
  }
}
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	889b      	ldrh	r3, [r3, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d130      	bne.n	800797c <USBD_SetAddress+0x74>
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	88db      	ldrh	r3, [r3, #6]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d12c      	bne.n	800797c <USBD_SetAddress+0x74>
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	885b      	ldrh	r3, [r3, #2]
 8007926:	2b7f      	cmp	r3, #127	; 0x7f
 8007928:	d828      	bhi.n	800797c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	885b      	ldrh	r3, [r3, #2]
 800792e:	b2db      	uxtb	r3, r3
 8007930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007934:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800793c:	2b03      	cmp	r3, #3
 800793e:	d104      	bne.n	800794a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007940:	6839      	ldr	r1, [r7, #0]
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f989 	bl	8007c5a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007948:	e01c      	b.n	8007984 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	7bfa      	ldrb	r2, [r7, #15]
 800794e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007952:	7bfb      	ldrb	r3, [r7, #15]
 8007954:	4619      	mov	r1, r3
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f001 fc0e 	bl	8009178 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fa45 	bl	8007dec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007962:	7bfb      	ldrb	r3, [r7, #15]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d004      	beq.n	8007972 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007970:	e008      	b.n	8007984 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800797a:	e003      	b.n	8007984 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f96b 	bl	8007c5a <USBD_CtlError>
  }
}
 8007984:	bf00      	nop
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	885b      	ldrh	r3, [r3, #2]
 800799a:	b2da      	uxtb	r2, r3
 800799c:	4b41      	ldr	r3, [pc, #260]	; (8007aa4 <USBD_SetConfig+0x118>)
 800799e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80079a0:	4b40      	ldr	r3, [pc, #256]	; (8007aa4 <USBD_SetConfig+0x118>)
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d904      	bls.n	80079b2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80079a8:	6839      	ldr	r1, [r7, #0]
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f955 	bl	8007c5a <USBD_CtlError>
 80079b0:	e075      	b.n	8007a9e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d002      	beq.n	80079c2 <USBD_SetConfig+0x36>
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d023      	beq.n	8007a08 <USBD_SetConfig+0x7c>
 80079c0:	e062      	b.n	8007a88 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80079c2:	4b38      	ldr	r3, [pc, #224]	; (8007aa4 <USBD_SetConfig+0x118>)
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d01a      	beq.n	8007a00 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80079ca:	4b36      	ldr	r3, [pc, #216]	; (8007aa4 <USBD_SetConfig+0x118>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	461a      	mov	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2203      	movs	r2, #3
 80079d8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80079dc:	4b31      	ldr	r3, [pc, #196]	; (8007aa4 <USBD_SetConfig+0x118>)
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	4619      	mov	r1, r3
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f7ff fa0d 	bl	8006e02 <USBD_SetClassConfig>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d104      	bne.n	80079f8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80079ee:	6839      	ldr	r1, [r7, #0]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f932 	bl	8007c5a <USBD_CtlError>
          return;
 80079f6:	e052      	b.n	8007a9e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f9f7 	bl	8007dec <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80079fe:	e04e      	b.n	8007a9e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f9f3 	bl	8007dec <USBD_CtlSendStatus>
      break;
 8007a06:	e04a      	b.n	8007a9e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007a08:	4b26      	ldr	r3, [pc, #152]	; (8007aa4 <USBD_SetConfig+0x118>)
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d112      	bne.n	8007a36 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2202      	movs	r2, #2
 8007a14:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007a18:	4b22      	ldr	r3, [pc, #136]	; (8007aa4 <USBD_SetConfig+0x118>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007a22:	4b20      	ldr	r3, [pc, #128]	; (8007aa4 <USBD_SetConfig+0x118>)
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	4619      	mov	r1, r3
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7ff fa09 	bl	8006e40 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f9dc 	bl	8007dec <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007a34:	e033      	b.n	8007a9e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8007a36:	4b1b      	ldr	r3, [pc, #108]	; (8007aa4 <USBD_SetConfig+0x118>)
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d01d      	beq.n	8007a80 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7ff f9f7 	bl	8006e40 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a52:	4b14      	ldr	r3, [pc, #80]	; (8007aa4 <USBD_SetConfig+0x118>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	461a      	mov	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a5c:	4b11      	ldr	r3, [pc, #68]	; (8007aa4 <USBD_SetConfig+0x118>)
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7ff f9cd 	bl	8006e02 <USBD_SetClassConfig>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d104      	bne.n	8007a78 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f8f2 	bl	8007c5a <USBD_CtlError>
          return;
 8007a76:	e012      	b.n	8007a9e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 f9b7 	bl	8007dec <USBD_CtlSendStatus>
      break;
 8007a7e:	e00e      	b.n	8007a9e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 f9b3 	bl	8007dec <USBD_CtlSendStatus>
      break;
 8007a86:	e00a      	b.n	8007a9e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f8e5 	bl	8007c5a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007a90:	4b04      	ldr	r3, [pc, #16]	; (8007aa4 <USBD_SetConfig+0x118>)
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	4619      	mov	r1, r3
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7ff f9d2 	bl	8006e40 <USBD_ClrClassConfig>
      break;
 8007a9c:	bf00      	nop
    }
  }
}
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	200001bc 	.word	0x200001bc

08007aa8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	88db      	ldrh	r3, [r3, #6]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d004      	beq.n	8007ac4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f8cc 	bl	8007c5a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007ac2:	e021      	b.n	8007b08 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	db17      	blt.n	8007afe <USBD_GetConfig+0x56>
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	dd02      	ble.n	8007ad8 <USBD_GetConfig+0x30>
 8007ad2:	2b03      	cmp	r3, #3
 8007ad4:	d00b      	beq.n	8007aee <USBD_GetConfig+0x46>
 8007ad6:	e012      	b.n	8007afe <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f922 	bl	8007d30 <USBD_CtlSendData>
      break;
 8007aec:	e00c      	b.n	8007b08 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	3304      	adds	r3, #4
 8007af2:	2201      	movs	r2, #1
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f91a 	bl	8007d30 <USBD_CtlSendData>
      break;
 8007afc:	e004      	b.n	8007b08 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f8aa 	bl	8007c5a <USBD_CtlError>
      break;
 8007b06:	bf00      	nop
}
 8007b08:	bf00      	nop
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b20:	3b01      	subs	r3, #1
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d81e      	bhi.n	8007b64 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	88db      	ldrh	r3, [r3, #6]
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d004      	beq.n	8007b38 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f892 	bl	8007c5a <USBD_CtlError>
      break;
 8007b36:	e01a      	b.n	8007b6e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d005      	beq.n	8007b54 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	f043 0202 	orr.w	r2, r3, #2
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	330c      	adds	r3, #12
 8007b58:	2202      	movs	r2, #2
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f8e7 	bl	8007d30 <USBD_CtlSendData>
    break;
 8007b62:	e004      	b.n	8007b6e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f877 	bl	8007c5a <USBD_CtlError>
    break;
 8007b6c:	bf00      	nop
  }
}
 8007b6e:	bf00      	nop
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b082      	sub	sp, #8
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	885b      	ldrh	r3, [r3, #2]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d106      	bne.n	8007b96 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f92b 	bl	8007dec <USBD_CtlSendStatus>
  }

}
 8007b96:	bf00      	nop
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b082      	sub	sp, #8
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d80b      	bhi.n	8007bcc <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	885b      	ldrh	r3, [r3, #2]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d10c      	bne.n	8007bd6 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f911 	bl	8007dec <USBD_CtlSendStatus>
    }
    break;
 8007bca:	e004      	b.n	8007bd6 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f843 	bl	8007c5a <USBD_CtlError>
    break;
 8007bd4:	e000      	b.n	8007bd8 <USBD_ClrFeature+0x3a>
    break;
 8007bd6:	bf00      	nop
  }
}
 8007bd8:	bf00      	nop
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	781a      	ldrb	r2, [r3, #0]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	785a      	ldrb	r2, [r3, #1]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	3302      	adds	r3, #2
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	3303      	adds	r3, #3
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	021b      	lsls	r3, r3, #8
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	4413      	add	r3, r2
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	3304      	adds	r3, #4
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	3305      	adds	r3, #5
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	021b      	lsls	r3, r3, #8
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	4413      	add	r3, r2
 8007c2c:	b29a      	uxth	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	3306      	adds	r3, #6
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	3307      	adds	r3, #7
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	021b      	lsls	r3, r3, #8
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	4413      	add	r3, r2
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	80da      	strh	r2, [r3, #6]

}
 8007c4e:	bf00      	nop
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b082      	sub	sp, #8
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007c64:	2180      	movs	r1, #128	; 0x80
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f001 fa1c 	bl	80090a4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f001 fa18 	bl	80090a4 <USBD_LL_StallEP>
}
 8007c74:	bf00      	nop
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d032      	beq.n	8007cf8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f000 f834 	bl	8007d00 <USBD_GetLen>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	005b      	lsls	r3, r3, #1
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
 8007ca8:	1c5a      	adds	r2, r3, #1
 8007caa:	75fa      	strb	r2, [r7, #23]
 8007cac:	461a      	mov	r2, r3
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	7812      	ldrb	r2, [r2, #0]
 8007cb6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007cb8:	7dfb      	ldrb	r3, [r7, #23]
 8007cba:	1c5a      	adds	r2, r3, #1
 8007cbc:	75fa      	strb	r2, [r7, #23]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	2203      	movs	r2, #3
 8007cc6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007cc8:	e012      	b.n	8007cf0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	1c5a      	adds	r2, r3, #1
 8007cce:	60fa      	str	r2, [r7, #12]
 8007cd0:	7dfa      	ldrb	r2, [r7, #23]
 8007cd2:	1c51      	adds	r1, r2, #1
 8007cd4:	75f9      	strb	r1, [r7, #23]
 8007cd6:	4611      	mov	r1, r2
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	440a      	add	r2, r1
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007ce0:	7dfb      	ldrb	r3, [r7, #23]
 8007ce2:	1c5a      	adds	r2, r3, #1
 8007ce4:	75fa      	strb	r2, [r7, #23]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	4413      	add	r3, r2
 8007cec:	2200      	movs	r2, #0
 8007cee:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1e8      	bne.n	8007cca <USBD_GetString+0x4e>
    }
  }
}
 8007cf8:	bf00      	nop
 8007cfa:	3718      	adds	r7, #24
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8007d0c:	e005      	b.n	8007d1a <USBD_GetLen+0x1a>
    {
        len++;
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
 8007d10:	3301      	adds	r3, #1
 8007d12:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	3301      	adds	r3, #1
 8007d18:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1f5      	bne.n	8007d0e <USBD_GetLen+0xe>
    }

    return len;
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2202      	movs	r2, #2
 8007d42:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8007d46:	88fa      	ldrh	r2, [r7, #6]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007d4c:	88fa      	ldrh	r2, [r7, #6]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007d52:	88fb      	ldrh	r3, [r7, #6]
 8007d54:	68ba      	ldr	r2, [r7, #8]
 8007d56:	2100      	movs	r1, #0
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f001 fa2c 	bl	80091b6 <USBD_LL_Transmit>

  return USBD_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	4613      	mov	r3, r2
 8007d74:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007d76:	88fb      	ldrh	r3, [r7, #6]
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f001 fa1a 	bl	80091b6 <USBD_LL_Transmit>

  return USBD_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	4613      	mov	r3, r2
 8007d98:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2203      	movs	r2, #3
 8007d9e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8007da2:	88fa      	ldrh	r2, [r7, #6]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8007daa:	88fa      	ldrh	r2, [r7, #6]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007db2:	88fb      	ldrh	r3, [r7, #6]
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	2100      	movs	r1, #0
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f001 fa1f 	bl	80091fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007dd6:	88fb      	ldrh	r3, [r7, #6]
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	2100      	movs	r1, #0
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f001 fa0d 	bl	80091fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2204      	movs	r2, #4
 8007df8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	2200      	movs	r2, #0
 8007e00:	2100      	movs	r1, #0
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f001 f9d7 	bl	80091b6 <USBD_LL_Transmit>

  return USBD_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b082      	sub	sp, #8
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2205      	movs	r2, #5
 8007e1e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007e22:	2300      	movs	r3, #0
 8007e24:	2200      	movs	r2, #0
 8007e26:	2100      	movs	r1, #0
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f001 f9e7 	bl	80091fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007e3c:	f7f8 fb62 	bl	8000504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007e40:	f000 f812 	bl	8007e68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007e44:	f000 f990 	bl	8008168 <MX_GPIO_Init>
  MX_FSMC_Init();
 8007e48:	f000 fb10 	bl	800846c <MX_FSMC_Init>
  MX_I2C1_Init();
 8007e4c:	f000 f8a6 	bl	8007f9c <MX_I2C1_Init>
  MX_I2C2_Init();
 8007e50:	f000 f8d2 	bl	8007ff8 <MX_I2C2_Init>
  MX_I2S3_Init();
 8007e54:	f000 f8fe 	bl	8008054 <MX_I2S3_Init>
  MX_QUADSPI_Init();
 8007e58:	f000 f92a 	bl	80080b0 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 8007e5c:	f000 f954 	bl	8008108 <MX_SDIO_SD_Init>
  MX_USB_DEVICE_Init();
 8007e60:	f000 fe9e 	bl	8008ba0 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007e64:	e7fe      	b.n	8007e64 <main+0x2c>
	...

08007e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b0a4      	sub	sp, #144	; 0x90
 8007e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007e6e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007e72:	2234      	movs	r2, #52	; 0x34
 8007e74:	2100      	movs	r1, #0
 8007e76:	4618      	mov	r0, r3
 8007e78:	f001 fbe2 	bl	8009640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007e7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007e80:	2200      	movs	r2, #0
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	605a      	str	r2, [r3, #4]
 8007e86:	609a      	str	r2, [r3, #8]
 8007e88:	60da      	str	r2, [r3, #12]
 8007e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007e8c:	f107 030c 	add.w	r3, r7, #12
 8007e90:	223c      	movs	r2, #60	; 0x3c
 8007e92:	2100      	movs	r1, #0
 8007e94:	4618      	mov	r0, r3
 8007e96:	f001 fbd3 	bl	8009640 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	60bb      	str	r3, [r7, #8]
 8007e9e:	4b3d      	ldr	r3, [pc, #244]	; (8007f94 <SystemClock_Config+0x12c>)
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea2:	4a3c      	ldr	r2, [pc, #240]	; (8007f94 <SystemClock_Config+0x12c>)
 8007ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8007eaa:	4b3a      	ldr	r3, [pc, #232]	; (8007f94 <SystemClock_Config+0x12c>)
 8007eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eb2:	60bb      	str	r3, [r7, #8]
 8007eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	607b      	str	r3, [r7, #4]
 8007eba:	4b37      	ldr	r3, [pc, #220]	; (8007f98 <SystemClock_Config+0x130>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a36      	ldr	r2, [pc, #216]	; (8007f98 <SystemClock_Config+0x130>)
 8007ec0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ec4:	6013      	str	r3, [r2, #0]
 8007ec6:	4b34      	ldr	r3, [pc, #208]	; (8007f98 <SystemClock_Config+0x130>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007ece:	607b      	str	r3, [r7, #4]
 8007ed0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8007ed6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8007eda:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007edc:	2301      	movs	r3, #1
 8007ede:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007ee0:	2310      	movs	r3, #16
 8007ee2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007ee8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007eec:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 4;
 8007eee:	2304      	movs	r3, #4
 8007ef0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8007ef2:	2348      	movs	r3, #72	; 0x48
 8007ef4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007ef8:	2302      	movs	r3, #2
 8007efa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8007efe:	2303      	movs	r3, #3
 8007f00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007f04:	2302      	movs	r3, #2
 8007f06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007f0a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fb fc2a 	bl	8003768 <HAL_RCC_OscConfig>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d001      	beq.n	8007f1e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8007f1a:	f000 fb09 	bl	8008530 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007f1e:	230f      	movs	r3, #15
 8007f20:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007f22:	2302      	movs	r3, #2
 8007f24:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007f26:	2300      	movs	r3, #0
 8007f28:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007f2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f2e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007f30:	2300      	movs	r3, #0
 8007f32:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007f34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007f38:	2102      	movs	r1, #2
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fa feb0 	bl	8002ca0 <HAL_RCC_ClockConfig>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8007f46:	f000 faf3 	bl	8008530 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_SDIO
 8007f4a:	2361      	movs	r3, #97	; 0x61
 8007f4c:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8007f4e:	2332      	movs	r3, #50	; 0x32
 8007f50:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 4;
 8007f52:	2304      	movs	r3, #4
 8007f54:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8007f56:	2302      	movs	r3, #2
 8007f58:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8007f5a:	2302      	movs	r3, #2
 8007f5c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8007f62:	2300      	movs	r3, #0
 8007f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8007f66:	2300      	movs	r3, #0
 8007f68:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007f6e:	f107 030c 	add.w	r3, r7, #12
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fb f8da 	bl	800312c <HAL_RCCEx_PeriphCLKConfig>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d001      	beq.n	8007f82 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8007f7e:	f000 fad7 	bl	8008530 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8007f82:	2200      	movs	r2, #0
 8007f84:	2100      	movs	r1, #0
 8007f86:	2000      	movs	r0, #0
 8007f88:	f7fa ff70 	bl	8002e6c <HAL_RCC_MCOConfig>
}
 8007f8c:	bf00      	nop
 8007f8e:	3790      	adds	r7, #144	; 0x90
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	40023800 	.word	0x40023800
 8007f98:	40007000 	.word	0x40007000

08007f9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007fa0:	4b12      	ldr	r3, [pc, #72]	; (8007fec <MX_I2C1_Init+0x50>)
 8007fa2:	4a13      	ldr	r2, [pc, #76]	; (8007ff0 <MX_I2C1_Init+0x54>)
 8007fa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007fa6:	4b11      	ldr	r3, [pc, #68]	; (8007fec <MX_I2C1_Init+0x50>)
 8007fa8:	4a12      	ldr	r2, [pc, #72]	; (8007ff4 <MX_I2C1_Init+0x58>)
 8007faa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007fac:	4b0f      	ldr	r3, [pc, #60]	; (8007fec <MX_I2C1_Init+0x50>)
 8007fae:	2200      	movs	r2, #0
 8007fb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007fb2:	4b0e      	ldr	r3, [pc, #56]	; (8007fec <MX_I2C1_Init+0x50>)
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007fb8:	4b0c      	ldr	r3, [pc, #48]	; (8007fec <MX_I2C1_Init+0x50>)
 8007fba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007fbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007fc0:	4b0a      	ldr	r3, [pc, #40]	; (8007fec <MX_I2C1_Init+0x50>)
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007fc6:	4b09      	ldr	r3, [pc, #36]	; (8007fec <MX_I2C1_Init+0x50>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007fcc:	4b07      	ldr	r3, [pc, #28]	; (8007fec <MX_I2C1_Init+0x50>)
 8007fce:	2200      	movs	r2, #0
 8007fd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007fd2:	4b06      	ldr	r3, [pc, #24]	; (8007fec <MX_I2C1_Init+0x50>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007fd8:	4804      	ldr	r0, [pc, #16]	; (8007fec <MX_I2C1_Init+0x50>)
 8007fda:	f7f8 fde5 	bl	8000ba8 <HAL_I2C_Init>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d001      	beq.n	8007fe8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007fe4:	f000 faa4 	bl	8008530 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007fe8:	bf00      	nop
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	200001d4 	.word	0x200001d4
 8007ff0:	40005400 	.word	0x40005400
 8007ff4:	000186a0 	.word	0x000186a0

08007ff8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007ffc:	4b12      	ldr	r3, [pc, #72]	; (8008048 <MX_I2C2_Init+0x50>)
 8007ffe:	4a13      	ldr	r2, [pc, #76]	; (800804c <MX_I2C2_Init+0x54>)
 8008000:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8008002:	4b11      	ldr	r3, [pc, #68]	; (8008048 <MX_I2C2_Init+0x50>)
 8008004:	4a12      	ldr	r2, [pc, #72]	; (8008050 <MX_I2C2_Init+0x58>)
 8008006:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008008:	4b0f      	ldr	r3, [pc, #60]	; (8008048 <MX_I2C2_Init+0x50>)
 800800a:	2200      	movs	r2, #0
 800800c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800800e:	4b0e      	ldr	r3, [pc, #56]	; (8008048 <MX_I2C2_Init+0x50>)
 8008010:	2200      	movs	r2, #0
 8008012:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008014:	4b0c      	ldr	r3, [pc, #48]	; (8008048 <MX_I2C2_Init+0x50>)
 8008016:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800801a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800801c:	4b0a      	ldr	r3, [pc, #40]	; (8008048 <MX_I2C2_Init+0x50>)
 800801e:	2200      	movs	r2, #0
 8008020:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8008022:	4b09      	ldr	r3, [pc, #36]	; (8008048 <MX_I2C2_Init+0x50>)
 8008024:	2200      	movs	r2, #0
 8008026:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008028:	4b07      	ldr	r3, [pc, #28]	; (8008048 <MX_I2C2_Init+0x50>)
 800802a:	2200      	movs	r2, #0
 800802c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800802e:	4b06      	ldr	r3, [pc, #24]	; (8008048 <MX_I2C2_Init+0x50>)
 8008030:	2200      	movs	r2, #0
 8008032:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008034:	4804      	ldr	r0, [pc, #16]	; (8008048 <MX_I2C2_Init+0x50>)
 8008036:	f7f8 fdb7 	bl	8000ba8 <HAL_I2C_Init>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8008040:	f000 fa76 	bl	8008530 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8008044:	bf00      	nop
 8008046:	bd80      	pop	{r7, pc}
 8008048:	20000228 	.word	0x20000228
 800804c:	40005800 	.word	0x40005800
 8008050:	000186a0 	.word	0x000186a0

08008054 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8008058:	4b13      	ldr	r3, [pc, #76]	; (80080a8 <MX_I2S3_Init+0x54>)
 800805a:	4a14      	ldr	r2, [pc, #80]	; (80080ac <MX_I2S3_Init+0x58>)
 800805c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800805e:	4b12      	ldr	r3, [pc, #72]	; (80080a8 <MX_I2S3_Init+0x54>)
 8008060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008064:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8008066:	4b10      	ldr	r3, [pc, #64]	; (80080a8 <MX_I2S3_Init+0x54>)
 8008068:	2200      	movs	r2, #0
 800806a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800806c:	4b0e      	ldr	r3, [pc, #56]	; (80080a8 <MX_I2S3_Init+0x54>)
 800806e:	2200      	movs	r2, #0
 8008070:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8008072:	4b0d      	ldr	r3, [pc, #52]	; (80080a8 <MX_I2S3_Init+0x54>)
 8008074:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008078:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 800807a:	4b0b      	ldr	r3, [pc, #44]	; (80080a8 <MX_I2S3_Init+0x54>)
 800807c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8008080:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8008082:	4b09      	ldr	r3, [pc, #36]	; (80080a8 <MX_I2S3_Init+0x54>)
 8008084:	2200      	movs	r2, #0
 8008086:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8008088:	4b07      	ldr	r3, [pc, #28]	; (80080a8 <MX_I2S3_Init+0x54>)
 800808a:	2200      	movs	r2, #0
 800808c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800808e:	4b06      	ldr	r3, [pc, #24]	; (80080a8 <MX_I2S3_Init+0x54>)
 8008090:	2201      	movs	r2, #1
 8008092:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8008094:	4804      	ldr	r0, [pc, #16]	; (80080a8 <MX_I2S3_Init+0x54>)
 8008096:	f7f8 febf 	bl	8000e18 <HAL_I2S_Init>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d001      	beq.n	80080a4 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80080a0:	f000 fa46 	bl	8008530 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80080a4:	bf00      	nop
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	20000350 	.word	0x20000350
 80080ac:	40003c00 	.word	0x40003c00

080080b0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80080b4:	4b12      	ldr	r3, [pc, #72]	; (8008100 <MX_QUADSPI_Init+0x50>)
 80080b6:	4a13      	ldr	r2, [pc, #76]	; (8008104 <MX_QUADSPI_Init+0x54>)
 80080b8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80080ba:	4b11      	ldr	r3, [pc, #68]	; (8008100 <MX_QUADSPI_Init+0x50>)
 80080bc:	22ff      	movs	r2, #255	; 0xff
 80080be:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80080c0:	4b0f      	ldr	r3, [pc, #60]	; (8008100 <MX_QUADSPI_Init+0x50>)
 80080c2:	2201      	movs	r2, #1
 80080c4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80080c6:	4b0e      	ldr	r3, [pc, #56]	; (8008100 <MX_QUADSPI_Init+0x50>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80080cc:	4b0c      	ldr	r3, [pc, #48]	; (8008100 <MX_QUADSPI_Init+0x50>)
 80080ce:	2201      	movs	r2, #1
 80080d0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80080d2:	4b0b      	ldr	r3, [pc, #44]	; (8008100 <MX_QUADSPI_Init+0x50>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80080d8:	4b09      	ldr	r3, [pc, #36]	; (8008100 <MX_QUADSPI_Init+0x50>)
 80080da:	2200      	movs	r2, #0
 80080dc:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80080de:	4b08      	ldr	r3, [pc, #32]	; (8008100 <MX_QUADSPI_Init+0x50>)
 80080e0:	2200      	movs	r2, #0
 80080e2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80080e4:	4b06      	ldr	r3, [pc, #24]	; (8008100 <MX_QUADSPI_Init+0x50>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80080ea:	4805      	ldr	r0, [pc, #20]	; (8008100 <MX_QUADSPI_Init+0x50>)
 80080ec:	f7fa fd14 	bl	8002b18 <HAL_QSPI_Init>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80080f6:	f000 fa1b 	bl	8008530 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80080fa:	bf00      	nop
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	20000398 	.word	0x20000398
 8008104:	a0001000 	.word	0xa0001000

08008108 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800810c:	4b14      	ldr	r3, [pc, #80]	; (8008160 <MX_SDIO_SD_Init+0x58>)
 800810e:	4a15      	ldr	r2, [pc, #84]	; (8008164 <MX_SDIO_SD_Init+0x5c>)
 8008110:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8008112:	4b13      	ldr	r3, [pc, #76]	; (8008160 <MX_SDIO_SD_Init+0x58>)
 8008114:	2200      	movs	r2, #0
 8008116:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8008118:	4b11      	ldr	r3, [pc, #68]	; (8008160 <MX_SDIO_SD_Init+0x58>)
 800811a:	2200      	movs	r2, #0
 800811c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800811e:	4b10      	ldr	r3, [pc, #64]	; (8008160 <MX_SDIO_SD_Init+0x58>)
 8008120:	2200      	movs	r2, #0
 8008122:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8008124:	4b0e      	ldr	r3, [pc, #56]	; (8008160 <MX_SDIO_SD_Init+0x58>)
 8008126:	2200      	movs	r2, #0
 8008128:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800812a:	4b0d      	ldr	r3, [pc, #52]	; (8008160 <MX_SDIO_SD_Init+0x58>)
 800812c:	2200      	movs	r2, #0
 800812e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8008130:	4b0b      	ldr	r3, [pc, #44]	; (8008160 <MX_SDIO_SD_Init+0x58>)
 8008132:	2200      	movs	r2, #0
 8008134:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8008136:	480a      	ldr	r0, [pc, #40]	; (8008160 <MX_SDIO_SD_Init+0x58>)
 8008138:	f7fb fd58 	bl	8003bec <HAL_SD_Init>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8008142:	f000 f9f5 	bl	8008530 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8008146:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800814a:	4805      	ldr	r0, [pc, #20]	; (8008160 <MX_SDIO_SD_Init+0x58>)
 800814c:	f7fb ff82 	bl	8004054 <HAL_SD_ConfigWideBusOperation>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8008156:	f000 f9eb 	bl	8008530 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800815a:	bf00      	nop
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	200002cc 	.word	0x200002cc
 8008164:	40012c00 	.word	0x40012c00

08008168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b08e      	sub	sp, #56	; 0x38
 800816c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800816e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008172:	2200      	movs	r2, #0
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	605a      	str	r2, [r3, #4]
 8008178:	609a      	str	r2, [r3, #8]
 800817a:	60da      	str	r2, [r3, #12]
 800817c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800817e:	2300      	movs	r3, #0
 8008180:	623b      	str	r3, [r7, #32]
 8008182:	4bb1      	ldr	r3, [pc, #708]	; (8008448 <MX_GPIO_Init+0x2e0>)
 8008184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008186:	4ab0      	ldr	r2, [pc, #704]	; (8008448 <MX_GPIO_Init+0x2e0>)
 8008188:	f043 0310 	orr.w	r3, r3, #16
 800818c:	6313      	str	r3, [r2, #48]	; 0x30
 800818e:	4bae      	ldr	r3, [pc, #696]	; (8008448 <MX_GPIO_Init+0x2e0>)
 8008190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008192:	f003 0310 	and.w	r3, r3, #16
 8008196:	623b      	str	r3, [r7, #32]
 8008198:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800819a:	2300      	movs	r3, #0
 800819c:	61fb      	str	r3, [r7, #28]
 800819e:	4baa      	ldr	r3, [pc, #680]	; (8008448 <MX_GPIO_Init+0x2e0>)
 80081a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a2:	4aa9      	ldr	r2, [pc, #676]	; (8008448 <MX_GPIO_Init+0x2e0>)
 80081a4:	f043 0304 	orr.w	r3, r3, #4
 80081a8:	6313      	str	r3, [r2, #48]	; 0x30
 80081aa:	4ba7      	ldr	r3, [pc, #668]	; (8008448 <MX_GPIO_Init+0x2e0>)
 80081ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ae:	f003 0304 	and.w	r3, r3, #4
 80081b2:	61fb      	str	r3, [r7, #28]
 80081b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80081b6:	2300      	movs	r3, #0
 80081b8:	61bb      	str	r3, [r7, #24]
 80081ba:	4ba3      	ldr	r3, [pc, #652]	; (8008448 <MX_GPIO_Init+0x2e0>)
 80081bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081be:	4aa2      	ldr	r2, [pc, #648]	; (8008448 <MX_GPIO_Init+0x2e0>)
 80081c0:	f043 0320 	orr.w	r3, r3, #32
 80081c4:	6313      	str	r3, [r2, #48]	; 0x30
 80081c6:	4ba0      	ldr	r3, [pc, #640]	; (8008448 <MX_GPIO_Init+0x2e0>)
 80081c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ca:	f003 0320 	and.w	r3, r3, #32
 80081ce:	61bb      	str	r3, [r7, #24]
 80081d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80081d2:	2300      	movs	r3, #0
 80081d4:	617b      	str	r3, [r7, #20]
 80081d6:	4b9c      	ldr	r3, [pc, #624]	; (8008448 <MX_GPIO_Init+0x2e0>)
 80081d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081da:	4a9b      	ldr	r2, [pc, #620]	; (8008448 <MX_GPIO_Init+0x2e0>)
 80081dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081e0:	6313      	str	r3, [r2, #48]	; 0x30
 80081e2:	4b99      	ldr	r3, [pc, #612]	; (8008448 <MX_GPIO_Init+0x2e0>)
 80081e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ea:	617b      	str	r3, [r7, #20]
 80081ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80081ee:	2300      	movs	r3, #0
 80081f0:	613b      	str	r3, [r7, #16]
 80081f2:	4b95      	ldr	r3, [pc, #596]	; (8008448 <MX_GPIO_Init+0x2e0>)
 80081f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f6:	4a94      	ldr	r2, [pc, #592]	; (8008448 <MX_GPIO_Init+0x2e0>)
 80081f8:	f043 0301 	orr.w	r3, r3, #1
 80081fc:	6313      	str	r3, [r2, #48]	; 0x30
 80081fe:	4b92      	ldr	r3, [pc, #584]	; (8008448 <MX_GPIO_Init+0x2e0>)
 8008200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	613b      	str	r3, [r7, #16]
 8008208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800820a:	2300      	movs	r3, #0
 800820c:	60fb      	str	r3, [r7, #12]
 800820e:	4b8e      	ldr	r3, [pc, #568]	; (8008448 <MX_GPIO_Init+0x2e0>)
 8008210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008212:	4a8d      	ldr	r2, [pc, #564]	; (8008448 <MX_GPIO_Init+0x2e0>)
 8008214:	f043 0302 	orr.w	r3, r3, #2
 8008218:	6313      	str	r3, [r2, #48]	; 0x30
 800821a:	4b8b      	ldr	r3, [pc, #556]	; (8008448 <MX_GPIO_Init+0x2e0>)
 800821c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821e:	f003 0302 	and.w	r3, r3, #2
 8008222:	60fb      	str	r3, [r7, #12]
 8008224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008226:	2300      	movs	r3, #0
 8008228:	60bb      	str	r3, [r7, #8]
 800822a:	4b87      	ldr	r3, [pc, #540]	; (8008448 <MX_GPIO_Init+0x2e0>)
 800822c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800822e:	4a86      	ldr	r2, [pc, #536]	; (8008448 <MX_GPIO_Init+0x2e0>)
 8008230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008234:	6313      	str	r3, [r2, #48]	; 0x30
 8008236:	4b84      	ldr	r3, [pc, #528]	; (8008448 <MX_GPIO_Init+0x2e0>)
 8008238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800823e:	60bb      	str	r3, [r7, #8]
 8008240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008242:	2300      	movs	r3, #0
 8008244:	607b      	str	r3, [r7, #4]
 8008246:	4b80      	ldr	r3, [pc, #512]	; (8008448 <MX_GPIO_Init+0x2e0>)
 8008248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800824a:	4a7f      	ldr	r2, [pc, #508]	; (8008448 <MX_GPIO_Init+0x2e0>)
 800824c:	f043 0308 	orr.w	r3, r3, #8
 8008250:	6313      	str	r3, [r2, #48]	; 0x30
 8008252:	4b7d      	ldr	r3, [pc, #500]	; (8008448 <MX_GPIO_Init+0x2e0>)
 8008254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008256:	f003 0308 	and.w	r3, r3, #8
 800825a:	607b      	str	r3, [r7, #4]
 800825c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800825e:	2200      	movs	r2, #0
 8008260:	210f      	movs	r1, #15
 8008262:	487a      	ldr	r0, [pc, #488]	; (800844c <MX_GPIO_Init+0x2e4>)
 8008264:	f7f8 fc86 	bl	8000b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_BLCTRL_Pin|EXT_RESET_Pin|CTP_RST_Pin, GPIO_PIN_RESET);
 8008268:	2200      	movs	r2, #0
 800826a:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 800826e:	4878      	ldr	r0, [pc, #480]	; (8008450 <MX_GPIO_Init+0x2e8>)
 8008270:	f7f8 fc80 	bl	8000b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8008274:	2200      	movs	r2, #0
 8008276:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800827a:	4876      	ldr	r0, [pc, #472]	; (8008454 <MX_GPIO_Init+0x2ec>)
 800827c:	f7f8 fc7a 	bl	8000b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTGFS_PPWR_EN_GPIO_Port, USB_OTGFS_PPWR_EN_Pin, GPIO_PIN_SET);
 8008280:	2201      	movs	r2, #1
 8008282:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008286:	4874      	ldr	r0, [pc, #464]	; (8008458 <MX_GPIO_Init+0x2f0>)
 8008288:	f7f8 fc74 	bl	8000b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin;
 800828c:	230f      	movs	r3, #15
 800828e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8008290:	2311      	movs	r3, #17
 8008292:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008294:	2300      	movs	r3, #0
 8008296:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008298:	2300      	movs	r3, #0
 800829a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800829c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082a0:	4619      	mov	r1, r3
 80082a2:	486a      	ldr	r0, [pc, #424]	; (800844c <MX_GPIO_Init+0x2e4>)
 80082a4:	f7f8 fad4 	bl	8000850 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN3_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN3_Pin;
 80082a8:	2310      	movs	r3, #16
 80082aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082ac:	2302      	movs	r3, #2
 80082ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082b0:	2300      	movs	r3, #0
 80082b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082b4:	2300      	movs	r3, #0
 80082b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 80082b8:	2308      	movs	r3, #8
 80082ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM_DATIN3_GPIO_Port, &GPIO_InitStruct);
 80082bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082c0:	4619      	mov	r1, r3
 80082c2:	4862      	ldr	r0, [pc, #392]	; (800844c <MX_GPIO_Init+0x2e4>)
 80082c4:	f7f8 fac4 	bl	8000850 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BLCTRL_Pin EXT_RESET_Pin CTP_RST_Pin */
  GPIO_InitStruct.Pin = LCD_BLCTRL_Pin|EXT_RESET_Pin|CTP_RST_Pin;
 80082c8:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 80082cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082ce:	2301      	movs	r3, #1
 80082d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082d2:	2300      	movs	r3, #0
 80082d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082d6:	2300      	movs	r3, #0
 80082d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80082da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082de:	4619      	mov	r1, r3
 80082e0:	485b      	ldr	r0, [pc, #364]	; (8008450 <MX_GPIO_Init+0x2e8>)
 80082e2:	f7f8 fab5 	bl	8000850 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 80082e6:	2304      	movs	r3, #4
 80082e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082ea:	2302      	movs	r3, #2
 80082ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ee:	2300      	movs	r3, #0
 80082f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082f2:	2300      	movs	r3, #0
 80082f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 80082f6:	2308      	movs	r3, #8
 80082f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80082fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082fe:	4619      	mov	r1, r3
 8008300:	4856      	ldr	r0, [pc, #344]	; (800845c <MX_GPIO_Init+0x2f4>)
 8008302:	f7f8 faa5 	bl	8000850 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8008306:	2301      	movs	r3, #1
 8008308:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800830a:	4b55      	ldr	r3, [pc, #340]	; (8008460 <MX_GPIO_Init+0x2f8>)
 800830c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800830e:	2300      	movs	r3, #0
 8008310:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8008312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008316:	4619      	mov	r1, r3
 8008318:	4852      	ldr	r0, [pc, #328]	; (8008464 <MX_GPIO_Init+0x2fc>)
 800831a:	f7f8 fa99 	bl	8000850 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800831e:	230c      	movs	r3, #12
 8008320:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008322:	2302      	movs	r3, #2
 8008324:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008326:	2300      	movs	r3, #0
 8008328:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800832a:	2303      	movs	r3, #3
 800832c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800832e:	2307      	movs	r3, #7
 8008330:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008336:	4619      	mov	r1, r3
 8008338:	484a      	ldr	r0, [pc, #296]	; (8008464 <MX_GPIO_Init+0x2fc>)
 800833a:	f7f8 fa89 	bl	8000850 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_DATIN0_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN0_Pin;
 800833e:	2302      	movs	r3, #2
 8008340:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008342:	2302      	movs	r3, #2
 8008344:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008346:	2300      	movs	r3, #0
 8008348:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800834a:	2300      	movs	r3, #0
 800834c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_DFSDM1;
 800834e:	2308      	movs	r3, #8
 8008350:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM_DATIN0_GPIO_Port, &GPIO_InitStruct);
 8008352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008356:	4619      	mov	r1, r3
 8008358:	4843      	ldr	r0, [pc, #268]	; (8008468 <MX_GPIO_Init+0x300>)
 800835a:	f7f8 fa79 	bl	8000850 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_RIGHT_Pin JOY_LEFT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin|JOY_LEFT_Pin;
 800835e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8008362:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008364:	2300      	movs	r3, #0
 8008366:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008368:	2300      	movs	r3, #0
 800836a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800836c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008370:	4619      	mov	r1, r3
 8008372:	4837      	ldr	r0, [pc, #220]	; (8008450 <MX_GPIO_Init+0x2e8>)
 8008374:	f7f8 fa6c 	bl	8000850 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_UP_Pin JOY_DOWN_Pin LCD_TE_Pin USB_OTGFS_OVRCR_Pin */
  GPIO_InitStruct.Pin = JOY_UP_Pin|JOY_DOWN_Pin|LCD_TE_Pin|USB_OTGFS_OVRCR_Pin;
 8008378:	2393      	movs	r3, #147	; 0x93
 800837a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800837c:	2300      	movs	r3, #0
 800837e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008380:	2300      	movs	r3, #0
 8008382:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008388:	4619      	mov	r1, r3
 800838a:	4833      	ldr	r0, [pc, #204]	; (8008458 <MX_GPIO_Init+0x2f0>)
 800838c:	f7f8 fa60 	bl	8000850 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_CKIN_Pin */
  GPIO_InitStruct.Pin = M2_CKIN_Pin;
 8008390:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008394:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008396:	2302      	movs	r3, #2
 8008398:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800839a:	2300      	movs	r3, #0
 800839c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800839e:	2300      	movs	r3, #0
 80083a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80083a2:	2305      	movs	r3, #5
 80083a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(M2_CKIN_GPIO_Port, &GPIO_InitStruct);
 80083a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083aa:	4619      	mov	r1, r3
 80083ac:	482e      	ldr	r0, [pc, #184]	; (8008468 <MX_GPIO_Init+0x300>)
 80083ae:	f7f8 fa4f 	bl	8000850 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 80083b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80083b8:	2301      	movs	r3, #1
 80083ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083bc:	2300      	movs	r3, #0
 80083be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083c0:	2300      	movs	r3, #0
 80083c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 80083c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083c8:	4619      	mov	r1, r3
 80083ca:	4822      	ldr	r0, [pc, #136]	; (8008454 <MX_GPIO_Init+0x2ec>)
 80083cc:	f7f8 fa40 	bl	8000850 <HAL_GPIO_Init>

  /*Configure GPIO pins : CODEC_INT_Pin CTP_INT_Pin */
  GPIO_InitStruct.Pin = CODEC_INT_Pin|CTP_INT_Pin;
 80083d0:	2324      	movs	r3, #36	; 0x24
 80083d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80083d4:	4b22      	ldr	r3, [pc, #136]	; (8008460 <MX_GPIO_Init+0x2f8>)
 80083d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083d8:	2300      	movs	r3, #0
 80083da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80083dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083e0:	4619      	mov	r1, r3
 80083e2:	481d      	ldr	r0, [pc, #116]	; (8008458 <MX_GPIO_Init+0x2f0>)
 80083e4:	f7f8 fa34 	bl	8000850 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_PPWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_PPWR_EN_Pin;
 80083e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80083ee:	2311      	movs	r3, #17
 80083f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083f2:	2300      	movs	r3, #0
 80083f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083f6:	2300      	movs	r3, #0
 80083f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTGFS_PPWR_EN_GPIO_Port, &GPIO_InitStruct);
 80083fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083fe:	4619      	mov	r1, r3
 8008400:	4815      	ldr	r0, [pc, #84]	; (8008458 <MX_GPIO_Init+0x2f0>)
 8008402:	f7f8 fa25 	bl	8000850 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_CKINA8_Pin */
  GPIO_InitStruct.Pin = M2_CKINA8_Pin;
 8008406:	f44f 7380 	mov.w	r3, #256	; 0x100
 800840a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800840c:	2302      	movs	r3, #2
 800840e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008410:	2300      	movs	r3, #0
 8008412:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008414:	2300      	movs	r3, #0
 8008416:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008418:	2300      	movs	r3, #0
 800841a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(M2_CKINA8_GPIO_Port, &GPIO_InitStruct);
 800841c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008420:	4619      	mov	r1, r3
 8008422:	4810      	ldr	r0, [pc, #64]	; (8008464 <MX_GPIO_Init+0x2fc>)
 8008424:	f7f8 fa14 	bl	8000850 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_DETECT_Pin */
  GPIO_InitStruct.Pin = uSD_DETECT_Pin;
 8008428:	2308      	movs	r3, #8
 800842a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800842c:	2300      	movs	r3, #0
 800842e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008430:	2300      	movs	r3, #0
 8008432:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(uSD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8008434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008438:	4619      	mov	r1, r3
 800843a:	4806      	ldr	r0, [pc, #24]	; (8008454 <MX_GPIO_Init+0x2ec>)
 800843c:	f7f8 fa08 	bl	8000850 <HAL_GPIO_Init>

}
 8008440:	bf00      	nop
 8008442:	3738      	adds	r7, #56	; 0x38
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	40023800 	.word	0x40023800
 800844c:	40021000 	.word	0x40021000
 8008450:	40021400 	.word	0x40021400
 8008454:	40020c00 	.word	0x40020c00
 8008458:	40021800 	.word	0x40021800
 800845c:	40020800 	.word	0x40020800
 8008460:	10110000 	.word	0x10110000
 8008464:	40020000 	.word	0x40020000
 8008468:	40020400 	.word	0x40020400

0800846c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b088      	sub	sp, #32
 8008470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8008472:	1d3b      	adds	r3, r7, #4
 8008474:	2200      	movs	r2, #0
 8008476:	601a      	str	r2, [r3, #0]
 8008478:	605a      	str	r2, [r3, #4]
 800847a:	609a      	str	r2, [r3, #8]
 800847c:	60da      	str	r2, [r3, #12]
 800847e:	611a      	str	r2, [r3, #16]
 8008480:	615a      	str	r2, [r3, #20]
 8008482:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8008484:	4b28      	ldr	r3, [pc, #160]	; (8008528 <MX_FSMC_Init+0xbc>)
 8008486:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800848a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800848c:	4b26      	ldr	r3, [pc, #152]	; (8008528 <MX_FSMC_Init+0xbc>)
 800848e:	4a27      	ldr	r2, [pc, #156]	; (800852c <MX_FSMC_Init+0xc0>)
 8008490:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8008492:	4b25      	ldr	r3, [pc, #148]	; (8008528 <MX_FSMC_Init+0xbc>)
 8008494:	2200      	movs	r2, #0
 8008496:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8008498:	4b23      	ldr	r3, [pc, #140]	; (8008528 <MX_FSMC_Init+0xbc>)
 800849a:	2200      	movs	r2, #0
 800849c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800849e:	4b22      	ldr	r3, [pc, #136]	; (8008528 <MX_FSMC_Init+0xbc>)
 80084a0:	2200      	movs	r2, #0
 80084a2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80084a4:	4b20      	ldr	r3, [pc, #128]	; (8008528 <MX_FSMC_Init+0xbc>)
 80084a6:	2210      	movs	r2, #16
 80084a8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80084aa:	4b1f      	ldr	r3, [pc, #124]	; (8008528 <MX_FSMC_Init+0xbc>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80084b0:	4b1d      	ldr	r3, [pc, #116]	; (8008528 <MX_FSMC_Init+0xbc>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80084b6:	4b1c      	ldr	r3, [pc, #112]	; (8008528 <MX_FSMC_Init+0xbc>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80084bc:	4b1a      	ldr	r3, [pc, #104]	; (8008528 <MX_FSMC_Init+0xbc>)
 80084be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80084c2:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80084c4:	4b18      	ldr	r3, [pc, #96]	; (8008528 <MX_FSMC_Init+0xbc>)
 80084c6:	2200      	movs	r2, #0
 80084c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80084ca:	4b17      	ldr	r3, [pc, #92]	; (8008528 <MX_FSMC_Init+0xbc>)
 80084cc:	2200      	movs	r2, #0
 80084ce:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80084d0:	4b15      	ldr	r3, [pc, #84]	; (8008528 <MX_FSMC_Init+0xbc>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80084d6:	4b14      	ldr	r3, [pc, #80]	; (8008528 <MX_FSMC_Init+0xbc>)
 80084d8:	2200      	movs	r2, #0
 80084da:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80084dc:	4b12      	ldr	r3, [pc, #72]	; (8008528 <MX_FSMC_Init+0xbc>)
 80084de:	2200      	movs	r2, #0
 80084e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80084e2:	4b11      	ldr	r3, [pc, #68]	; (8008528 <MX_FSMC_Init+0xbc>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80084e8:	4b0f      	ldr	r3, [pc, #60]	; (8008528 <MX_FSMC_Init+0xbc>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80084ee:	230f      	movs	r3, #15
 80084f0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80084f2:	230f      	movs	r3, #15
 80084f4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80084f6:	23ff      	movs	r3, #255	; 0xff
 80084f8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80084fa:	230f      	movs	r3, #15
 80084fc:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80084fe:	2310      	movs	r3, #16
 8008500:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8008502:	2311      	movs	r3, #17
 8008504:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8008506:	2300      	movs	r3, #0
 8008508:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800850a:	1d3b      	adds	r3, r7, #4
 800850c:	2200      	movs	r2, #0
 800850e:	4619      	mov	r1, r3
 8008510:	4805      	ldr	r0, [pc, #20]	; (8008528 <MX_FSMC_Init+0xbc>)
 8008512:	f7fc f8d7 	bl	80046c4 <HAL_SRAM_Init>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d001      	beq.n	8008520 <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 800851c:	f000 f808 	bl	8008530 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8008520:	bf00      	nop
 8008522:	3720      	adds	r7, #32
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	2000027c 	.word	0x2000027c
 800852c:	a0000104 	.word	0xa0000104

08008530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008530:	b480      	push	{r7}
 8008532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008534:	bf00      	nop
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
	...

08008540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008546:	2300      	movs	r3, #0
 8008548:	607b      	str	r3, [r7, #4]
 800854a:	4b10      	ldr	r3, [pc, #64]	; (800858c <HAL_MspInit+0x4c>)
 800854c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800854e:	4a0f      	ldr	r2, [pc, #60]	; (800858c <HAL_MspInit+0x4c>)
 8008550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008554:	6453      	str	r3, [r2, #68]	; 0x44
 8008556:	4b0d      	ldr	r3, [pc, #52]	; (800858c <HAL_MspInit+0x4c>)
 8008558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800855a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800855e:	607b      	str	r3, [r7, #4]
 8008560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008562:	2300      	movs	r3, #0
 8008564:	603b      	str	r3, [r7, #0]
 8008566:	4b09      	ldr	r3, [pc, #36]	; (800858c <HAL_MspInit+0x4c>)
 8008568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856a:	4a08      	ldr	r2, [pc, #32]	; (800858c <HAL_MspInit+0x4c>)
 800856c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008570:	6413      	str	r3, [r2, #64]	; 0x40
 8008572:	4b06      	ldr	r3, [pc, #24]	; (800858c <HAL_MspInit+0x4c>)
 8008574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800857a:	603b      	str	r3, [r7, #0]
 800857c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800857e:	bf00      	nop
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	40023800 	.word	0x40023800

08008590 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b08c      	sub	sp, #48	; 0x30
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008598:	f107 031c 	add.w	r3, r7, #28
 800859c:	2200      	movs	r2, #0
 800859e:	601a      	str	r2, [r3, #0]
 80085a0:	605a      	str	r2, [r3, #4]
 80085a2:	609a      	str	r2, [r3, #8]
 80085a4:	60da      	str	r2, [r3, #12]
 80085a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a3b      	ldr	r2, [pc, #236]	; (800869c <HAL_I2C_MspInit+0x10c>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d12c      	bne.n	800860c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80085b2:	2300      	movs	r3, #0
 80085b4:	61bb      	str	r3, [r7, #24]
 80085b6:	4b3a      	ldr	r3, [pc, #232]	; (80086a0 <HAL_I2C_MspInit+0x110>)
 80085b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ba:	4a39      	ldr	r2, [pc, #228]	; (80086a0 <HAL_I2C_MspInit+0x110>)
 80085bc:	f043 0302 	orr.w	r3, r3, #2
 80085c0:	6313      	str	r3, [r2, #48]	; 0x30
 80085c2:	4b37      	ldr	r3, [pc, #220]	; (80086a0 <HAL_I2C_MspInit+0x110>)
 80085c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c6:	f003 0302 	and.w	r3, r3, #2
 80085ca:	61bb      	str	r3, [r7, #24]
 80085cc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80085ce:	23c0      	movs	r3, #192	; 0xc0
 80085d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80085d2:	2312      	movs	r3, #18
 80085d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80085d6:	2301      	movs	r3, #1
 80085d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085da:	2303      	movs	r3, #3
 80085dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80085de:	2304      	movs	r3, #4
 80085e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80085e2:	f107 031c 	add.w	r3, r7, #28
 80085e6:	4619      	mov	r1, r3
 80085e8:	482e      	ldr	r0, [pc, #184]	; (80086a4 <HAL_I2C_MspInit+0x114>)
 80085ea:	f7f8 f931 	bl	8000850 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80085ee:	2300      	movs	r3, #0
 80085f0:	617b      	str	r3, [r7, #20]
 80085f2:	4b2b      	ldr	r3, [pc, #172]	; (80086a0 <HAL_I2C_MspInit+0x110>)
 80085f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f6:	4a2a      	ldr	r2, [pc, #168]	; (80086a0 <HAL_I2C_MspInit+0x110>)
 80085f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80085fc:	6413      	str	r3, [r2, #64]	; 0x40
 80085fe:	4b28      	ldr	r3, [pc, #160]	; (80086a0 <HAL_I2C_MspInit+0x110>)
 8008600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008606:	617b      	str	r3, [r7, #20]
 8008608:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800860a:	e042      	b.n	8008692 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a25      	ldr	r2, [pc, #148]	; (80086a8 <HAL_I2C_MspInit+0x118>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d13d      	bne.n	8008692 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008616:	2300      	movs	r3, #0
 8008618:	613b      	str	r3, [r7, #16]
 800861a:	4b21      	ldr	r3, [pc, #132]	; (80086a0 <HAL_I2C_MspInit+0x110>)
 800861c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861e:	4a20      	ldr	r2, [pc, #128]	; (80086a0 <HAL_I2C_MspInit+0x110>)
 8008620:	f043 0302 	orr.w	r3, r3, #2
 8008624:	6313      	str	r3, [r2, #48]	; 0x30
 8008626:	4b1e      	ldr	r3, [pc, #120]	; (80086a0 <HAL_I2C_MspInit+0x110>)
 8008628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862a:	f003 0302 	and.w	r3, r3, #2
 800862e:	613b      	str	r3, [r7, #16]
 8008630:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8008632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008638:	2312      	movs	r3, #18
 800863a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800863c:	2301      	movs	r3, #1
 800863e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008640:	2303      	movs	r3, #3
 8008642:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8008644:	2304      	movs	r3, #4
 8008646:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8008648:	f107 031c 	add.w	r3, r7, #28
 800864c:	4619      	mov	r1, r3
 800864e:	4815      	ldr	r0, [pc, #84]	; (80086a4 <HAL_I2C_MspInit+0x114>)
 8008650:	f7f8 f8fe 	bl	8000850 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8008654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800865a:	2312      	movs	r3, #18
 800865c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800865e:	2301      	movs	r3, #1
 8008660:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008662:	2303      	movs	r3, #3
 8008664:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8008666:	2309      	movs	r3, #9
 8008668:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 800866a:	f107 031c 	add.w	r3, r7, #28
 800866e:	4619      	mov	r1, r3
 8008670:	480c      	ldr	r0, [pc, #48]	; (80086a4 <HAL_I2C_MspInit+0x114>)
 8008672:	f7f8 f8ed 	bl	8000850 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8008676:	2300      	movs	r3, #0
 8008678:	60fb      	str	r3, [r7, #12]
 800867a:	4b09      	ldr	r3, [pc, #36]	; (80086a0 <HAL_I2C_MspInit+0x110>)
 800867c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867e:	4a08      	ldr	r2, [pc, #32]	; (80086a0 <HAL_I2C_MspInit+0x110>)
 8008680:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008684:	6413      	str	r3, [r2, #64]	; 0x40
 8008686:	4b06      	ldr	r3, [pc, #24]	; (80086a0 <HAL_I2C_MspInit+0x110>)
 8008688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800868e:	60fb      	str	r3, [r7, #12]
 8008690:	68fb      	ldr	r3, [r7, #12]
}
 8008692:	bf00      	nop
 8008694:	3730      	adds	r7, #48	; 0x30
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	40005400 	.word	0x40005400
 80086a0:	40023800 	.word	0x40023800
 80086a4:	40020400 	.word	0x40020400
 80086a8:	40005800 	.word	0x40005800

080086ac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b08c      	sub	sp, #48	; 0x30
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086b4:	f107 031c 	add.w	r3, r7, #28
 80086b8:	2200      	movs	r2, #0
 80086ba:	601a      	str	r2, [r3, #0]
 80086bc:	605a      	str	r2, [r3, #4]
 80086be:	609a      	str	r2, [r3, #8]
 80086c0:	60da      	str	r2, [r3, #12]
 80086c2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a3f      	ldr	r2, [pc, #252]	; (80087c8 <HAL_I2S_MspInit+0x11c>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d178      	bne.n	80087c0 <HAL_I2S_MspInit+0x114>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80086ce:	2300      	movs	r3, #0
 80086d0:	61bb      	str	r3, [r7, #24]
 80086d2:	4b3e      	ldr	r3, [pc, #248]	; (80087cc <HAL_I2S_MspInit+0x120>)
 80086d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d6:	4a3d      	ldr	r2, [pc, #244]	; (80087cc <HAL_I2S_MspInit+0x120>)
 80086d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086dc:	6413      	str	r3, [r2, #64]	; 0x40
 80086de:	4b3b      	ldr	r3, [pc, #236]	; (80087cc <HAL_I2S_MspInit+0x120>)
 80086e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086e6:	61bb      	str	r3, [r7, #24]
 80086e8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086ea:	2300      	movs	r3, #0
 80086ec:	617b      	str	r3, [r7, #20]
 80086ee:	4b37      	ldr	r3, [pc, #220]	; (80087cc <HAL_I2S_MspInit+0x120>)
 80086f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f2:	4a36      	ldr	r2, [pc, #216]	; (80087cc <HAL_I2S_MspInit+0x120>)
 80086f4:	f043 0301 	orr.w	r3, r3, #1
 80086f8:	6313      	str	r3, [r2, #48]	; 0x30
 80086fa:	4b34      	ldr	r3, [pc, #208]	; (80087cc <HAL_I2S_MspInit+0x120>)
 80086fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	617b      	str	r3, [r7, #20]
 8008704:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008706:	2300      	movs	r3, #0
 8008708:	613b      	str	r3, [r7, #16]
 800870a:	4b30      	ldr	r3, [pc, #192]	; (80087cc <HAL_I2S_MspInit+0x120>)
 800870c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800870e:	4a2f      	ldr	r2, [pc, #188]	; (80087cc <HAL_I2S_MspInit+0x120>)
 8008710:	f043 0302 	orr.w	r3, r3, #2
 8008714:	6313      	str	r3, [r2, #48]	; 0x30
 8008716:	4b2d      	ldr	r3, [pc, #180]	; (80087cc <HAL_I2S_MspInit+0x120>)
 8008718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871a:	f003 0302 	and.w	r3, r3, #2
 800871e:	613b      	str	r3, [r7, #16]
 8008720:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008722:	2300      	movs	r3, #0
 8008724:	60fb      	str	r3, [r7, #12]
 8008726:	4b29      	ldr	r3, [pc, #164]	; (80087cc <HAL_I2S_MspInit+0x120>)
 8008728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872a:	4a28      	ldr	r2, [pc, #160]	; (80087cc <HAL_I2S_MspInit+0x120>)
 800872c:	f043 0304 	orr.w	r3, r3, #4
 8008730:	6313      	str	r3, [r2, #48]	; 0x30
 8008732:	4b26      	ldr	r3, [pc, #152]	; (80087cc <HAL_I2S_MspInit+0x120>)
 8008734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008736:	f003 0304 	and.w	r3, r3, #4
 800873a:	60fb      	str	r3, [r7, #12]
 800873c:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> I2S3_CK
    PC7     ------> I2S3_MCK
    PB4     ------> I2S3_ext_SD
    PB5     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = CODEC_I2S3_WS_Pin;
 800873e:	2310      	movs	r3, #16
 8008740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008742:	2302      	movs	r3, #2
 8008744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008746:	2300      	movs	r3, #0
 8008748:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800874a:	2300      	movs	r3, #0
 800874c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800874e:	2306      	movs	r3, #6
 8008750:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8008752:	f107 031c 	add.w	r3, r7, #28
 8008756:	4619      	mov	r1, r3
 8008758:	481d      	ldr	r0, [pc, #116]	; (80087d0 <HAL_I2S_MspInit+0x124>)
 800875a:	f7f8 f879 	bl	8000850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_I2S3_SCK_Pin|CODEC_I2S3ext_SD_Pin;
 800875e:	f241 0310 	movw	r3, #4112	; 0x1010
 8008762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008764:	2302      	movs	r3, #2
 8008766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008768:	2300      	movs	r3, #0
 800876a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800876c:	2300      	movs	r3, #0
 800876e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8008770:	2307      	movs	r3, #7
 8008772:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008774:	f107 031c 	add.w	r3, r7, #28
 8008778:	4619      	mov	r1, r3
 800877a:	4816      	ldr	r0, [pc, #88]	; (80087d4 <HAL_I2S_MspInit+0x128>)
 800877c:	f7f8 f868 	bl	8000850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_I2S3_MCK_Pin;
 8008780:	2380      	movs	r3, #128	; 0x80
 8008782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008784:	2302      	movs	r3, #2
 8008786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008788:	2300      	movs	r3, #0
 800878a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800878c:	2300      	movs	r3, #0
 800878e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008790:	2306      	movs	r3, #6
 8008792:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 8008794:	f107 031c 	add.w	r3, r7, #28
 8008798:	4619      	mov	r1, r3
 800879a:	480f      	ldr	r0, [pc, #60]	; (80087d8 <HAL_I2S_MspInit+0x12c>)
 800879c:	f7f8 f858 	bl	8000850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_I2S3_SD_Pin;
 80087a0:	2320      	movs	r3, #32
 80087a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087a4:	2302      	movs	r3, #2
 80087a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087a8:	2300      	movs	r3, #0
 80087aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087ac:	2300      	movs	r3, #0
 80087ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80087b0:	2306      	movs	r3, #6
 80087b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_I2S3_SD_GPIO_Port, &GPIO_InitStruct);
 80087b4:	f107 031c 	add.w	r3, r7, #28
 80087b8:	4619      	mov	r1, r3
 80087ba:	4806      	ldr	r0, [pc, #24]	; (80087d4 <HAL_I2S_MspInit+0x128>)
 80087bc:	f7f8 f848 	bl	8000850 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80087c0:	bf00      	nop
 80087c2:	3730      	adds	r7, #48	; 0x30
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	40003c00 	.word	0x40003c00
 80087cc:	40023800 	.word	0x40023800
 80087d0:	40020000 	.word	0x40020000
 80087d4:	40020400 	.word	0x40020400
 80087d8:	40020800 	.word	0x40020800

080087dc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b08c      	sub	sp, #48	; 0x30
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087e4:	f107 031c 	add.w	r3, r7, #28
 80087e8:	2200      	movs	r2, #0
 80087ea:	601a      	str	r2, [r3, #0]
 80087ec:	605a      	str	r2, [r3, #4]
 80087ee:	609a      	str	r2, [r3, #8]
 80087f0:	60da      	str	r2, [r3, #12]
 80087f2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a3f      	ldr	r2, [pc, #252]	; (80088f8 <HAL_QSPI_MspInit+0x11c>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d178      	bne.n	80088f0 <HAL_QSPI_MspInit+0x114>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80087fe:	2300      	movs	r3, #0
 8008800:	61bb      	str	r3, [r7, #24]
 8008802:	4b3e      	ldr	r3, [pc, #248]	; (80088fc <HAL_QSPI_MspInit+0x120>)
 8008804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008806:	4a3d      	ldr	r2, [pc, #244]	; (80088fc <HAL_QSPI_MspInit+0x120>)
 8008808:	f043 0302 	orr.w	r3, r3, #2
 800880c:	6393      	str	r3, [r2, #56]	; 0x38
 800880e:	4b3b      	ldr	r3, [pc, #236]	; (80088fc <HAL_QSPI_MspInit+0x120>)
 8008810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008812:	f003 0302 	and.w	r3, r3, #2
 8008816:	61bb      	str	r3, [r7, #24]
 8008818:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800881a:	2300      	movs	r3, #0
 800881c:	617b      	str	r3, [r7, #20]
 800881e:	4b37      	ldr	r3, [pc, #220]	; (80088fc <HAL_QSPI_MspInit+0x120>)
 8008820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008822:	4a36      	ldr	r2, [pc, #216]	; (80088fc <HAL_QSPI_MspInit+0x120>)
 8008824:	f043 0320 	orr.w	r3, r3, #32
 8008828:	6313      	str	r3, [r2, #48]	; 0x30
 800882a:	4b34      	ldr	r3, [pc, #208]	; (80088fc <HAL_QSPI_MspInit+0x120>)
 800882c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882e:	f003 0320 	and.w	r3, r3, #32
 8008832:	617b      	str	r3, [r7, #20]
 8008834:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008836:	2300      	movs	r3, #0
 8008838:	613b      	str	r3, [r7, #16]
 800883a:	4b30      	ldr	r3, [pc, #192]	; (80088fc <HAL_QSPI_MspInit+0x120>)
 800883c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883e:	4a2f      	ldr	r2, [pc, #188]	; (80088fc <HAL_QSPI_MspInit+0x120>)
 8008840:	f043 0302 	orr.w	r3, r3, #2
 8008844:	6313      	str	r3, [r2, #48]	; 0x30
 8008846:	4b2d      	ldr	r3, [pc, #180]	; (80088fc <HAL_QSPI_MspInit+0x120>)
 8008848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884a:	f003 0302 	and.w	r3, r3, #2
 800884e:	613b      	str	r3, [r7, #16]
 8008850:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008852:	2300      	movs	r3, #0
 8008854:	60fb      	str	r3, [r7, #12]
 8008856:	4b29      	ldr	r3, [pc, #164]	; (80088fc <HAL_QSPI_MspInit+0x120>)
 8008858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885a:	4a28      	ldr	r2, [pc, #160]	; (80088fc <HAL_QSPI_MspInit+0x120>)
 800885c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008860:	6313      	str	r3, [r2, #48]	; 0x30
 8008862:	4b26      	ldr	r3, [pc, #152]	; (80088fc <HAL_QSPI_MspInit+0x120>)
 8008864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	68fb      	ldr	r3, [r7, #12]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PG6     ------> QUADSPI_BK1_NCS 
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 800886e:	23c0      	movs	r3, #192	; 0xc0
 8008870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008872:	2302      	movs	r3, #2
 8008874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008876:	2300      	movs	r3, #0
 8008878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800887a:	2303      	movs	r3, #3
 800887c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800887e:	2309      	movs	r3, #9
 8008880:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008882:	f107 031c 	add.w	r3, r7, #28
 8008886:	4619      	mov	r1, r3
 8008888:	481d      	ldr	r0, [pc, #116]	; (8008900 <HAL_QSPI_MspInit+0x124>)
 800888a:	f7f7 ffe1 	bl	8000850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 800888e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008894:	2302      	movs	r3, #2
 8008896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008898:	2300      	movs	r3, #0
 800889a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800889c:	2303      	movs	r3, #3
 800889e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80088a0:	230a      	movs	r3, #10
 80088a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80088a4:	f107 031c 	add.w	r3, r7, #28
 80088a8:	4619      	mov	r1, r3
 80088aa:	4815      	ldr	r0, [pc, #84]	; (8008900 <HAL_QSPI_MspInit+0x124>)
 80088ac:	f7f7 ffd0 	bl	8000850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 80088b0:	2304      	movs	r3, #4
 80088b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088b4:	2302      	movs	r3, #2
 80088b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088b8:	2300      	movs	r3, #0
 80088ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088bc:	2303      	movs	r3, #3
 80088be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80088c0:	2309      	movs	r3, #9
 80088c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80088c4:	f107 031c 	add.w	r3, r7, #28
 80088c8:	4619      	mov	r1, r3
 80088ca:	480e      	ldr	r0, [pc, #56]	; (8008904 <HAL_QSPI_MspInit+0x128>)
 80088cc:	f7f7 ffc0 	bl	8000850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80088d0:	2340      	movs	r3, #64	; 0x40
 80088d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088d4:	2302      	movs	r3, #2
 80088d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088d8:	2300      	movs	r3, #0
 80088da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088dc:	2303      	movs	r3, #3
 80088de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80088e0:	230a      	movs	r3, #10
 80088e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80088e4:	f107 031c 	add.w	r3, r7, #28
 80088e8:	4619      	mov	r1, r3
 80088ea:	4807      	ldr	r0, [pc, #28]	; (8008908 <HAL_QSPI_MspInit+0x12c>)
 80088ec:	f7f7 ffb0 	bl	8000850 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80088f0:	bf00      	nop
 80088f2:	3730      	adds	r7, #48	; 0x30
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	a0001000 	.word	0xa0001000
 80088fc:	40023800 	.word	0x40023800
 8008900:	40021400 	.word	0x40021400
 8008904:	40020400 	.word	0x40020400
 8008908:	40021800 	.word	0x40021800

0800890c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b08a      	sub	sp, #40	; 0x28
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008914:	f107 0314 	add.w	r3, r7, #20
 8008918:	2200      	movs	r2, #0
 800891a:	601a      	str	r2, [r3, #0]
 800891c:	605a      	str	r2, [r3, #4]
 800891e:	609a      	str	r2, [r3, #8]
 8008920:	60da      	str	r2, [r3, #12]
 8008922:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a28      	ldr	r2, [pc, #160]	; (80089cc <HAL_SD_MspInit+0xc0>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d14a      	bne.n	80089c4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800892e:	2300      	movs	r3, #0
 8008930:	613b      	str	r3, [r7, #16]
 8008932:	4b27      	ldr	r3, [pc, #156]	; (80089d0 <HAL_SD_MspInit+0xc4>)
 8008934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008936:	4a26      	ldr	r2, [pc, #152]	; (80089d0 <HAL_SD_MspInit+0xc4>)
 8008938:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800893c:	6453      	str	r3, [r2, #68]	; 0x44
 800893e:	4b24      	ldr	r3, [pc, #144]	; (80089d0 <HAL_SD_MspInit+0xc4>)
 8008940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008946:	613b      	str	r3, [r7, #16]
 8008948:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800894a:	2300      	movs	r3, #0
 800894c:	60fb      	str	r3, [r7, #12]
 800894e:	4b20      	ldr	r3, [pc, #128]	; (80089d0 <HAL_SD_MspInit+0xc4>)
 8008950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008952:	4a1f      	ldr	r2, [pc, #124]	; (80089d0 <HAL_SD_MspInit+0xc4>)
 8008954:	f043 0304 	orr.w	r3, r3, #4
 8008958:	6313      	str	r3, [r2, #48]	; 0x30
 800895a:	4b1d      	ldr	r3, [pc, #116]	; (80089d0 <HAL_SD_MspInit+0xc4>)
 800895c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800895e:	f003 0304 	and.w	r3, r3, #4
 8008962:	60fb      	str	r3, [r7, #12]
 8008964:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008966:	2300      	movs	r3, #0
 8008968:	60bb      	str	r3, [r7, #8]
 800896a:	4b19      	ldr	r3, [pc, #100]	; (80089d0 <HAL_SD_MspInit+0xc4>)
 800896c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896e:	4a18      	ldr	r2, [pc, #96]	; (80089d0 <HAL_SD_MspInit+0xc4>)
 8008970:	f043 0308 	orr.w	r3, r3, #8
 8008974:	6313      	str	r3, [r2, #48]	; 0x30
 8008976:	4b16      	ldr	r3, [pc, #88]	; (80089d0 <HAL_SD_MspInit+0xc4>)
 8008978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897a:	f003 0308 	and.w	r3, r3, #8
 800897e:	60bb      	str	r3, [r7, #8]
 8008980:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = uSD_D0_Pin|uSD_D1_Pin|uSD_D2_Pin|uSD_D3_Pin 
 8008982:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8008986:	617b      	str	r3, [r7, #20]
                          |uSD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008988:	2302      	movs	r3, #2
 800898a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800898c:	2300      	movs	r3, #0
 800898e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008990:	2303      	movs	r3, #3
 8008992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8008994:	230c      	movs	r3, #12
 8008996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008998:	f107 0314 	add.w	r3, r7, #20
 800899c:	4619      	mov	r1, r3
 800899e:	480d      	ldr	r0, [pc, #52]	; (80089d4 <HAL_SD_MspInit+0xc8>)
 80089a0:	f7f7 ff56 	bl	8000850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80089a4:	2304      	movs	r3, #4
 80089a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089a8:	2302      	movs	r3, #2
 80089aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089ac:	2300      	movs	r3, #0
 80089ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089b0:	2303      	movs	r3, #3
 80089b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80089b4:	230c      	movs	r3, #12
 80089b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80089b8:	f107 0314 	add.w	r3, r7, #20
 80089bc:	4619      	mov	r1, r3
 80089be:	4806      	ldr	r0, [pc, #24]	; (80089d8 <HAL_SD_MspInit+0xcc>)
 80089c0:	f7f7 ff46 	bl	8000850 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80089c4:	bf00      	nop
 80089c6:	3728      	adds	r7, #40	; 0x28
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	40012c00 	.word	0x40012c00
 80089d0:	40023800 	.word	0x40023800
 80089d4:	40020800 	.word	0x40020800
 80089d8:	40020c00 	.word	0x40020c00

080089dc <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80089dc:	b580      	push	{r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80089e2:	1d3b      	adds	r3, r7, #4
 80089e4:	2200      	movs	r2, #0
 80089e6:	601a      	str	r2, [r3, #0]
 80089e8:	605a      	str	r2, [r3, #4]
 80089ea:	609a      	str	r2, [r3, #8]
 80089ec:	60da      	str	r2, [r3, #12]
 80089ee:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80089f0:	4b24      	ldr	r3, [pc, #144]	; (8008a84 <HAL_FSMC_MspInit+0xa8>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d140      	bne.n	8008a7a <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 80089f8:	4b22      	ldr	r3, [pc, #136]	; (8008a84 <HAL_FSMC_MspInit+0xa8>)
 80089fa:	2201      	movs	r2, #1
 80089fc:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80089fe:	2300      	movs	r3, #0
 8008a00:	603b      	str	r3, [r7, #0]
 8008a02:	4b21      	ldr	r3, [pc, #132]	; (8008a88 <HAL_FSMC_MspInit+0xac>)
 8008a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a06:	4a20      	ldr	r2, [pc, #128]	; (8008a88 <HAL_FSMC_MspInit+0xac>)
 8008a08:	f043 0301 	orr.w	r3, r3, #1
 8008a0c:	6393      	str	r3, [r2, #56]	; 0x38
 8008a0e:	4b1e      	ldr	r3, [pc, #120]	; (8008a88 <HAL_FSMC_MspInit+0xac>)
 8008a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a12:	f003 0301 	and.w	r3, r3, #1
 8008a16:	603b      	str	r3, [r7, #0]
 8008a18:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = A0_Pin;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a1e:	2302      	movs	r3, #2
 8008a20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a22:	2300      	movs	r3, #0
 8008a24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a26:	2303      	movs	r3, #3
 8008a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8008a2a:	230c      	movs	r3, #12
 8008a2c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(A0_GPIO_Port, &GPIO_InitStruct);
 8008a2e:	1d3b      	adds	r3, r7, #4
 8008a30:	4619      	mov	r1, r3
 8008a32:	4816      	ldr	r0, [pc, #88]	; (8008a8c <HAL_FSMC_MspInit+0xb0>)
 8008a34:	f7f7 ff0c 	bl	8000850 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8008a38:	f64f 7380 	movw	r3, #65408	; 0xff80
 8008a3c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a3e:	2302      	movs	r3, #2
 8008a40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a42:	2300      	movs	r3, #0
 8008a44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a46:	2303      	movs	r3, #3
 8008a48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8008a4a:	230c      	movs	r3, #12
 8008a4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008a4e:	1d3b      	adds	r3, r7, #4
 8008a50:	4619      	mov	r1, r3
 8008a52:	480f      	ldr	r0, [pc, #60]	; (8008a90 <HAL_FSMC_MspInit+0xb4>)
 8008a54:	f7f7 fefc 	bl	8000850 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 8008a58:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8008a5c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin|FMC_NOE_Pin 
                          |FMC_NWE_Pin|FMC_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a5e:	2302      	movs	r3, #2
 8008a60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a62:	2300      	movs	r3, #0
 8008a64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a66:	2303      	movs	r3, #3
 8008a68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8008a6a:	230c      	movs	r3, #12
 8008a6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008a6e:	1d3b      	adds	r3, r7, #4
 8008a70:	4619      	mov	r1, r3
 8008a72:	4808      	ldr	r0, [pc, #32]	; (8008a94 <HAL_FSMC_MspInit+0xb8>)
 8008a74:	f7f7 feec 	bl	8000850 <HAL_GPIO_Init>
 8008a78:	e000      	b.n	8008a7c <HAL_FSMC_MspInit+0xa0>
    return;
 8008a7a:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8008a7c:	3718      	adds	r7, #24
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	200001c0 	.word	0x200001c0
 8008a88:	40023800 	.word	0x40023800
 8008a8c:	40021400 	.word	0x40021400
 8008a90:	40021000 	.word	0x40021000
 8008a94:	40020c00 	.word	0x40020c00

08008a98 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8008aa0:	f7ff ff9c 	bl	80089dc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8008aa4:	bf00      	nop
 8008aa6:	3708      	adds	r7, #8
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008aac:	b480      	push	{r7}
 8008aae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008ab0:	bf00      	nop
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008aba:	b480      	push	{r7}
 8008abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008abe:	e7fe      	b.n	8008abe <HardFault_Handler+0x4>

08008ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008ac4:	e7fe      	b.n	8008ac4 <MemManage_Handler+0x4>

08008ac6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008aca:	e7fe      	b.n	8008aca <BusFault_Handler+0x4>

08008acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008acc:	b480      	push	{r7}
 8008ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008ad0:	e7fe      	b.n	8008ad0 <UsageFault_Handler+0x4>

08008ad2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008ad2:	b480      	push	{r7}
 8008ad4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008ad6:	bf00      	nop
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008ae4:	bf00      	nop
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr

08008aee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008aee:	b480      	push	{r7}
 8008af0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008af2:	bf00      	nop
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008b00:	f7f7 fd52 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008b04:	bf00      	nop
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008b0c:	4802      	ldr	r0, [pc, #8]	; (8008b18 <OTG_FS_IRQHandler+0x10>)
 8008b0e:	f7f8 ff9c 	bl	8001a4a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008b12:	bf00      	nop
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	20000680 	.word	0x20000680

08008b1c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008b24:	4b11      	ldr	r3, [pc, #68]	; (8008b6c <_sbrk+0x50>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d102      	bne.n	8008b32 <_sbrk+0x16>
		heap_end = &end;
 8008b2c:	4b0f      	ldr	r3, [pc, #60]	; (8008b6c <_sbrk+0x50>)
 8008b2e:	4a10      	ldr	r2, [pc, #64]	; (8008b70 <_sbrk+0x54>)
 8008b30:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008b32:	4b0e      	ldr	r3, [pc, #56]	; (8008b6c <_sbrk+0x50>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008b38:	4b0c      	ldr	r3, [pc, #48]	; (8008b6c <_sbrk+0x50>)
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4413      	add	r3, r2
 8008b40:	466a      	mov	r2, sp
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d907      	bls.n	8008b56 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008b46:	f000 fd41 	bl	80095cc <__errno>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	230c      	movs	r3, #12
 8008b4e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008b50:	f04f 33ff 	mov.w	r3, #4294967295
 8008b54:	e006      	b.n	8008b64 <_sbrk+0x48>
	}

	heap_end += incr;
 8008b56:	4b05      	ldr	r3, [pc, #20]	; (8008b6c <_sbrk+0x50>)
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	4a03      	ldr	r2, [pc, #12]	; (8008b6c <_sbrk+0x50>)
 8008b60:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008b62:	68fb      	ldr	r3, [r7, #12]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	200001c4 	.word	0x200001c4
 8008b70:	20000c90 	.word	0x20000c90

08008b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008b74:	b480      	push	{r7}
 8008b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008b78:	4b08      	ldr	r3, [pc, #32]	; (8008b9c <SystemInit+0x28>)
 8008b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b7e:	4a07      	ldr	r2, [pc, #28]	; (8008b9c <SystemInit+0x28>)
 8008b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008b88:	4b04      	ldr	r3, [pc, #16]	; (8008b9c <SystemInit+0x28>)
 8008b8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008b8e:	609a      	str	r2, [r3, #8]
#endif
}
 8008b90:	bf00      	nop
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	e000ed00 	.word	0xe000ed00

08008ba0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	4912      	ldr	r1, [pc, #72]	; (8008bf0 <MX_USB_DEVICE_Init+0x50>)
 8008ba8:	4812      	ldr	r0, [pc, #72]	; (8008bf4 <MX_USB_DEVICE_Init+0x54>)
 8008baa:	f7fe f8ce 	bl	8006d4a <USBD_Init>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008bb4:	f7ff fcbc 	bl	8008530 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 8008bb8:	490f      	ldr	r1, [pc, #60]	; (8008bf8 <MX_USB_DEVICE_Init+0x58>)
 8008bba:	480e      	ldr	r0, [pc, #56]	; (8008bf4 <MX_USB_DEVICE_Init+0x54>)
 8008bbc:	f7fe f8f0 	bl	8006da0 <USBD_RegisterClass>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008bc6:	f7ff fcb3 	bl	8008530 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 8008bca:	490c      	ldr	r1, [pc, #48]	; (8008bfc <MX_USB_DEVICE_Init+0x5c>)
 8008bcc:	4809      	ldr	r0, [pc, #36]	; (8008bf4 <MX_USB_DEVICE_Init+0x54>)
 8008bce:	f7fe f8a9 	bl	8006d24 <USBD_AUDIO_RegisterInterface>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d001      	beq.n	8008bdc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008bd8:	f7ff fcaa 	bl	8008530 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008bdc:	4805      	ldr	r0, [pc, #20]	; (8008bf4 <MX_USB_DEVICE_Init+0x54>)
 8008bde:	f7fe f8f9 	bl	8006dd4 <USBD_Start>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d001      	beq.n	8008bec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008be8:	f7ff fca2 	bl	8008530 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008bec:	bf00      	nop
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	200000dc 	.word	0x200000dc
 8008bf4:	200003e4 	.word	0x200003e4
 8008bf8:	20000008 	.word	0x20000008
 8008bfc:	200000c0 	.word	0x200000c0

08008c00 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use 
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 8008c0c:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3714      	adds	r7, #20
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr

08008c1a <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 8008c1a:	b480      	push	{r7}
 8008c1c:	b083      	sub	sp, #12
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 8008c22:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 8008c3e:	79fb      	ldrb	r3, [r7, #7]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d001      	beq.n	8008c48 <AUDIO_AudioCmd_FS+0x18>
 8008c44:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;	
 8008c46:	e000      	b.n	8008c4a <AUDIO_AudioCmd_FS+0x1a>
    break;
 8008c48:	bf00      	nop
  }
  return (USBD_OK);
 8008c4a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3714      	adds	r7, #20
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	4603      	mov	r3, r0
 8008c60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 8008c62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	4603      	mov	r3, r0
 8008c78:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008c7a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t cmd)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	4603      	mov	r3, r0
 8008c90:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008c92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8008ca4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b08a      	sub	sp, #40	; 0x28
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cb8:	f107 0314 	add.w	r3, r7, #20
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	601a      	str	r2, [r3, #0]
 8008cc0:	605a      	str	r2, [r3, #4]
 8008cc2:	609a      	str	r2, [r3, #8]
 8008cc4:	60da      	str	r2, [r3, #12]
 8008cc6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cd0:	d147      	bne.n	8008d62 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	613b      	str	r3, [r7, #16]
 8008cd6:	4b25      	ldr	r3, [pc, #148]	; (8008d6c <HAL_PCD_MspInit+0xbc>)
 8008cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cda:	4a24      	ldr	r2, [pc, #144]	; (8008d6c <HAL_PCD_MspInit+0xbc>)
 8008cdc:	f043 0301 	orr.w	r3, r3, #1
 8008ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8008ce2:	4b22      	ldr	r3, [pc, #136]	; (8008d6c <HAL_PCD_MspInit+0xbc>)
 8008ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	613b      	str	r3, [r7, #16]
 8008cec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTGFS_VBUS_Pin;
 8008cee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTGFS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008cfc:	f107 0314 	add.w	r3, r7, #20
 8008d00:	4619      	mov	r1, r3
 8008d02:	481b      	ldr	r0, [pc, #108]	; (8008d70 <HAL_PCD_MspInit+0xc0>)
 8008d04:	f7f7 fda4 	bl	8000850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin|USB_OTGFS_DM_Pin|GPIO_PIN_12;
 8008d08:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d0e:	2302      	movs	r3, #2
 8008d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d12:	2300      	movs	r3, #0
 8008d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d16:	2303      	movs	r3, #3
 8008d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d1a:	230a      	movs	r3, #10
 8008d1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d1e:	f107 0314 	add.w	r3, r7, #20
 8008d22:	4619      	mov	r1, r3
 8008d24:	4812      	ldr	r0, [pc, #72]	; (8008d70 <HAL_PCD_MspInit+0xc0>)
 8008d26:	f7f7 fd93 	bl	8000850 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d2a:	4b10      	ldr	r3, [pc, #64]	; (8008d6c <HAL_PCD_MspInit+0xbc>)
 8008d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d2e:	4a0f      	ldr	r2, [pc, #60]	; (8008d6c <HAL_PCD_MspInit+0xbc>)
 8008d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d34:	6353      	str	r3, [r2, #52]	; 0x34
 8008d36:	2300      	movs	r3, #0
 8008d38:	60fb      	str	r3, [r7, #12]
 8008d3a:	4b0c      	ldr	r3, [pc, #48]	; (8008d6c <HAL_PCD_MspInit+0xbc>)
 8008d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d3e:	4a0b      	ldr	r2, [pc, #44]	; (8008d6c <HAL_PCD_MspInit+0xbc>)
 8008d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d44:	6453      	str	r3, [r2, #68]	; 0x44
 8008d46:	4b09      	ldr	r3, [pc, #36]	; (8008d6c <HAL_PCD_MspInit+0xbc>)
 8008d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d4e:	60fb      	str	r3, [r7, #12]
 8008d50:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d52:	2200      	movs	r2, #0
 8008d54:	2100      	movs	r1, #0
 8008d56:	2043      	movs	r0, #67	; 0x43
 8008d58:	f7f7 fd43 	bl	80007e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d5c:	2043      	movs	r0, #67	; 0x43
 8008d5e:	f7f7 fd5c 	bl	800081a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d62:	bf00      	nop
 8008d64:	3728      	adds	r7, #40	; 0x28
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	40023800 	.word	0x40023800
 8008d70:	40020000 	.word	0x40020000

08008d74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008d88:	4619      	mov	r1, r3
 8008d8a:	4610      	mov	r0, r2
 8008d8c:	f7fe f86b 	bl	8006e66 <USBD_LL_SetupStage>
}
 8008d90:	bf00      	nop
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	460b      	mov	r3, r1
 8008da2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008daa:	78fa      	ldrb	r2, [r7, #3]
 8008dac:	6879      	ldr	r1, [r7, #4]
 8008dae:	4613      	mov	r3, r2
 8008db0:	00db      	lsls	r3, r3, #3
 8008db2:	1a9b      	subs	r3, r3, r2
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	440b      	add	r3, r1
 8008db8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	78fb      	ldrb	r3, [r7, #3]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	f7fe f89b 	bl	8006efc <USBD_LL_DataOutStage>
}
 8008dc6:	bf00      	nop
 8008dc8:	3708      	adds	r7, #8
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b082      	sub	sp, #8
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008de0:	78fa      	ldrb	r2, [r7, #3]
 8008de2:	6879      	ldr	r1, [r7, #4]
 8008de4:	4613      	mov	r3, r2
 8008de6:	00db      	lsls	r3, r3, #3
 8008de8:	1a9b      	subs	r3, r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	440b      	add	r3, r1
 8008dee:	3348      	adds	r3, #72	; 0x48
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	78fb      	ldrb	r3, [r7, #3]
 8008df4:	4619      	mov	r1, r3
 8008df6:	f7fe f8f2 	bl	8006fde <USBD_LL_DataInStage>
}
 8008dfa:	bf00      	nop
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b082      	sub	sp, #8
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7fe fa00 	bl	8007216 <USBD_LL_SOF>
}
 8008e16:	bf00      	nop
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b084      	sub	sp, #16
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e26:	2301      	movs	r3, #1
 8008e28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d001      	beq.n	8008e36 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e32:	f7ff fb7d 	bl	8008530 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e3c:	7bfa      	ldrb	r2, [r7, #15]
 8008e3e:	4611      	mov	r1, r2
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7fe f9b2 	bl	80071aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7fe f96b 	bl	8007128 <USBD_LL_Reset>
}
 8008e52:	bf00      	nop
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
	...

08008e5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7fe f9ad 	bl	80071ca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	6812      	ldr	r2, [r2, #0]
 8008e7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e82:	f043 0301 	orr.w	r3, r3, #1
 8008e86:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6a1b      	ldr	r3, [r3, #32]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d005      	beq.n	8008e9c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e90:	4b04      	ldr	r3, [pc, #16]	; (8008ea4 <HAL_PCD_SuspendCallback+0x48>)
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	4a03      	ldr	r2, [pc, #12]	; (8008ea4 <HAL_PCD_SuspendCallback+0x48>)
 8008e96:	f043 0306 	orr.w	r3, r3, #6
 8008e9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008e9c:	bf00      	nop
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	e000ed00 	.word	0xe000ed00

08008ea8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7fe f99c 	bl	80071f4 <USBD_LL_Resume>
}
 8008ebc:	bf00      	nop
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	460b      	mov	r3, r1
 8008ece:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ed6:	78fa      	ldrb	r2, [r7, #3]
 8008ed8:	4611      	mov	r1, r2
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fe f9c2 	bl	8007264 <USBD_LL_IsoOUTIncomplete>
}
 8008ee0:	bf00      	nop
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008efa:	78fa      	ldrb	r2, [r7, #3]
 8008efc:	4611      	mov	r1, r2
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fe f9a3 	bl	800724a <USBD_LL_IsoINIncomplete>
}
 8008f04:	bf00      	nop
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7fe f9af 	bl	800727e <USBD_LL_DevConnected>
}
 8008f20:	bf00      	nop
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7fe f9ac 	bl	8007294 <USBD_LL_DevDisconnected>
}
 8008f3c:	bf00      	nop
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d13f      	bne.n	8008fd4 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008f54:	4a22      	ldr	r2, [pc, #136]	; (8008fe0 <USBD_LL_Init+0x9c>)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a20      	ldr	r2, [pc, #128]	; (8008fe0 <USBD_LL_Init+0x9c>)
 8008f60:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f64:	4b1e      	ldr	r3, [pc, #120]	; (8008fe0 <USBD_LL_Init+0x9c>)
 8008f66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008f6a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008f6c:	4b1c      	ldr	r3, [pc, #112]	; (8008fe0 <USBD_LL_Init+0x9c>)
 8008f6e:	2206      	movs	r2, #6
 8008f70:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008f72:	4b1b      	ldr	r3, [pc, #108]	; (8008fe0 <USBD_LL_Init+0x9c>)
 8008f74:	2202      	movs	r2, #2
 8008f76:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f78:	4b19      	ldr	r3, [pc, #100]	; (8008fe0 <USBD_LL_Init+0x9c>)
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008f7e:	4b18      	ldr	r3, [pc, #96]	; (8008fe0 <USBD_LL_Init+0x9c>)
 8008f80:	2202      	movs	r2, #2
 8008f82:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f84:	4b16      	ldr	r3, [pc, #88]	; (8008fe0 <USBD_LL_Init+0x9c>)
 8008f86:	2200      	movs	r2, #0
 8008f88:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008f8a:	4b15      	ldr	r3, [pc, #84]	; (8008fe0 <USBD_LL_Init+0x9c>)
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008f90:	4b13      	ldr	r3, [pc, #76]	; (8008fe0 <USBD_LL_Init+0x9c>)
 8008f92:	2200      	movs	r2, #0
 8008f94:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8008f96:	4b12      	ldr	r3, [pc, #72]	; (8008fe0 <USBD_LL_Init+0x9c>)
 8008f98:	2201      	movs	r2, #1
 8008f9a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008f9c:	4b10      	ldr	r3, [pc, #64]	; (8008fe0 <USBD_LL_Init+0x9c>)
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008fa2:	4b0f      	ldr	r3, [pc, #60]	; (8008fe0 <USBD_LL_Init+0x9c>)
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008fa8:	480d      	ldr	r0, [pc, #52]	; (8008fe0 <USBD_LL_Init+0x9c>)
 8008faa:	f7f8 fbf7 	bl	800179c <HAL_PCD_Init>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d001      	beq.n	8008fb8 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8008fb4:	f7ff fabc 	bl	8008530 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008fb8:	2180      	movs	r1, #128	; 0x80
 8008fba:	4809      	ldr	r0, [pc, #36]	; (8008fe0 <USBD_LL_Init+0x9c>)
 8008fbc:	f7f9 fd77 	bl	8002aae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008fc0:	2240      	movs	r2, #64	; 0x40
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	4806      	ldr	r0, [pc, #24]	; (8008fe0 <USBD_LL_Init+0x9c>)
 8008fc6:	f7f9 fd2b 	bl	8002a20 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008fca:	2280      	movs	r2, #128	; 0x80
 8008fcc:	2101      	movs	r1, #1
 8008fce:	4804      	ldr	r0, [pc, #16]	; (8008fe0 <USBD_LL_Init+0x9c>)
 8008fd0:	f7f9 fd26 	bl	8002a20 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3708      	adds	r7, #8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	20000680 	.word	0x20000680

08008fe4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7f8 fcf2 	bl	80019e4 <HAL_PCD_Start>
 8009000:	4603      	mov	r3, r0
 8009002:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8009004:	7bfb      	ldrb	r3, [r7, #15]
 8009006:	4618      	mov	r0, r3
 8009008:	f000 f96a 	bl	80092e0 <USBD_Get_USB_Status>
 800900c:	4603      	mov	r3, r0
 800900e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009010:	7bbb      	ldrb	r3, [r7, #14]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b084      	sub	sp, #16
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
 8009022:	4608      	mov	r0, r1
 8009024:	4611      	mov	r1, r2
 8009026:	461a      	mov	r2, r3
 8009028:	4603      	mov	r3, r0
 800902a:	70fb      	strb	r3, [r7, #3]
 800902c:	460b      	mov	r3, r1
 800902e:	70bb      	strb	r3, [r7, #2]
 8009030:	4613      	mov	r3, r2
 8009032:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009034:	2300      	movs	r3, #0
 8009036:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009038:	2300      	movs	r3, #0
 800903a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009042:	78bb      	ldrb	r3, [r7, #2]
 8009044:	883a      	ldrh	r2, [r7, #0]
 8009046:	78f9      	ldrb	r1, [r7, #3]
 8009048:	f7f9 f8f4 	bl	8002234 <HAL_PCD_EP_Open>
 800904c:	4603      	mov	r3, r0
 800904e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009050:	7bfb      	ldrb	r3, [r7, #15]
 8009052:	4618      	mov	r0, r3
 8009054:	f000 f944 	bl	80092e0 <USBD_Get_USB_Status>
 8009058:	4603      	mov	r3, r0
 800905a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800905c:	7bbb      	ldrb	r3, [r7, #14]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b084      	sub	sp, #16
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
 800906e:	460b      	mov	r3, r1
 8009070:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009072:	2300      	movs	r3, #0
 8009074:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009076:	2300      	movs	r3, #0
 8009078:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009080:	78fa      	ldrb	r2, [r7, #3]
 8009082:	4611      	mov	r1, r2
 8009084:	4618      	mov	r0, r3
 8009086:	f7f9 f93d 	bl	8002304 <HAL_PCD_EP_Close>
 800908a:	4603      	mov	r3, r0
 800908c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800908e:	7bfb      	ldrb	r3, [r7, #15]
 8009090:	4618      	mov	r0, r3
 8009092:	f000 f925 	bl	80092e0 <USBD_Get_USB_Status>
 8009096:	4603      	mov	r3, r0
 8009098:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800909a:	7bbb      	ldrb	r3, [r7, #14]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	460b      	mov	r3, r1
 80090ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b0:	2300      	movs	r3, #0
 80090b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80090be:	78fa      	ldrb	r2, [r7, #3]
 80090c0:	4611      	mov	r1, r2
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7f9 f9fd 	bl	80024c2 <HAL_PCD_EP_SetStall>
 80090c8:	4603      	mov	r3, r0
 80090ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090cc:	7bfb      	ldrb	r3, [r7, #15]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f000 f906 	bl	80092e0 <USBD_Get_USB_Status>
 80090d4:	4603      	mov	r3, r0
 80090d6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80090d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b084      	sub	sp, #16
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	460b      	mov	r3, r1
 80090ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ee:	2300      	movs	r3, #0
 80090f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090f2:	2300      	movs	r3, #0
 80090f4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80090fc:	78fa      	ldrb	r2, [r7, #3]
 80090fe:	4611      	mov	r1, r2
 8009100:	4618      	mov	r0, r3
 8009102:	f7f9 fa42 	bl	800258a <HAL_PCD_EP_ClrStall>
 8009106:	4603      	mov	r3, r0
 8009108:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800910a:	7bfb      	ldrb	r3, [r7, #15]
 800910c:	4618      	mov	r0, r3
 800910e:	f000 f8e7 	bl	80092e0 <USBD_Get_USB_Status>
 8009112:	4603      	mov	r3, r0
 8009114:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8009116:	7bbb      	ldrb	r3, [r7, #14]
}
 8009118:	4618      	mov	r0, r3
 800911a:	3710      	adds	r7, #16
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	460b      	mov	r3, r1
 800912a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009132:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8009134:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009138:	2b00      	cmp	r3, #0
 800913a:	da0b      	bge.n	8009154 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800913c:	78fb      	ldrb	r3, [r7, #3]
 800913e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009142:	68f9      	ldr	r1, [r7, #12]
 8009144:	4613      	mov	r3, r2
 8009146:	00db      	lsls	r3, r3, #3
 8009148:	1a9b      	subs	r3, r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	440b      	add	r3, r1
 800914e:	333e      	adds	r3, #62	; 0x3e
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	e00b      	b.n	800916c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009154:	78fb      	ldrb	r3, [r7, #3]
 8009156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800915a:	68f9      	ldr	r1, [r7, #12]
 800915c:	4613      	mov	r3, r2
 800915e:	00db      	lsls	r3, r3, #3
 8009160:	1a9b      	subs	r3, r3, r2
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	440b      	add	r3, r1
 8009166:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800916a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800916c:	4618      	mov	r0, r3
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	460b      	mov	r3, r1
 8009182:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009188:	2300      	movs	r3, #0
 800918a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009192:	78fa      	ldrb	r2, [r7, #3]
 8009194:	4611      	mov	r1, r2
 8009196:	4618      	mov	r0, r3
 8009198:	f7f9 f827 	bl	80021ea <HAL_PCD_SetAddress>
 800919c:	4603      	mov	r3, r0
 800919e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
 80091a2:	4618      	mov	r0, r3
 80091a4:	f000 f89c 	bl	80092e0 <USBD_Get_USB_Status>
 80091a8:	4603      	mov	r3, r0
 80091aa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80091ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b086      	sub	sp, #24
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	60f8      	str	r0, [r7, #12]
 80091be:	607a      	str	r2, [r7, #4]
 80091c0:	461a      	mov	r2, r3
 80091c2:	460b      	mov	r3, r1
 80091c4:	72fb      	strb	r3, [r7, #11]
 80091c6:	4613      	mov	r3, r2
 80091c8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ca:	2300      	movs	r3, #0
 80091cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091ce:	2300      	movs	r3, #0
 80091d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80091d8:	893b      	ldrh	r3, [r7, #8]
 80091da:	7af9      	ldrb	r1, [r7, #11]
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	f7f9 f926 	bl	800242e <HAL_PCD_EP_Transmit>
 80091e2:	4603      	mov	r3, r0
 80091e4:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80091e6:	7dfb      	ldrb	r3, [r7, #23]
 80091e8:	4618      	mov	r0, r3
 80091ea:	f000 f879 	bl	80092e0 <USBD_Get_USB_Status>
 80091ee:	4603      	mov	r3, r0
 80091f0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80091f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3718      	adds	r7, #24
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b086      	sub	sp, #24
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	607a      	str	r2, [r7, #4]
 8009206:	461a      	mov	r2, r3
 8009208:	460b      	mov	r3, r1
 800920a:	72fb      	strb	r3, [r7, #11]
 800920c:	4613      	mov	r3, r2
 800920e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009214:	2300      	movs	r3, #0
 8009216:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800921e:	893b      	ldrh	r3, [r7, #8]
 8009220:	7af9      	ldrb	r1, [r7, #11]
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	f7f9 f8b8 	bl	8002398 <HAL_PCD_EP_Receive>
 8009228:	4603      	mov	r3, r0
 800922a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800922c:	7dfb      	ldrb	r3, [r7, #23]
 800922e:	4618      	mov	r0, r3
 8009230:	f000 f856 	bl	80092e0 <USBD_Get_USB_Status>
 8009234:	4603      	mov	r3, r0
 8009236:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8009238:	7dbb      	ldrb	r3, [r7, #22]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3718      	adds	r7, #24
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
	...

08009244 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009250:	78fb      	ldrb	r3, [r7, #3]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d002      	beq.n	800925c <HAL_PCDEx_LPM_Callback+0x18>
 8009256:	2b01      	cmp	r3, #1
 8009258:	d01f      	beq.n	800929a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800925a:	e03b      	b.n	80092d4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6a1b      	ldr	r3, [r3, #32]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d007      	beq.n	8009274 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8009264:	f7fe fe00 	bl	8007e68 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009268:	4b1c      	ldr	r3, [pc, #112]	; (80092dc <HAL_PCDEx_LPM_Callback+0x98>)
 800926a:	691b      	ldr	r3, [r3, #16]
 800926c:	4a1b      	ldr	r2, [pc, #108]	; (80092dc <HAL_PCDEx_LPM_Callback+0x98>)
 800926e:	f023 0306 	bic.w	r3, r3, #6
 8009272:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	6812      	ldr	r2, [r2, #0]
 8009282:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009286:	f023 0301 	bic.w	r3, r3, #1
 800928a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009292:	4618      	mov	r0, r3
 8009294:	f7fd ffae 	bl	80071f4 <USBD_LL_Resume>
    break;
 8009298:	e01c      	b.n	80092d4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	6812      	ldr	r2, [r2, #0]
 80092a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80092ac:	f043 0301 	orr.w	r3, r3, #1
 80092b0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7fd ff86 	bl	80071ca <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a1b      	ldr	r3, [r3, #32]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d005      	beq.n	80092d2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092c6:	4b05      	ldr	r3, [pc, #20]	; (80092dc <HAL_PCDEx_LPM_Callback+0x98>)
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	4a04      	ldr	r2, [pc, #16]	; (80092dc <HAL_PCDEx_LPM_Callback+0x98>)
 80092cc:	f043 0306 	orr.w	r3, r3, #6
 80092d0:	6113      	str	r3, [r2, #16]
    break;   
 80092d2:	bf00      	nop
}
 80092d4:	bf00      	nop
 80092d6:	3708      	adds	r7, #8
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	e000ed00 	.word	0xe000ed00

080092e0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	4603      	mov	r3, r0
 80092e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80092ee:	79fb      	ldrb	r3, [r7, #7]
 80092f0:	2b03      	cmp	r3, #3
 80092f2:	d817      	bhi.n	8009324 <USBD_Get_USB_Status+0x44>
 80092f4:	a201      	add	r2, pc, #4	; (adr r2, 80092fc <USBD_Get_USB_Status+0x1c>)
 80092f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092fa:	bf00      	nop
 80092fc:	0800930d 	.word	0x0800930d
 8009300:	08009313 	.word	0x08009313
 8009304:	08009319 	.word	0x08009319
 8009308:	0800931f 	.word	0x0800931f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800930c:	2300      	movs	r3, #0
 800930e:	73fb      	strb	r3, [r7, #15]
    break;
 8009310:	e00b      	b.n	800932a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009312:	2302      	movs	r3, #2
 8009314:	73fb      	strb	r3, [r7, #15]
    break;
 8009316:	e008      	b.n	800932a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009318:	2301      	movs	r3, #1
 800931a:	73fb      	strb	r3, [r7, #15]
    break;
 800931c:	e005      	b.n	800932a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800931e:	2302      	movs	r3, #2
 8009320:	73fb      	strb	r3, [r7, #15]
    break;
 8009322:	e002      	b.n	800932a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009324:	2302      	movs	r3, #2
 8009326:	73fb      	strb	r3, [r7, #15]
    break;
 8009328:	bf00      	nop
  }
  return usb_status;
 800932a:	7bfb      	ldrb	r3, [r7, #15]
}
 800932c:	4618      	mov	r0, r3
 800932e:	3714      	adds	r7, #20
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	4603      	mov	r3, r0
 8009340:	6039      	str	r1, [r7, #0]
 8009342:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	2212      	movs	r2, #18
 8009348:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800934a:	4b03      	ldr	r3, [pc, #12]	; (8009358 <USBD_FS_DeviceDescriptor+0x20>)
}
 800934c:	4618      	mov	r0, r3
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr
 8009358:	200000fc 	.word	0x200000fc

0800935c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	4603      	mov	r3, r0
 8009364:	6039      	str	r1, [r7, #0]
 8009366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	2204      	movs	r2, #4
 800936c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800936e:	4b03      	ldr	r3, [pc, #12]	; (800937c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009370:	4618      	mov	r0, r3
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr
 800937c:	2000011c 	.word	0x2000011c

08009380 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	4603      	mov	r3, r0
 8009388:	6039      	str	r1, [r7, #0]
 800938a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800938c:	79fb      	ldrb	r3, [r7, #7]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d105      	bne.n	800939e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009392:	683a      	ldr	r2, [r7, #0]
 8009394:	4907      	ldr	r1, [pc, #28]	; (80093b4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009396:	4808      	ldr	r0, [pc, #32]	; (80093b8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009398:	f7fe fc70 	bl	8007c7c <USBD_GetString>
 800939c:	e004      	b.n	80093a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	4904      	ldr	r1, [pc, #16]	; (80093b4 <USBD_FS_ProductStrDescriptor+0x34>)
 80093a2:	4805      	ldr	r0, [pc, #20]	; (80093b8 <USBD_FS_ProductStrDescriptor+0x38>)
 80093a4:	f7fe fc6a 	bl	8007c7c <USBD_GetString>
  }
  return USBD_StrDesc;
 80093a8:	4b02      	ldr	r3, [pc, #8]	; (80093b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3708      	adds	r7, #8
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	20000a88 	.word	0x20000a88
 80093b8:	080097dc 	.word	0x080097dc

080093bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	4603      	mov	r3, r0
 80093c4:	6039      	str	r1, [r7, #0]
 80093c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80093c8:	683a      	ldr	r2, [r7, #0]
 80093ca:	4904      	ldr	r1, [pc, #16]	; (80093dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80093cc:	4804      	ldr	r0, [pc, #16]	; (80093e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80093ce:	f7fe fc55 	bl	8007c7c <USBD_GetString>
  return USBD_StrDesc;
 80093d2:	4b02      	ldr	r3, [pc, #8]	; (80093dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	20000a88 	.word	0x20000a88
 80093e0:	080097f0 	.word	0x080097f0

080093e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	4603      	mov	r3, r0
 80093ec:	6039      	str	r1, [r7, #0]
 80093ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	221a      	movs	r2, #26
 80093f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80093f6:	f000 f855 	bl	80094a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80093fa:	4b02      	ldr	r3, [pc, #8]	; (8009404 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	20000120 	.word	0x20000120

08009408 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	4603      	mov	r3, r0
 8009410:	6039      	str	r1, [r7, #0]
 8009412:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009414:	79fb      	ldrb	r3, [r7, #7]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d105      	bne.n	8009426 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	4907      	ldr	r1, [pc, #28]	; (800943c <USBD_FS_ConfigStrDescriptor+0x34>)
 800941e:	4808      	ldr	r0, [pc, #32]	; (8009440 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009420:	f7fe fc2c 	bl	8007c7c <USBD_GetString>
 8009424:	e004      	b.n	8009430 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009426:	683a      	ldr	r2, [r7, #0]
 8009428:	4904      	ldr	r1, [pc, #16]	; (800943c <USBD_FS_ConfigStrDescriptor+0x34>)
 800942a:	4805      	ldr	r0, [pc, #20]	; (8009440 <USBD_FS_ConfigStrDescriptor+0x38>)
 800942c:	f7fe fc26 	bl	8007c7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009430:	4b02      	ldr	r3, [pc, #8]	; (800943c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009432:	4618      	mov	r0, r3
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	20000a88 	.word	0x20000a88
 8009440:	08009804 	.word	0x08009804

08009444 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	4603      	mov	r3, r0
 800944c:	6039      	str	r1, [r7, #0]
 800944e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009450:	79fb      	ldrb	r3, [r7, #7]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d105      	bne.n	8009462 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	4907      	ldr	r1, [pc, #28]	; (8009478 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800945a:	4808      	ldr	r0, [pc, #32]	; (800947c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800945c:	f7fe fc0e 	bl	8007c7c <USBD_GetString>
 8009460:	e004      	b.n	800946c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	4904      	ldr	r1, [pc, #16]	; (8009478 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009466:	4805      	ldr	r0, [pc, #20]	; (800947c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009468:	f7fe fc08 	bl	8007c7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800946c:	4b02      	ldr	r3, [pc, #8]	; (8009478 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800946e:	4618      	mov	r0, r3
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	20000a88 	.word	0x20000a88
 800947c:	08009814 	.word	0x08009814

08009480 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	4603      	mov	r3, r0
 8009488:	6039      	str	r1, [r7, #0]
 800948a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	220c      	movs	r2, #12
 8009490:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009492:	4b03      	ldr	r3, [pc, #12]	; (80094a0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009494:	4618      	mov	r0, r3
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr
 80094a0:	20000110 	.word	0x20000110

080094a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80094aa:	4b0f      	ldr	r3, [pc, #60]	; (80094e8 <Get_SerialNum+0x44>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80094b0:	4b0e      	ldr	r3, [pc, #56]	; (80094ec <Get_SerialNum+0x48>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80094b6:	4b0e      	ldr	r3, [pc, #56]	; (80094f0 <Get_SerialNum+0x4c>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4413      	add	r3, r2
 80094c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d009      	beq.n	80094de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80094ca:	2208      	movs	r2, #8
 80094cc:	4909      	ldr	r1, [pc, #36]	; (80094f4 <Get_SerialNum+0x50>)
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f000 f814 	bl	80094fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80094d4:	2204      	movs	r2, #4
 80094d6:	4908      	ldr	r1, [pc, #32]	; (80094f8 <Get_SerialNum+0x54>)
 80094d8:	68b8      	ldr	r0, [r7, #8]
 80094da:	f000 f80f 	bl	80094fc <IntToUnicode>
  }
}
 80094de:	bf00      	nop
 80094e0:	3710      	adds	r7, #16
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	1fff7a10 	.word	0x1fff7a10
 80094ec:	1fff7a14 	.word	0x1fff7a14
 80094f0:	1fff7a18 	.word	0x1fff7a18
 80094f4:	20000122 	.word	0x20000122
 80094f8:	20000132 	.word	0x20000132

080094fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b087      	sub	sp, #28
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	4613      	mov	r3, r2
 8009508:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800950a:	2300      	movs	r3, #0
 800950c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800950e:	2300      	movs	r3, #0
 8009510:	75fb      	strb	r3, [r7, #23]
 8009512:	e027      	b.n	8009564 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	0f1b      	lsrs	r3, r3, #28
 8009518:	2b09      	cmp	r3, #9
 800951a:	d80b      	bhi.n	8009534 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	0f1b      	lsrs	r3, r3, #28
 8009520:	b2da      	uxtb	r2, r3
 8009522:	7dfb      	ldrb	r3, [r7, #23]
 8009524:	005b      	lsls	r3, r3, #1
 8009526:	4619      	mov	r1, r3
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	440b      	add	r3, r1
 800952c:	3230      	adds	r2, #48	; 0x30
 800952e:	b2d2      	uxtb	r2, r2
 8009530:	701a      	strb	r2, [r3, #0]
 8009532:	e00a      	b.n	800954a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	0f1b      	lsrs	r3, r3, #28
 8009538:	b2da      	uxtb	r2, r3
 800953a:	7dfb      	ldrb	r3, [r7, #23]
 800953c:	005b      	lsls	r3, r3, #1
 800953e:	4619      	mov	r1, r3
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	440b      	add	r3, r1
 8009544:	3237      	adds	r2, #55	; 0x37
 8009546:	b2d2      	uxtb	r2, r2
 8009548:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	011b      	lsls	r3, r3, #4
 800954e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009550:	7dfb      	ldrb	r3, [r7, #23]
 8009552:	005b      	lsls	r3, r3, #1
 8009554:	3301      	adds	r3, #1
 8009556:	68ba      	ldr	r2, [r7, #8]
 8009558:	4413      	add	r3, r2
 800955a:	2200      	movs	r2, #0
 800955c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800955e:	7dfb      	ldrb	r3, [r7, #23]
 8009560:	3301      	adds	r3, #1
 8009562:	75fb      	strb	r3, [r7, #23]
 8009564:	7dfa      	ldrb	r2, [r7, #23]
 8009566:	79fb      	ldrb	r3, [r7, #7]
 8009568:	429a      	cmp	r2, r3
 800956a:	d3d3      	bcc.n	8009514 <IntToUnicode+0x18>
  }
}
 800956c:	bf00      	nop
 800956e:	371c      	adds	r7, #28
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8009578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80095b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800957c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800957e:	e003      	b.n	8009588 <LoopCopyDataInit>

08009580 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009580:	4b0c      	ldr	r3, [pc, #48]	; (80095b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009582:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009584:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009586:	3104      	adds	r1, #4

08009588 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009588:	480b      	ldr	r0, [pc, #44]	; (80095b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800958a:	4b0c      	ldr	r3, [pc, #48]	; (80095bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800958c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800958e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009590:	d3f6      	bcc.n	8009580 <CopyDataInit>
  ldr  r2, =_sbss
 8009592:	4a0b      	ldr	r2, [pc, #44]	; (80095c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009594:	e002      	b.n	800959c <LoopFillZerobss>

08009596 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8009596:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009598:	f842 3b04 	str.w	r3, [r2], #4

0800959c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800959c:	4b09      	ldr	r3, [pc, #36]	; (80095c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800959e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80095a0:	d3f9      	bcc.n	8009596 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80095a2:	f7ff fae7 	bl	8008b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80095a6:	f000 f817 	bl	80095d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80095aa:	f7fe fc45 	bl	8007e38 <main>
  bx  lr    
 80095ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80095b0:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 80095b4:	0800984c 	.word	0x0800984c
  ldr  r0, =_sdata
 80095b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80095bc:	200001a0 	.word	0x200001a0
  ldr  r2, =_sbss
 80095c0:	200001a0 	.word	0x200001a0
  ldr  r3, = _ebss
 80095c4:	20000c8c 	.word	0x20000c8c

080095c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80095c8:	e7fe      	b.n	80095c8 <ADC_IRQHandler>
	...

080095cc <__errno>:
 80095cc:	4b01      	ldr	r3, [pc, #4]	; (80095d4 <__errno+0x8>)
 80095ce:	6818      	ldr	r0, [r3, #0]
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	2000013c 	.word	0x2000013c

080095d8 <__libc_init_array>:
 80095d8:	b570      	push	{r4, r5, r6, lr}
 80095da:	4e0d      	ldr	r6, [pc, #52]	; (8009610 <__libc_init_array+0x38>)
 80095dc:	4c0d      	ldr	r4, [pc, #52]	; (8009614 <__libc_init_array+0x3c>)
 80095de:	1ba4      	subs	r4, r4, r6
 80095e0:	10a4      	asrs	r4, r4, #2
 80095e2:	2500      	movs	r5, #0
 80095e4:	42a5      	cmp	r5, r4
 80095e6:	d109      	bne.n	80095fc <__libc_init_array+0x24>
 80095e8:	4e0b      	ldr	r6, [pc, #44]	; (8009618 <__libc_init_array+0x40>)
 80095ea:	4c0c      	ldr	r4, [pc, #48]	; (800961c <__libc_init_array+0x44>)
 80095ec:	f000 f8ea 	bl	80097c4 <_init>
 80095f0:	1ba4      	subs	r4, r4, r6
 80095f2:	10a4      	asrs	r4, r4, #2
 80095f4:	2500      	movs	r5, #0
 80095f6:	42a5      	cmp	r5, r4
 80095f8:	d105      	bne.n	8009606 <__libc_init_array+0x2e>
 80095fa:	bd70      	pop	{r4, r5, r6, pc}
 80095fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009600:	4798      	blx	r3
 8009602:	3501      	adds	r5, #1
 8009604:	e7ee      	b.n	80095e4 <__libc_init_array+0xc>
 8009606:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800960a:	4798      	blx	r3
 800960c:	3501      	adds	r5, #1
 800960e:	e7f2      	b.n	80095f6 <__libc_init_array+0x1e>
 8009610:	08009844 	.word	0x08009844
 8009614:	08009844 	.word	0x08009844
 8009618:	08009844 	.word	0x08009844
 800961c:	08009848 	.word	0x08009848

08009620 <malloc>:
 8009620:	4b02      	ldr	r3, [pc, #8]	; (800962c <malloc+0xc>)
 8009622:	4601      	mov	r1, r0
 8009624:	6818      	ldr	r0, [r3, #0]
 8009626:	f000 b861 	b.w	80096ec <_malloc_r>
 800962a:	bf00      	nop
 800962c:	2000013c 	.word	0x2000013c

08009630 <free>:
 8009630:	4b02      	ldr	r3, [pc, #8]	; (800963c <free+0xc>)
 8009632:	4601      	mov	r1, r0
 8009634:	6818      	ldr	r0, [r3, #0]
 8009636:	f000 b80b 	b.w	8009650 <_free_r>
 800963a:	bf00      	nop
 800963c:	2000013c 	.word	0x2000013c

08009640 <memset>:
 8009640:	4402      	add	r2, r0
 8009642:	4603      	mov	r3, r0
 8009644:	4293      	cmp	r3, r2
 8009646:	d100      	bne.n	800964a <memset+0xa>
 8009648:	4770      	bx	lr
 800964a:	f803 1b01 	strb.w	r1, [r3], #1
 800964e:	e7f9      	b.n	8009644 <memset+0x4>

08009650 <_free_r>:
 8009650:	b538      	push	{r3, r4, r5, lr}
 8009652:	4605      	mov	r5, r0
 8009654:	2900      	cmp	r1, #0
 8009656:	d045      	beq.n	80096e4 <_free_r+0x94>
 8009658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800965c:	1f0c      	subs	r4, r1, #4
 800965e:	2b00      	cmp	r3, #0
 8009660:	bfb8      	it	lt
 8009662:	18e4      	addlt	r4, r4, r3
 8009664:	f000 f8ac 	bl	80097c0 <__malloc_lock>
 8009668:	4a1f      	ldr	r2, [pc, #124]	; (80096e8 <_free_r+0x98>)
 800966a:	6813      	ldr	r3, [r2, #0]
 800966c:	4610      	mov	r0, r2
 800966e:	b933      	cbnz	r3, 800967e <_free_r+0x2e>
 8009670:	6063      	str	r3, [r4, #4]
 8009672:	6014      	str	r4, [r2, #0]
 8009674:	4628      	mov	r0, r5
 8009676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800967a:	f000 b8a2 	b.w	80097c2 <__malloc_unlock>
 800967e:	42a3      	cmp	r3, r4
 8009680:	d90c      	bls.n	800969c <_free_r+0x4c>
 8009682:	6821      	ldr	r1, [r4, #0]
 8009684:	1862      	adds	r2, r4, r1
 8009686:	4293      	cmp	r3, r2
 8009688:	bf04      	itt	eq
 800968a:	681a      	ldreq	r2, [r3, #0]
 800968c:	685b      	ldreq	r3, [r3, #4]
 800968e:	6063      	str	r3, [r4, #4]
 8009690:	bf04      	itt	eq
 8009692:	1852      	addeq	r2, r2, r1
 8009694:	6022      	streq	r2, [r4, #0]
 8009696:	6004      	str	r4, [r0, #0]
 8009698:	e7ec      	b.n	8009674 <_free_r+0x24>
 800969a:	4613      	mov	r3, r2
 800969c:	685a      	ldr	r2, [r3, #4]
 800969e:	b10a      	cbz	r2, 80096a4 <_free_r+0x54>
 80096a0:	42a2      	cmp	r2, r4
 80096a2:	d9fa      	bls.n	800969a <_free_r+0x4a>
 80096a4:	6819      	ldr	r1, [r3, #0]
 80096a6:	1858      	adds	r0, r3, r1
 80096a8:	42a0      	cmp	r0, r4
 80096aa:	d10b      	bne.n	80096c4 <_free_r+0x74>
 80096ac:	6820      	ldr	r0, [r4, #0]
 80096ae:	4401      	add	r1, r0
 80096b0:	1858      	adds	r0, r3, r1
 80096b2:	4282      	cmp	r2, r0
 80096b4:	6019      	str	r1, [r3, #0]
 80096b6:	d1dd      	bne.n	8009674 <_free_r+0x24>
 80096b8:	6810      	ldr	r0, [r2, #0]
 80096ba:	6852      	ldr	r2, [r2, #4]
 80096bc:	605a      	str	r2, [r3, #4]
 80096be:	4401      	add	r1, r0
 80096c0:	6019      	str	r1, [r3, #0]
 80096c2:	e7d7      	b.n	8009674 <_free_r+0x24>
 80096c4:	d902      	bls.n	80096cc <_free_r+0x7c>
 80096c6:	230c      	movs	r3, #12
 80096c8:	602b      	str	r3, [r5, #0]
 80096ca:	e7d3      	b.n	8009674 <_free_r+0x24>
 80096cc:	6820      	ldr	r0, [r4, #0]
 80096ce:	1821      	adds	r1, r4, r0
 80096d0:	428a      	cmp	r2, r1
 80096d2:	bf04      	itt	eq
 80096d4:	6811      	ldreq	r1, [r2, #0]
 80096d6:	6852      	ldreq	r2, [r2, #4]
 80096d8:	6062      	str	r2, [r4, #4]
 80096da:	bf04      	itt	eq
 80096dc:	1809      	addeq	r1, r1, r0
 80096de:	6021      	streq	r1, [r4, #0]
 80096e0:	605c      	str	r4, [r3, #4]
 80096e2:	e7c7      	b.n	8009674 <_free_r+0x24>
 80096e4:	bd38      	pop	{r3, r4, r5, pc}
 80096e6:	bf00      	nop
 80096e8:	200001c8 	.word	0x200001c8

080096ec <_malloc_r>:
 80096ec:	b570      	push	{r4, r5, r6, lr}
 80096ee:	1ccd      	adds	r5, r1, #3
 80096f0:	f025 0503 	bic.w	r5, r5, #3
 80096f4:	3508      	adds	r5, #8
 80096f6:	2d0c      	cmp	r5, #12
 80096f8:	bf38      	it	cc
 80096fa:	250c      	movcc	r5, #12
 80096fc:	2d00      	cmp	r5, #0
 80096fe:	4606      	mov	r6, r0
 8009700:	db01      	blt.n	8009706 <_malloc_r+0x1a>
 8009702:	42a9      	cmp	r1, r5
 8009704:	d903      	bls.n	800970e <_malloc_r+0x22>
 8009706:	230c      	movs	r3, #12
 8009708:	6033      	str	r3, [r6, #0]
 800970a:	2000      	movs	r0, #0
 800970c:	bd70      	pop	{r4, r5, r6, pc}
 800970e:	f000 f857 	bl	80097c0 <__malloc_lock>
 8009712:	4a21      	ldr	r2, [pc, #132]	; (8009798 <_malloc_r+0xac>)
 8009714:	6814      	ldr	r4, [r2, #0]
 8009716:	4621      	mov	r1, r4
 8009718:	b991      	cbnz	r1, 8009740 <_malloc_r+0x54>
 800971a:	4c20      	ldr	r4, [pc, #128]	; (800979c <_malloc_r+0xb0>)
 800971c:	6823      	ldr	r3, [r4, #0]
 800971e:	b91b      	cbnz	r3, 8009728 <_malloc_r+0x3c>
 8009720:	4630      	mov	r0, r6
 8009722:	f000 f83d 	bl	80097a0 <_sbrk_r>
 8009726:	6020      	str	r0, [r4, #0]
 8009728:	4629      	mov	r1, r5
 800972a:	4630      	mov	r0, r6
 800972c:	f000 f838 	bl	80097a0 <_sbrk_r>
 8009730:	1c43      	adds	r3, r0, #1
 8009732:	d124      	bne.n	800977e <_malloc_r+0x92>
 8009734:	230c      	movs	r3, #12
 8009736:	6033      	str	r3, [r6, #0]
 8009738:	4630      	mov	r0, r6
 800973a:	f000 f842 	bl	80097c2 <__malloc_unlock>
 800973e:	e7e4      	b.n	800970a <_malloc_r+0x1e>
 8009740:	680b      	ldr	r3, [r1, #0]
 8009742:	1b5b      	subs	r3, r3, r5
 8009744:	d418      	bmi.n	8009778 <_malloc_r+0x8c>
 8009746:	2b0b      	cmp	r3, #11
 8009748:	d90f      	bls.n	800976a <_malloc_r+0x7e>
 800974a:	600b      	str	r3, [r1, #0]
 800974c:	50cd      	str	r5, [r1, r3]
 800974e:	18cc      	adds	r4, r1, r3
 8009750:	4630      	mov	r0, r6
 8009752:	f000 f836 	bl	80097c2 <__malloc_unlock>
 8009756:	f104 000b 	add.w	r0, r4, #11
 800975a:	1d23      	adds	r3, r4, #4
 800975c:	f020 0007 	bic.w	r0, r0, #7
 8009760:	1ac3      	subs	r3, r0, r3
 8009762:	d0d3      	beq.n	800970c <_malloc_r+0x20>
 8009764:	425a      	negs	r2, r3
 8009766:	50e2      	str	r2, [r4, r3]
 8009768:	e7d0      	b.n	800970c <_malloc_r+0x20>
 800976a:	428c      	cmp	r4, r1
 800976c:	684b      	ldr	r3, [r1, #4]
 800976e:	bf16      	itet	ne
 8009770:	6063      	strne	r3, [r4, #4]
 8009772:	6013      	streq	r3, [r2, #0]
 8009774:	460c      	movne	r4, r1
 8009776:	e7eb      	b.n	8009750 <_malloc_r+0x64>
 8009778:	460c      	mov	r4, r1
 800977a:	6849      	ldr	r1, [r1, #4]
 800977c:	e7cc      	b.n	8009718 <_malloc_r+0x2c>
 800977e:	1cc4      	adds	r4, r0, #3
 8009780:	f024 0403 	bic.w	r4, r4, #3
 8009784:	42a0      	cmp	r0, r4
 8009786:	d005      	beq.n	8009794 <_malloc_r+0xa8>
 8009788:	1a21      	subs	r1, r4, r0
 800978a:	4630      	mov	r0, r6
 800978c:	f000 f808 	bl	80097a0 <_sbrk_r>
 8009790:	3001      	adds	r0, #1
 8009792:	d0cf      	beq.n	8009734 <_malloc_r+0x48>
 8009794:	6025      	str	r5, [r4, #0]
 8009796:	e7db      	b.n	8009750 <_malloc_r+0x64>
 8009798:	200001c8 	.word	0x200001c8
 800979c:	200001cc 	.word	0x200001cc

080097a0 <_sbrk_r>:
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	4c06      	ldr	r4, [pc, #24]	; (80097bc <_sbrk_r+0x1c>)
 80097a4:	2300      	movs	r3, #0
 80097a6:	4605      	mov	r5, r0
 80097a8:	4608      	mov	r0, r1
 80097aa:	6023      	str	r3, [r4, #0]
 80097ac:	f7ff f9b6 	bl	8008b1c <_sbrk>
 80097b0:	1c43      	adds	r3, r0, #1
 80097b2:	d102      	bne.n	80097ba <_sbrk_r+0x1a>
 80097b4:	6823      	ldr	r3, [r4, #0]
 80097b6:	b103      	cbz	r3, 80097ba <_sbrk_r+0x1a>
 80097b8:	602b      	str	r3, [r5, #0]
 80097ba:	bd38      	pop	{r3, r4, r5, pc}
 80097bc:	20000c88 	.word	0x20000c88

080097c0 <__malloc_lock>:
 80097c0:	4770      	bx	lr

080097c2 <__malloc_unlock>:
 80097c2:	4770      	bx	lr

080097c4 <_init>:
 80097c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c6:	bf00      	nop
 80097c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ca:	bc08      	pop	{r3}
 80097cc:	469e      	mov	lr, r3
 80097ce:	4770      	bx	lr

080097d0 <_fini>:
 80097d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d2:	bf00      	nop
 80097d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097d6:	bc08      	pop	{r3}
 80097d8:	469e      	mov	lr, r3
 80097da:	4770      	bx	lr
